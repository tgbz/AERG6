{
    "sourceFile": "stage1/gameserver.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1652458448350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1652458595126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+import socket, threading, time, sys, pickle, random, time, sys\n+\n+\n+\n+clients = dict()\n+maxPlayersForGame = 2\n+totalReadyPlayers = 0\n+\n+\n+class controlHandler(threading.Thread):\n+    def __init__(self):\n+        threading.Thread.__init__(self)\n+        global clients\n+        global totalReadyPlayers\n+        self.controlPort = 8080\n+        self.hostName = socket.gethostname()\n+        self.buffer = 2048\n+        \n+    def addClient(self,addr,port):\n+        if addr not in clients.keys():\n+            if addr not in clients.keys():\n+                clients[addr] = {\n+                \"port\": port,\n+                \"ready\": 0,\n+                \"ingame\": 0,\n+                \"online\": 1\n+            }\n+            print(\"Cliente \" + str(addr) + \" adicionado\")\n+        else:\n+            print(\"Cliente \" + str(addr) + \" já existe\")\n+        return clients[addr]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1652458693940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,11 @@\n         global totalReadyPlayers\n         self.controlPort = 8080\n         self.hostName = socket.gethostname()\n         self.buffer = 2048\n-        \n+   \n+    #Funcao Utilitaria que adiciona o cliente, utilizando o endereço ipv6 como chave.\n+    #Caso ele já exista, não faz nada.    \n     def addClient(self,addr,port):\n         if addr not in clients.keys():\n             if addr not in clients.keys():\n                 clients[addr] = {\n@@ -27,5 +29,17 @@\n             }\n             print(\"Cliente \" + str(addr) + \" adicionado\")\n         else:\n             print(\"Cliente \" + str(addr) + \" já existe\")\n-        return clients[addr]\n\\ No newline at end of file\n+        return clients[addr]\n+    #Funcao utilitaria que remove um dado cliente da lista de clientes.\n+    def removeClient(self,addr):\n+        if addr in clients.keys():\n+            clients.pop(addr)\n+            print(\"Cliente \" + str(addr) + \" removido\")\n+        else:\n+            print(\"Cliente \" + str(addr) + \" não encontrado\")\n+    #Funcao utilitaria que devolve o endereço de um dado cliente.\n+    def getClient(self,addr):\n+        if addr in clients.keys():\n+            return clients[addr]\n+        \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652458756547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,13 +6,11 @@\n maxPlayersForGame = 2\n totalReadyPlayers = 0\n \n \n-class controlHandler(threading.Thread):\n+class networkStatusHandler(threading.Thread):\n     def __init__(self):\n         threading.Thread.__init__(self)\n-        global clients\n-        global totalReadyPlayers\n         self.controlPort = 8080\n         self.hostName = socket.gethostname()\n         self.buffer = 2048\n    \n@@ -41,5 +39,11 @@\n     #Funcao utilitaria que devolve o endereço de um dado cliente.\n     def getClient(self,addr):\n         if addr in clients.keys():\n             return clients[addr]\n-        \n\\ No newline at end of file\n+        else:\n+            print(\"Cliente nao encontrado\")\n+            return None\n+    \n+    def run(self):\n+        global totalReadyPlayers\n+        print(\"I\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1652458850331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n         threading.Thread.__init__(self)\n         self.controlPort = 8080\n         self.hostName = socket.gethostname()\n         self.buffer = 2048\n+        self.mcastAddr = \"FF01:0:0:0:0:0:0:1\"\n    \n     #Funcao Utilitaria que adiciona o cliente, utilizando o endereço ipv6 como chave.\n     #Caso ele já exista, não faz nada.    \n     def addClient(self,addr,port):\n@@ -45,5 +46,12 @@\n             return None\n     \n     def run(self):\n         global totalReadyPlayers\n-        print(\"I\")\n\\ No newline at end of file\n+        print(\"Thread de gestao de utilizadores inicialziada\")\n+        #bind the socket para ipv6\n+        self.port = 8080\n+        self.hostName = socket.gethostname()\n+        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n+        self.socket.bind(('', self.port))\n+        \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652459320933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,11 +26,12 @@\n                 \"ingame\": 0,\n                 \"online\": 1\n             }\n             print(\"Cliente \" + str(addr) + \" adicionado\")\n+            return 1\n         else:\n             print(\"Cliente \" + str(addr) + \" já existe\")\n-        return clients[addr]\n+            return 0 \n     #Funcao utilitaria que remove um dado cliente da lista de clientes.\n     def removeClient(self,addr):\n         if addr in clients.keys():\n             clients.pop(addr)\n@@ -53,5 +54,14 @@\n         self.hostName = socket.gethostname()\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n         self.socket.bind(('', self.port))\n-        \n\\ No newline at end of file\n+        #Incializaçaõ de loop para gestao de users:\n+        while True:\n+            data, addr = self.socket.recvfrom(self.buffer)\n+            data = data.decode()\n+            #Cases para a receção de dados:\n+            \n+            if data.split('-')[0]==\"new\":\n+                print(\"Nova conexao de \" + str(data.split('-')[1]))\n+                \n+                \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652459517740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,6 +62,11 @@\n             #Cases para a receção de dados:\n             \n             if data.split('-')[0]==\"new\":\n                 print(\"Nova conexao de \" + str(data.split('-')[1]))\n-                \n+                if self.addClient(addr,addr[1])==1:\n+                    print(\"Cliente adicionado\"  + str(addr))\n+                    print(\"Estado actual dos clientes:\")\n+                    print(clients)\n+                    print(\"A enviar confirmação para os clientes:\")\n+                    self.socket.sendto(bytes((\"hello-%s-%s\"),addr[0],self.mcastAddr),addr)\n                 \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652459718688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,5 +68,13 @@\n                     print(\"Estado actual dos clientes:\")\n                     print(clients)\n                     print(\"A enviar confirmação para os clientes:\")\n                     self.socket.sendto(bytes((\"hello-%s-%s\"),addr[0],self.mcastAddr),addr)\n+                    print(\"Endereço Multicast Enviado\")\n+            elif data.split('-')[0]==\"mcast-ok\":\n+                #verificar se o cliente já está na lista de clientes\n+                if clients[addr[0]] is not None:\n+                    print(\"confirmação de recepção de multicast recebida de \" + str(addr[0]))\n+                    \n+                else:\n+                    print(\"Cliente não está autenticado... A descartar...\")\n                 \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652459979140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,22 @@\n         else:\n             print(\"Cliente nao encontrado\")\n             return None\n     \n+    #Funcao utilitaria que actualiza o estado de um dado cliente para online\n+    def setClientOnline(self,addr):\n+        if addr in clients.keys():\n+            clients[addr][\"online\"] = 1\n+        else:\n+            print(\"Cliente nao encontrado\")\n+    #Funcao utilitaria que actualiza o estado de um dado cliente para pronto\n+    def setClientReady(self,addr):\n+        global totalReadyPlayers\n+        if addr in clients.keys():\n+            clients[addr][\"ready\"] = 1\n+            totalReadyPlayers += 1\n+            \n+    \n     def run(self):\n         global totalReadyPlayers\n         print(\"Thread de gestao de utilizadores inicialziada\")\n         #bind the socket para ipv6\n@@ -73,8 +87,13 @@\n             elif data.split('-')[0]==\"mcast-ok\":\n                 #verificar se o cliente já está na lista de clientes\n                 if clients[addr[0]] is not None:\n                     print(\"confirmação de recepção de multicast recebida de \" + str(addr[0]))\n-                    \n+                    print(\"A atualizar o seu estado para online\")\n+                    self.setClientOnline(addr[0])\n+                    self.socket.sendto(bytes((\"ready?-%s\"),addr[0]),addr)\n                 else:\n                     print(\"Cliente não está autenticado... A descartar...\")\n+            elif data.split('-')[0]==\"readyOk\":\n+                print(\"cliente \" + str(addr[0]) + \" está pronto\")\n+                print(\"Estado actualizado dos clientes\")\n                 \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652461364018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import socket, threading, time, sys, pickle, random, time, sys\n+import socket, threading, time, sys, pickle, random, time, sys, json\n \n \n \n clients = dict()\n@@ -95,5 +95,61 @@\n                     print(\"Cliente não está autenticado... A descartar...\")\n             elif data.split('-')[0]==\"readyOk\":\n                 print(\"cliente \" + str(addr[0]) + \" está pronto\")\n                 print(\"Estado actualizado dos clientes\")\n-                \n\\ No newline at end of file\n+            \n+            elif data.split('-')[0]==\"disconnect\":\n+                print(\"A remover cliente \" + str(addr[0]))\n+                self.removeClient(addr[0])\n+                            \n+            \n+class hearbeatHandler(threading.Thread):\n+    #Funcao que inicializa a thread de heartbeat\n+    def __init__(self):\n+        threading.Thread.__init__(self)\n+        self.controlPort = 8081\n+        self.hostName = socket.gethostname()\n+        self.buffer = 2048\n+        \n+    #Funcao que envia um heartbeat para todos os clientes\n+    def sendHeartbeat(self):\n+        for addr in clients.keys():\n+            self.socket.sendto(bytes((\"heartbeat-%s\"),addr),addr)\n+            print(\"Heartbeat enviado para \" + str(addr))\n+    #Funcao que recebe um heartbeat de todos os clientes num espaço de 10 segundos, o seu estado é actualizado para online = 0\n+    def receiveHeartbeat(self):\n+        while True:\n+            data, addr = self.socket.recvfrom(self.buffer)\n+            data = data.decode()\n+            if data.split('-')[0]==\"heartbeat\":\n+                print(\"Heartbeat recebido de \" + str(addr))\n+                self.setClientOnline(addr[0])\n+            time.sleep(10)\n+            #Verificar se há clientes offline\n+            for addr in clients.keys():\n+                if clients[addr][\"online\"]==0:\n+                    print(\"Cliente \" + str(addr) + \" offline\")\n+    #Funcao que actualiza o estado de um dado cliente para offline\n+    \n+    #Funcao que inicializa a thread de heartbeat\n+    def run(self):\n+        print(\"Thread de heartbeat inicializada\")\n+        #bind the socket para ipv6\n+        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n+        self.socket.bind(('', self.port))\n+        #Incialização de loop para gestao de heartbeat\n+        while True:\n+            self.sendHeartbeat()\n+            self.receiveHeartbeat()\n+            time.sleep(10)\n+    \n+\n+\"\"\"\n+Thread para gestão do jogo, que inicializa o jogo e o envio das músicas assim como as opções de jogo para todos os clientes via mutlicast.        \n+\"\"\"\n+class Game(threading.Thread):\n+    def __init__(self):\n+        threading.Thread.__init__(self)\n+        self.songDB = \"songlist.json\"\n+        self.songList = json.load(open(self.songDB))\n+        \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652462354841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n \n clients = dict()\n maxPlayersForGame = 2\n totalReadyPlayers = 0\n+maxGameRounds = 3\n \n-\n class networkStatusHandler(threading.Thread):\n     def __init__(self):\n         threading.Thread.__init__(self)\n         self.controlPort = 8080\n@@ -151,5 +151,23 @@\n     def __init__(self):\n         threading.Thread.__init__(self)\n         self.songDB = \"songlist.json\"\n         self.songList = json.load(open(self.songDB))\n-        \n\\ No newline at end of file\n+        self.mCastSocket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n+        self.mCastSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n+        self.mCastSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n+        self.mCastSocket.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS,5)\n+        self.mCastSocket.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP,1)\n+        self.mCastSocket.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, 100)\n+        self.mcastPort = 8888\n+        self.mcastAddr = \"FF02::1\"\n+        self.buffer = 2048\n+        \n+        self.currentGameNumberOfPlayers = 0\n+        \n+        \n+    def generateGame(self):\n+        song = str(random.randint(1,len(self.songList)))\n+        \n+    def generateOptions(self):\n+        options = []\n+        maxOptions = \n\\ No newline at end of file\n"
                }
            ],
            "date": 1652458448350,
            "name": "Commit-0",
            "content": ""
        }
    ]
}