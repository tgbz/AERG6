{
    "sourceFile": "server/server.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1655066644440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1655066650983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,11 +91,8 @@\n         print(\"Ã€ espera de jogos....\")\r\n         while True:\r\n             while nClients < self.gameSize:\r\n                 time.sleep(0.1)\r\n-            print(\"connClients..\")\r\n-            print(conClients)\r\n-            input(\"wait\")\r\n             print(\"jogo a iniciar...\\n\\n\\n\")\r\n             self.selectClientsForGame()\r\n             gm = GameLobby(self.gameSize, self.rounds, self.gameClients)\r\n             gm.start()\r\n"
                },
                {
                    "date": 1655066686691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,9 @@\n         pprint.pprint(self.gameClients)\r\n         gameID = random.randint(0, 10000)\r\n         gameData[gameID] = dict()\r\n         for client in self.gameClients:\r\n+            print(client)\r\n             print(\"startedThread\")\r\n             t = ClientGame(self.gameClients[client][\"addr\"], self.gameClients[client][\"port\"], gameMenu, gameID, self)\r\n             self.threadPool.append(t)\r\n         #start all the threads\r\n"
                },
                {
                    "date": 1655066705452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,9 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         self.parent = parent\r\n-        self.prefix = \r\n+        self.prefix = \"\"\r\n         \r\n         \r\n     def startGame(self):\r\n         while True:\r\n"
                },
                {
                    "date": 1655066725068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n         gameData[gameID] = dict()\r\n         for client in self.gameClients:\r\n             print(client)\r\n             print(\"startedThread\")\r\n-            t = ClientGame(self.gameClients[client][\"addr\"], self.gameClients[client][\"port\"], gameMenu, gameID, self)\r\n+            t = ClientGame(client,self.gameClients[client][\"addr\"], self.gameClients[client][\"port\"], gameMenu, gameID, self)\r\n             self.threadPool.append(t)\r\n         #start all the threads\r\n         for thread in self.threadPool:\r\n             thread.start()\r\n@@ -140,9 +140,9 @@\n         \r\n         print(\"all players ended the game\")\r\n             \r\n class ClientGame(threading.Thread):\r\n-    def __init__(self, caddr, cport, gameMenu, gameID, parent):\r\n+    def __init__(self,prefix, caddr, cport, gameMenu, gameID, parent):\r\n         threading.Thread.__init__(self)\r\n         self.addr = caddr\r\n         self.port = cport\r\n         self.gameMenu = gameMenu + \"-end\"\r\n"
                },
                {
                    "date": 1655066734702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,9 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         self.parent = parent\r\n-        self.prefix = \"\"\r\n+        self.prefix = prefix+\"-\"\r\n         \r\n         \r\n     def startGame(self):\r\n         while True:\r\n"
                },
                {
                    "date": 1655066783085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,9 +158,9 @@\n     def startGame(self):\r\n         while True:\r\n             print(\"trying to send startGame to \" + self.addr)\r\n             try:\r\n-                msg = \"gameStart\"\r\n+                msg = self.prefix + \"gameStart\"\r\n                 self.socket.sendto(msg.encode(), (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if data.decode() == \"gameStart-ack\" and addr[0] == self.addr:\r\n                     print(\"gameStart-ack received\")\r\n"
                },
                {
                    "date": 1655066798147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,8 +171,9 @@\n     def sendGameMenu(self):\r\n         while True:\r\n             print(\"trying to send gameMenu to \" + self.addr)\r\n             try:\r\n+                msg = self.prefix + self.gameMenu\r\n                 self.socket.sendto(self.gameMenu.encode(), (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if data.decode() == \"gameMenu-ack\" and addr[0] == self.addr:\r\n                     print(\"gameMenu-ack received\")\r\n"
                },
                {
                    "date": 1655066806733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,9 +158,9 @@\n     def startGame(self):\r\n         while True:\r\n             print(\"trying to send startGame to \" + self.addr)\r\n             try:\r\n-                msg = self.prefix + \"gameStart\"\r\n+                msg = \"gameStart\"\r\n                 self.socket.sendto(msg.encode(), (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if data.decode() == \"gameStart-ack\" and addr[0] == self.addr:\r\n                     print(\"gameStart-ack received\")\r\n@@ -171,9 +171,8 @@\n     def sendGameMenu(self):\r\n         while True:\r\n             print(\"trying to send gameMenu to \" + self.addr)\r\n             try:\r\n-                msg = self.prefix + self.gameMenu\r\n                 self.socket.sendto(self.gameMenu.encode(), (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if data.decode() == \"gameMenu-ack\" and addr[0] == self.addr:\r\n                     print(\"gameMenu-ack received\")\r\n"
                },
                {
                    "date": 1655069577932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n         gameData[gameID] = dict()\r\n         for client in self.gameClients:\r\n             print(client)\r\n             print(\"startedThread\")\r\n-            t = ClientGame(client,self.gameClients[client][\"addr\"], self.gameClients[client][\"port\"], gameMenu, gameID, self)\r\n+            t = ClientGame(self.gameClients[client][\"addr\"], self.gameClients[client][\"port\"], gameMenu, gameID, self)\r\n             self.threadPool.append(t)\r\n         #start all the threads\r\n         for thread in self.threadPool:\r\n             thread.start()\r\n@@ -140,9 +140,9 @@\n         \r\n         print(\"all players ended the game\")\r\n             \r\n class ClientGame(threading.Thread):\r\n-    def __init__(self,prefix, caddr, cport, gameMenu, gameID, parent):\r\n+    def __init__(self, caddr, cport, gameMenu, gameID, parent):\r\n         threading.Thread.__init__(self)\r\n         self.addr = caddr\r\n         self.port = cport\r\n         self.gameMenu = gameMenu + \"-end\"\r\n@@ -151,9 +151,8 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         self.parent = parent\r\n-        self.prefix = prefix+\"-\"\r\n         \r\n         \r\n     def startGame(self):\r\n         while True:\r\n"
                },
                {
                    "date": 1655069626107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,8 +195,9 @@\n         while True:\r\n             try:\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if data.decode().split('-')[0] == \"results\" and addr[0] == self.addr:\r\n+                    print(\"Resultados de \" + self.addr \" recebidos\")\r\n                     res = data.decode()\r\n                     break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n"
                },
                {
                    "date": 1655069633095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,9 +195,9 @@\n         while True:\r\n             try:\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if data.decode().split('-')[0] == \"results\" and addr[0] == self.addr:\r\n-                    print(\"Resultados de \" + self.addr \" recebidos\")\r\n+                    print(\"Resultados de \" + self.addr + \" recebidos\")\r\n                     res = data.decode()\r\n                     break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n"
                },
                {
                    "date": 1655070885732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,10 +220,11 @@\n             if float(self.parent.gameData[addr][\"tempo\"]) < float(min):\r\n                 min = self.parent.gameData[addr][\"tempo\"]\r\n                 minAddr = addr\r\n         print(\"Winner: \" + maxAddr + \" with \" + str(max) + \" correct answers\")\r\n-        try:\r\n-            while True:\r\n+        \r\n+        while True:\r\n+            try:\r\n                 if maxAddr == self.addr:\r\n                     self.socket.sendto(\"final-Ganhou o  Jogo!!!\".encode(), (self.addr, self.port))\r\n                     data, addr = self.socket.recvfrom(self.buffer)\r\n                     if data.decode() == \"final-ack\" and addr[0] == self.addr:\r\n@@ -233,10 +234,10 @@\n                     data, addr = self.socket.recvfrom(self.buffer)\r\n                     if data.decode() == \"final-ack\" and addr[0] == self.addr:\r\n                         print(\"game over\")\r\n                         break\r\n-        except socket.timeout:\r\n-            print(\"Timeout\")\r\n+            except socket.timeout:\r\n+                print(\"Timeout\")\r\n         \r\n     \r\n     def run(self):\r\n         self.socket.settimeout(3)\r\n"
                },
                {
                    "date": 1655072855935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,12 @@\n import threading, random, pprint, time, socket, gameGenerator, re\r\n \r\n-\r\n-\r\n #Variaveis Globais\r\n nClients = 0 #numero de clientes online\r\n conClients = dict() #dicionario de clientes\r\n routingTable = dict() #dicionario de rotas\r\n gameData = dict() #dicionario de dados do jogo\r\n \r\n-\r\n class ClientManager(threading.Thread):\r\n     def __init__(self):\r\n         threading.Thread.__init__(self)\r\n         self.port = 8080\r\n@@ -30,30 +27,29 @@\n                 \"port\" : self.gamePort\r\n             }\r\n             routingTable[addr] = addr\r\n             nClients += 1\r\n-            print(\"Client \" + hostname + \" added\")\r\n+            print(\"Jogador (\" + hostname + \") adicionado\")\r\n             return 1\r\n         else:\r\n-            print(\"Client \" + hostname + \" already exists\")\r\n+            print(\"Jogador (\" + hostname + \") ja existente\")\r\n             return 0\r\n \r\n     def removeClient(self, hostname):\r\n         global conClients, nClients, routingTable\r\n         if hostname in conClients.keys():\r\n             conClients.pop(hostname)\r\n             #routingTable.pop(hostname)\r\n-            print(\"Client \" + hostname + \" removed\")\r\n+            print(\"Jogador (\" + hostname + \") removido\")\r\n             return 1\r\n         else:\r\n-            print(\"Client \" + hostname + \" does not exist\")\r\n+            print(\"Jogador (\" + hostname + \") nao existe\")\r\n             return 0\r\n     #hello-hostname-actualAddr    \r\n     def run(self):\r\n         global conClients, nClients\r\n         while True:\r\n-            print(\"waiting for new clients..\")\r\n-            print(nClients)\r\n+            print(\"Servidor a espera de nova conexao\")\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             msg = data.decode().split('-')\r\n             if msg[0] == \"hello\":\r\n                 if self.addClient(msg[1], addr[0], addr[1]):\r\n@@ -82,18 +78,18 @@\n         for client in conClients:\r\n             if conClients[client][\"status\"] == 1:\r\n                 conClients[client][\"status\"] = 2\r\n                 self.gameClients[client] = conClients[client]\r\n-        print(\"Selected Clients for game: \")\r\n+        print(\"Jogadores selecionados para novo jogo: \")\r\n         print(self.gameClients)\r\n     \r\n     def run(self):\r\n         global nClients, conClients\r\n-        print(\"Ã€ espera de jogos....\")\r\n+        print(\"A espera de Jogadores...\")\r\n         while True:\r\n             while nClients < self.gameSize:\r\n                 time.sleep(0.1)\r\n-            print(\"jogo a iniciar...\\n\\n\\n\")\r\n+            print(\"Jogo a iniciar...\\n\\n\\n\")\r\n             self.selectClientsForGame()\r\n             gm = GameLobby(self.gameSize, self.rounds, self.gameClients)\r\n             gm.start()\r\n             self.gameClients = dict()\r\n@@ -126,10 +122,8 @@\n         pprint.pprint(self.gameClients)\r\n         gameID = random.randint(0, 10000)\r\n         gameData[gameID] = dict()\r\n         for client in self.gameClients:\r\n-            print(client)\r\n-            print(\"startedThread\")\r\n             t = ClientGame(self.gameClients[client][\"addr\"], self.gameClients[client][\"port\"], gameMenu, gameID, self)\r\n             self.threadPool.append(t)\r\n         #start all the threads\r\n         for thread in self.threadPool:\r\n@@ -137,9 +131,9 @@\n         #wait for all the threads to finish\r\n         for thread in self.threadPool:\r\n             thread.join()\r\n         \r\n-        print(\"all players ended the game\")\r\n+        print(\"Jogo Terminado\")\r\n             \r\n class ClientGame(threading.Thread):\r\n     def __init__(self, caddr, cport, gameMenu, gameID, parent):\r\n         threading.Thread.__init__(self)\r\n@@ -155,42 +149,39 @@\n         \r\n         \r\n     def startGame(self):\r\n         while True:\r\n-            print(\"trying to send startGame to \" + self.addr)\r\n+            print(\"A iniciar jogo de \" + self.addr)\r\n             try:\r\n                 msg = \"gameStart\"\r\n                 self.socket.sendto(msg.encode(), (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if data.decode() == \"gameStart-ack\" and addr[0] == self.addr:\r\n                     print(\"gameStart-ack received\")\r\n                     break\r\n             except socket.timeout:\r\n-                print(\"timeout\")\r\n+                pass\r\n             \r\n     def sendGameMenu(self):\r\n         while True:\r\n-            print(\"trying to send gameMenu to \" + self.addr)\r\n             try:\r\n                 self.socket.sendto(self.gameMenu.encode(), (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if data.decode() == \"gameMenu-ack\" and addr[0] == self.addr:\r\n-                    print(\"gameMenu-ack received\")\r\n                     break\r\n             except socket.timeout:\r\n-                print(\"Timeout\")\r\n+                pass\r\n     \r\n     def sendGo(self):\r\n         while True:\r\n             try:\r\n                 msg = \"go\"\r\n                 self.socket.sendto(msg.encode(), (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if data.decode() == \"go-ack\" and addr[0] == self.addr:\r\n-                    print(\"go-ack received\")\r\n                     break\r\n             except socket.timeout:\r\n-                print(\"Timeout\")\r\n+                pass\r\n     #results-r<id>-@tempo#escolha-r<id>-@tempo#escolha-\r\n     def waitForEnd(self):\r\n         while True:\r\n             try:\r\n@@ -199,16 +190,16 @@\n                     print(\"Resultados de \" + self.addr + \" recebidos\")\r\n                     res = data.decode()\r\n                     break\r\n             except socket.timeout:\r\n-                print(\"Timeout\")\r\n+                pass\r\n         with self.parent.lock:\r\n             self.parent.updateGameData(self.addr, res.split('-')[1], res.split('-')[2])\r\n     \r\n     def finalResults(self):\r\n         while self.parent.gameDone < self.parent.gameSize:\r\n             time.sleep(0.1)\r\n-        print(\"Final Results: \")\r\n+        print(\"Resultado final: \")\r\n         pprint.pprint(self.parent.gameData)\r\n         max = 0\r\n         min = 1000\r\n         maxAddr = \"\"\r\n@@ -219,9 +210,9 @@\n                 maxAddr = addr\r\n             if float(self.parent.gameData[addr][\"tempo\"]) < float(min):\r\n                 min = self.parent.gameData[addr][\"tempo\"]\r\n                 minAddr = addr\r\n-        print(\"Winner: \" + maxAddr + \" with \" + str(max) + \" correct answers\")\r\n+        print(\"Vencedor: \" + maxAddr + \" com \" + str(max) + \" resposta corretas\")\r\n         \r\n         while True:\r\n             try:\r\n                 if maxAddr == self.addr:\r\n@@ -235,10 +226,9 @@\n                     if data.decode() == \"final-ack\" and addr[0] == self.addr:\r\n                         print(\"game over\")\r\n                         break\r\n             except socket.timeout:\r\n-                print(\"Timeout\")\r\n-        \r\n+                pass        \r\n     \r\n     def run(self):\r\n         self.socket.settimeout(3)\r\n         self.startGame()\r\n"
                },
                {
                    "date": 1655073406805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,8 @@\n                 msg = \"gameStart\"\r\n                 self.socket.sendto(msg.encode(), (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if data.decode() == \"gameStart-ack\" and addr[0] == self.addr:\r\n-                    print(\"gameStart-ack received\")\r\n                     break\r\n             except socket.timeout:\r\n                 pass\r\n             \r\n"
                },
                {
                    "date": 1655073457394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,15 +53,15 @@\n             msg = data.decode().split('-')\r\n             if msg[0] == \"hello\":\r\n                 if self.addClient(msg[1], addr[0], addr[1]):\r\n                     self.socket.sendto((\"hello-ack-\" + str(self.gamePort)).encode(), addr)\r\n-                    print(\"hello ack sent to \" + msg[1])\r\n+                    print(\"Confirmacao de conexao com \" + msg[1])\r\n                 else:\r\n                     self.socket.sendto(\"You are already connected\".encode(), addr)\r\n             elif msg[0] == \"disconnect\":\r\n                 if self.removeClient(msg[1]):\r\n                     self.socket.sendto(\"disconnect-ack\".encode(), addr)\r\n-                    print(\"disconnect ack sent to \" + msg[1])\r\n+                    print(\"Termino de conexao com \" + msg[1])\r\n                 else:\r\n                     self.socket.sendto(\"You are not connected\".encode(), addr)\r\n \r\n \r\n"
                },
                {
                    "date": 1655074032385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,14 @@\n         #wait for all the threads to finish\r\n         for thread in self.threadPool:\r\n             thread.join()\r\n         \r\n-        print(\"Jogo Terminado\")\r\n+        print(\"Resultado final: \")\r\n+        print(\"|\\tAddress\\t|\\tNo Corretas\\t|\\tTempo\")\r\n+        for key in self.gameData:\r\n+            print(\"|\\t\"+key+\"\\t|\\t\"+self.gameData[key].nCorrectas +\"\\t|\\t\"+self.gameData[key].tempo)\r\n+\r\n+        print(\"\\nJogo Terminado\")\r\n             \r\n class ClientGame(threading.Thread):\r\n     def __init__(self, caddr, cport, gameMenu, gameID, parent):\r\n         threading.Thread.__init__(self)\r\n@@ -196,10 +201,9 @@\n     \r\n     def finalResults(self):\r\n         while self.parent.gameDone < self.parent.gameSize:\r\n             time.sleep(0.1)\r\n-        print(\"Resultado final: \")\r\n-        pprint.pprint(self.parent.gameData)\r\n+\r\n         max = 0\r\n         min = 1000\r\n         maxAddr = \"\"\r\n         minAddr = \"\"\r\n"
                },
                {
                    "date": 1655074695575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,10 @@\n             if conClients[client][\"status\"] == 1:\r\n                 conClients[client][\"status\"] = 2\r\n                 self.gameClients[client] = conClients[client]\r\n         print(\"Jogadores selecionados para novo jogo: \")\r\n-        print(self.gameClients)\r\n+        for key in self.gameClients:\r\n+            print(\"Jogador: \"+key+\"\\t| Addr: \"+self.gameClients[key][\"addr\"]+'\\t| Port: '+self.gameClients[key][\"port\"])\r\n     \r\n     def run(self):\r\n         global nClients, conClients\r\n         print(\"A espera de Jogadores...\")\r\n@@ -134,9 +135,9 @@\n         \r\n         print(\"Resultado final: \")\r\n         print(\"|\\tAddress\\t|\\tNo Corretas\\t|\\tTempo\")\r\n         for key in self.gameData:\r\n-            print(\"|\\t\"+key+\"\\t|\\t\"+self.gameData[key].nCorrectas +\"\\t|\\t\"+self.gameData[key].tempo)\r\n+            print(\"|\\t\"+key+\"\\t|\\t\"+self.gameData[key][\"nCorrectas\"] +\"\\t|\\t\"+self.gameData[key][\"tempo\"])\r\n \r\n         print(\"\\nJogo Terminado\")\r\n             \r\n class ClientGame(threading.Thread):\r\n"
                },
                {
                    "date": 1655074715625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n         for thread in self.threadPool:\r\n             thread.join()\r\n         \r\n         print(\"Resultado final: \")\r\n-        print(\"|\\tAddress\\t|\\tNo Corretas\\t|\\tTempo\")\r\n+        print(\"|\\tAddress\\t\\t|\\tNo Corretas\\t|\\tTempo\")\r\n         for key in self.gameData:\r\n             print(\"|\\t\"+key+\"\\t|\\t\"+self.gameData[key][\"nCorrectas\"] +\"\\t|\\t\"+self.gameData[key][\"tempo\"])\r\n \r\n         print(\"\\nJogo Terminado\")\r\n"
                },
                {
                    "date": 1655074847373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,8 @@\n     def run(self):\r\n         global gameData\r\n         gg = gameGenerator.gameGenerator(self.rounds)\r\n         gameMenu = gg.getOptionsForSongs()\r\n-        pprint.pprint(self.gameClients)\r\n         gameID = random.randint(0, 10000)\r\n         gameData[gameID] = dict()\r\n         for client in self.gameClients:\r\n             t = ClientGame(self.gameClients[client][\"addr\"], self.gameClients[client][\"port\"], gameMenu, gameID, self)\r\n"
                },
                {
                    "date": 1655074922723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n                 conClients[client][\"status\"] = 2\r\n                 self.gameClients[client] = conClients[client]\r\n         print(\"Jogadores selecionados para novo jogo: \")\r\n         for key in self.gameClients:\r\n-            print(\"Jogador: \"+key+\"\\t| Addr: \"+self.gameClients[key][\"addr\"]+'\\t| Port: '+self.gameClients[key][\"port\"])\r\n+            print(\"Jogador: \"+key+\"\\t| Addr: \"+self.gameClients[key][\"addr\"]+'\\t| Port: '+str(self.gameClients[key][\"port\"]))\r\n     \r\n     def run(self):\r\n         global nClients, conClients\r\n         print(\"A espera de Jogadores...\")\r\n"
                },
                {
                    "date": 1655074941405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n         \r\n         print(\"Resultado final: \")\r\n         print(\"|\\tAddress\\t\\t|\\tNo Corretas\\t|\\tTempo\")\r\n         for key in self.gameData:\r\n-            print(\"|\\t\"+key+\"\\t|\\t\"+self.gameData[key][\"nCorrectas\"] +\"\\t|\\t\"+self.gameData[key][\"tempo\"])\r\n+            print(\"|\\t\"+key+\"\\t|\\t\"+str(self.gameData[key][\"nCorrectas\"]) +\"\\t|\\t\"+str(self.gameData[key][\"tempo\"]))\r\n \r\n         print(\"\\nJogo Terminado\")\r\n             \r\n class ClientGame(threading.Thread):\r\n"
                }
            ],
            "date": 1655066644440,
            "name": "Commit-0",
            "content": "import threading, random, pprint, time, socket, gameGenerator, re\r\n\r\n\r\n\r\n#Variaveis Globais\r\nnClients = 0 #numero de clientes online\r\nconClients = dict() #dicionario de clientes\r\nroutingTable = dict() #dicionario de rotas\r\ngameData = dict() #dicionario de dados do jogo\r\n\r\n\r\nclass ClientManager(threading.Thread):\r\n    def __init__(self):\r\n        threading.Thread.__init__(self)\r\n        self.port = 8080\r\n        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n        self.socket.bind(('', self.port))\r\n        self.buffer = 2048\r\n        self.gamePort = 8081\r\n        self.hostname = socket.gethostname()\r\n\r\n    def addClient(self, hostname, addr, port):\r\n        global conClients, nClients, routingTable\r\n        if hostname not in conClients.keys():\r\n            self.gamePort += 1\r\n            conClients[hostname] = {\r\n                \"addr\": addr,\r\n                \"status\": 1, #0 = not connected, 1 = connected, 2 = ready, 3 = ingame\r\n                \"port\" : self.gamePort\r\n            }\r\n            routingTable[addr] = addr\r\n            nClients += 1\r\n            print(\"Client \" + hostname + \" added\")\r\n            return 1\r\n        else:\r\n            print(\"Client \" + hostname + \" already exists\")\r\n            return 0\r\n\r\n    def removeClient(self, hostname):\r\n        global conClients, nClients, routingTable\r\n        if hostname in conClients.keys():\r\n            conClients.pop(hostname)\r\n            #routingTable.pop(hostname)\r\n            print(\"Client \" + hostname + \" removed\")\r\n            return 1\r\n        else:\r\n            print(\"Client \" + hostname + \" does not exist\")\r\n            return 0\r\n    #hello-hostname-actualAddr    \r\n    def run(self):\r\n        global conClients, nClients\r\n        while True:\r\n            print(\"waiting for new clients..\")\r\n            print(nClients)\r\n            data, addr = self.socket.recvfrom(self.buffer)\r\n            msg = data.decode().split('-')\r\n            if msg[0] == \"hello\":\r\n                if self.addClient(msg[1], addr[0], addr[1]):\r\n                    self.socket.sendto((\"hello-ack-\" + str(self.gamePort)).encode(), addr)\r\n                    print(\"hello ack sent to \" + msg[1])\r\n                else:\r\n                    self.socket.sendto(\"You are already connected\".encode(), addr)\r\n            elif msg[0] == \"disconnect\":\r\n                if self.removeClient(msg[1]):\r\n                    self.socket.sendto(\"disconnect-ack\".encode(), addr)\r\n                    print(\"disconnect ack sent to \" + msg[1])\r\n                else:\r\n                    self.socket.sendto(\"You are not connected\".encode(), addr)\r\n\r\n\r\n\r\nclass GameManager():\r\n    def __init__(self, rounds, gameSize):\r\n        self.rounds = rounds #Numero de rondas associadas a cada jogo\r\n        self.gameSize = gameSize #Numero de jogadores por jogo\r\n        self.gameClients = dict()\r\n        self.run()\r\n        \r\n    def selectClientsForGame(self):\r\n        global conClients\r\n        for client in conClients:\r\n            if conClients[client][\"status\"] == 1:\r\n                conClients[client][\"status\"] = 2\r\n                self.gameClients[client] = conClients[client]\r\n        print(\"Selected Clients for game: \")\r\n        print(self.gameClients)\r\n    \r\n    def run(self):\r\n        global nClients, conClients\r\n        print(\"Ã€ espera de jogos....\")\r\n        while True:\r\n            while nClients < self.gameSize:\r\n                time.sleep(0.1)\r\n            print(\"connClients..\")\r\n            print(conClients)\r\n            input(\"wait\")\r\n            print(\"jogo a iniciar...\\n\\n\\n\")\r\n            self.selectClientsForGame()\r\n            gm = GameLobby(self.gameSize, self.rounds, self.gameClients)\r\n            gm.start()\r\n            self.gameClients = dict()\r\n            nClients = 0\r\n\r\nclass GameLobby(threading.Thread):\r\n    def __init__(self, gameSize, rounds, gameClients):\r\n        threading.Thread.__init__(self)\r\n        self.rounds = rounds\r\n        self.gameSize = gameSize\r\n        self.gameClients = gameClients\r\n        self.gameData = dict()\r\n        self.gameClients = gameClients\r\n        self.threadPool = []\r\n        self.gameData = dict()\r\n        self.lock = threading.Lock()\r\n        self.gameDone = 0\r\n    \r\n    def updateGameData(self, addr, nCorrectas, tempo):\r\n        self.gameData[addr] = {\r\n            \"nCorrectas\": nCorrectas,\r\n            \"tempo\": tempo\r\n        }\r\n        self.gameDone += 1\r\n    \r\n    def run(self):\r\n        global gameData\r\n        gg = gameGenerator.gameGenerator(self.rounds)\r\n        gameMenu = gg.getOptionsForSongs()\r\n        pprint.pprint(self.gameClients)\r\n        gameID = random.randint(0, 10000)\r\n        gameData[gameID] = dict()\r\n        for client in self.gameClients:\r\n            print(\"startedThread\")\r\n            t = ClientGame(self.gameClients[client][\"addr\"], self.gameClients[client][\"port\"], gameMenu, gameID, self)\r\n            self.threadPool.append(t)\r\n        #start all the threads\r\n        for thread in self.threadPool:\r\n            thread.start()\r\n        #wait for all the threads to finish\r\n        for thread in self.threadPool:\r\n            thread.join()\r\n        \r\n        print(\"all players ended the game\")\r\n            \r\nclass ClientGame(threading.Thread):\r\n    def __init__(self, caddr, cport, gameMenu, gameID, parent):\r\n        threading.Thread.__init__(self)\r\n        self.addr = caddr\r\n        self.port = cport\r\n        self.gameMenu = gameMenu + \"-end\"\r\n        self.buffer = 4096\r\n        self.gameID = gameID\r\n        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n        self.socket.bind(('', self.port))\r\n        self.parent = parent\r\n        self.prefix = \r\n        \r\n        \r\n    def startGame(self):\r\n        while True:\r\n            print(\"trying to send startGame to \" + self.addr)\r\n            try:\r\n                msg = \"gameStart\"\r\n                self.socket.sendto(msg.encode(), (self.addr, self.port))\r\n                data, addr = self.socket.recvfrom(self.buffer)\r\n                if data.decode() == \"gameStart-ack\" and addr[0] == self.addr:\r\n                    print(\"gameStart-ack received\")\r\n                    break\r\n            except socket.timeout:\r\n                print(\"timeout\")\r\n            \r\n    def sendGameMenu(self):\r\n        while True:\r\n            print(\"trying to send gameMenu to \" + self.addr)\r\n            try:\r\n                self.socket.sendto(self.gameMenu.encode(), (self.addr, self.port))\r\n                data, addr = self.socket.recvfrom(self.buffer)\r\n                if data.decode() == \"gameMenu-ack\" and addr[0] == self.addr:\r\n                    print(\"gameMenu-ack received\")\r\n                    break\r\n            except socket.timeout:\r\n                print(\"Timeout\")\r\n    \r\n    def sendGo(self):\r\n        while True:\r\n            try:\r\n                msg = \"go\"\r\n                self.socket.sendto(msg.encode(), (self.addr, self.port))\r\n                data, addr = self.socket.recvfrom(self.buffer)\r\n                if data.decode() == \"go-ack\" and addr[0] == self.addr:\r\n                    print(\"go-ack received\")\r\n                    break\r\n            except socket.timeout:\r\n                print(\"Timeout\")\r\n    #results-r<id>-@tempo#escolha-r<id>-@tempo#escolha-\r\n    def waitForEnd(self):\r\n        while True:\r\n            try:\r\n                data, addr = self.socket.recvfrom(self.buffer)\r\n                if data.decode().split('-')[0] == \"results\" and addr[0] == self.addr:\r\n                    res = data.decode()\r\n                    break\r\n            except socket.timeout:\r\n                print(\"Timeout\")\r\n        with self.parent.lock:\r\n            self.parent.updateGameData(self.addr, res.split('-')[1], res.split('-')[2])\r\n    \r\n    def finalResults(self):\r\n        while self.parent.gameDone < self.parent.gameSize:\r\n            time.sleep(0.1)\r\n        print(\"Final Results: \")\r\n        pprint.pprint(self.parent.gameData)\r\n        max = 0\r\n        min = 1000\r\n        maxAddr = \"\"\r\n        minAddr = \"\"\r\n        for addr in self.parent.gameData:\r\n            if float(self.parent.gameData[addr][\"nCorrectas\"]) > float(max):\r\n                max = self.parent.gameData[addr][\"nCorrectas\"]\r\n                maxAddr = addr\r\n            if float(self.parent.gameData[addr][\"tempo\"]) < float(min):\r\n                min = self.parent.gameData[addr][\"tempo\"]\r\n                minAddr = addr\r\n        print(\"Winner: \" + maxAddr + \" with \" + str(max) + \" correct answers\")\r\n        try:\r\n            while True:\r\n                if maxAddr == self.addr:\r\n                    self.socket.sendto(\"final-Ganhou o  Jogo!!!\".encode(), (self.addr, self.port))\r\n                    data, addr = self.socket.recvfrom(self.buffer)\r\n                    if data.decode() == \"final-ack\" and addr[0] == self.addr:\r\n                        break\r\n                else:\r\n                    self.socket.sendto(\"final-Perdeu o Jogo!!!\".encode(), (self.addr, self.port))\r\n                    data, addr = self.socket.recvfrom(self.buffer)\r\n                    if data.decode() == \"final-ack\" and addr[0] == self.addr:\r\n                        print(\"game over\")\r\n                        break\r\n        except socket.timeout:\r\n            print(\"Timeout\")\r\n        \r\n    \r\n    def run(self):\r\n        self.socket.settimeout(3)\r\n        self.startGame()\r\n        self.sendGameMenu()\r\n        self.sendGo()\r\n        self.waitForEnd()\r\n        self.finalResults()\r\n\r\n                \r\ndef main():\r\n    cm = ClientManager()\r\n    cm.start()\r\n    gm = GameManager(3, 2)\r\n    \r\nif __name__ == \"__main__\":\r\n    main()"
        }
    ]
}