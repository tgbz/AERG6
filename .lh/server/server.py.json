{
    "sourceFile": "server/server.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 39,
            "patches": [
                {
                    "date": 1655051206402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1655051213101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,15 +205,8 @@\n         while self.parent.gameDone < self.parent.gameSize:\r\n             time.sleep(0.1)\r\n         print(\"Final Results: \")\r\n         pprint.pprint(self.parent.gameData)\r\n-        \"\"\"\r\n-        with the following structure of self.parent.gameData:\r\n-        {'addr':{'nCorrectas': nCorrectas, 'tempo': tempo},\r\n-            'addr':{'nCorrectas': nCorrectas, 'tempo': tempo},\r\n-            }\r\n-        get the addr with highest nCorrectas and lowest tempo\r\n-        \"\"\"\r\n         max = 0\r\n         min = 100\r\n         for addr in self.parent.gameData:\r\n             if self.parent.gameData[addr][\"nCorrectas\"] > max:\r\n"
                },
                {
                    "date": 1655051227507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,9 +206,9 @@\n             time.sleep(0.1)\r\n         print(\"Final Results: \")\r\n         pprint.pprint(self.parent.gameData)\r\n         max = 0\r\n-        min = 100\r\n+        min = 1000\r\n         for addr in self.parent.gameData:\r\n             if self.parent.gameData[addr][\"nCorrectas\"] > max:\r\n                 max = self.parent.gameData[addr][\"nCorrectas\"]\r\n                 maxAddr = addr\r\n"
                },
                {
                    "date": 1655051281710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,9 @@\n         for addr in self.parent.gameData:\r\n             if self.parent.gameData[addr][\"nCorrectas\"] > max:\r\n                 max = self.parent.gameData[addr][\"nCorrectas\"]\r\n                 maxAddr = addr\r\n-            if self.parent.gameData[addr][\"tempo\"] < min:\r\n+            if float(self.parent.gameData[addr][\"tempo\"]) < min:\r\n                 min = self.parent.gameData[addr][\"tempo\"]\r\n                 minAddr = addr\r\n         print(\"Winner: \" + maxAddr + \" with \" + str(max) + \" correct answers\")\r\n         print(\"Loser: \" + minAddr + \" with \" + str(min) + \" correct answers\")\r\n"
                },
                {
                    "date": 1655051307494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,12 +208,12 @@\n         pprint.pprint(self.parent.gameData)\r\n         max = 0\r\n         min = 1000\r\n         for addr in self.parent.gameData:\r\n-            if self.parent.gameData[addr][\"nCorrectas\"] > max:\r\n+            if self.parent.gameData[addr][\"nCorrectas\"] > float(max):\r\n                 max = self.parent.gameData[addr][\"nCorrectas\"]\r\n                 maxAddr = addr\r\n-            if float(self.parent.gameData[addr][\"tempo\"]) < min:\r\n+            if float(self.parent.gameData[addr][\"tempo\"]) < float(min):\r\n                 min = self.parent.gameData[addr][\"tempo\"]\r\n                 minAddr = addr\r\n         print(\"Winner: \" + maxAddr + \" with \" + str(max) + \" correct answers\")\r\n         print(\"Loser: \" + minAddr + \" with \" + str(min) + \" correct answers\")\r\n"
                },
                {
                    "date": 1655051346394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,9 +208,9 @@\n         pprint.pprint(self.parent.gameData)\r\n         max = 0\r\n         min = 1000\r\n         for addr in self.parent.gameData:\r\n-            if self.parent.gameData[addr][\"nCorrectas\"] > float(max):\r\n+            if float(self.parent.gameData[addr][\"nCorrectas\"]) > float(max):\r\n                 max = self.parent.gameData[addr][\"nCorrectas\"]\r\n                 maxAddr = addr\r\n             if float(self.parent.gameData[addr][\"tempo\"]) < float(min):\r\n                 min = self.parent.gameData[addr][\"tempo\"]\r\n"
                },
                {
                    "date": 1655051447084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,12 +215,15 @@\n             if float(self.parent.gameData[addr][\"tempo\"]) < float(min):\r\n                 min = self.parent.gameData[addr][\"tempo\"]\r\n                 minAddr = addr\r\n         print(\"Winner: \" + maxAddr + \" with \" + str(max) + \" correct answers\")\r\n-        print(\"Loser: \" + minAddr + \" with \" + str(min) + \" correct answers\")\r\n+    \r\n+        if maxAddr == self.addr:\r\n+            self.socket.sendto(\"final-Ganhou o  Jogo!!!\".encode(), (self.addr, self.port))\r\n+        else:\r\n+            self.socket.sendto(\"final-Perdeu o Jogo!!!\".encode(), (self.addr, self.port))\r\n         \r\n         \r\n-        \r\n     \r\n     def run(self):\r\n         self.socket.settimeout(3)\r\n         self.startGame()\r\n"
                },
                {
                    "date": 1655051487564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,14 +216,20 @@\n                 min = self.parent.gameData[addr][\"tempo\"]\r\n                 minAddr = addr\r\n         print(\"Winner: \" + maxAddr + \" with \" + str(max) + \" correct answers\")\r\n     \r\n-        if maxAddr == self.addr:\r\n-            self.socket.sendto(\"final-Ganhou o  Jogo!!!\".encode(), (self.addr, self.port))\r\n-        else:\r\n-            self.socket.sendto(\"final-Perdeu o Jogo!!!\".encode(), (self.addr, self.port))\r\n+        while True:\r\n+            if maxAddr == self.addr:\r\n+                self.socket.sendto(\"final-Ganhou o  Jogo!!!\".encode(), (self.addr, self.port))\r\n+                data, addr = self.socket.recvfrom(self.buffer)\r\n+                if data.decode() == \"final-ack\" and addr[0] == self.addr:\r\n+                    break\r\n+            else:\r\n+                self.socket.sendto(\"final-Perdeu o Jogo!!!\".encode(), (self.addr, self.port))\r\n+                data, addr = self.socket.recvfrom(self.buffer)\r\n+                if data.decode() == \"final-ack\" and addr[0] == self.addr:\r\n+                    break\r\n         \r\n-        \r\n     \r\n     def run(self):\r\n         self.socket.settimeout(3)\r\n         self.startGame()\r\n"
                },
                {
                    "date": 1655051755536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,20 +215,22 @@\n             if float(self.parent.gameData[addr][\"tempo\"]) < float(min):\r\n                 min = self.parent.gameData[addr][\"tempo\"]\r\n                 minAddr = addr\r\n         print(\"Winner: \" + maxAddr + \" with \" + str(max) + \" correct answers\")\r\n-    \r\n-        while True:\r\n-            if maxAddr == self.addr:\r\n-                self.socket.sendto(\"final-Ganhou o  Jogo!!!\".encode(), (self.addr, self.port))\r\n-                data, addr = self.socket.recvfrom(self.buffer)\r\n-                if data.decode() == \"final-ack\" and addr[0] == self.addr:\r\n-                    break\r\n-            else:\r\n-                self.socket.sendto(\"final-Perdeu o Jogo!!!\".encode(), (self.addr, self.port))\r\n-                data, addr = self.socket.recvfrom(self.buffer)\r\n-                if data.decode() == \"final-ack\" and addr[0] == self.addr:\r\n-                    break\r\n+        try:\r\n+            while True:\r\n+                if maxAddr == self.addr:\r\n+                    self.socket.sendto(\"final-Ganhou o  Jogo!!!\".encode(), (self.addr, self.port))\r\n+                    data, addr = self.socket.recvfrom(self.buffer)\r\n+                    if data.decode() == \"final-ack\" and addr[0] == self.addr:\r\n+                        break\r\n+                else:\r\n+                    self.socket.sendto(\"final-Perdeu o Jogo!!!\".encode(), (self.addr, self.port))\r\n+                    data, addr = self.socket.recvfrom(self.buffer)\r\n+                    if data.decode() == \"final-ack\" and addr[0] == self.addr:\r\n+                        break\r\n+        except socket.timeout:\r\n+            print(\"Timeout\")\r\n         \r\n     \r\n     def run(self):\r\n         self.socket.settimeout(3)\r\n"
                },
                {
                    "date": 1655053522014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,8 @@\n             try:\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if data.decode().split('-')[0] == \"results\" and addr[0] == self.addr:\r\n                     res = data.decode()\r\n-                    self.socket.sendto(\"results-ack\".encode(), addr)\r\n                     break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n         with self.parent.lock:\r\n"
                },
                {
                    "date": 1655053709764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,8 +206,9 @@\n         print(\"Final Results: \")\r\n         pprint.pprint(self.parent.gameData)\r\n         max = 0\r\n         min = 1000\r\n+        maxAddr = 0\r\n         for addr in self.parent.gameData:\r\n             if float(self.parent.gameData[addr][\"nCorrectas\"]) > float(max):\r\n                 max = self.parent.gameData[addr][\"nCorrectas\"]\r\n                 maxAddr = addr\r\n"
                },
                {
                    "date": 1655053718854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,8 +207,9 @@\n         pprint.pprint(self.parent.gameData)\r\n         max = 0\r\n         min = 1000\r\n         maxAddr = 0\r\n+        minAddr = 0\r\n         for addr in self.parent.gameData:\r\n             if float(self.parent.gameData[addr][\"nCorrectas\"]) > float(max):\r\n                 max = self.parent.gameData[addr][\"nCorrectas\"]\r\n                 maxAddr = addr\r\n"
                },
                {
                    "date": 1655053808629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,10 +206,10 @@\n         print(\"Final Results: \")\r\n         pprint.pprint(self.parent.gameData)\r\n         max = 0\r\n         min = 1000\r\n-        maxAddr = 0\r\n-        minAddr = 0\r\n+        maxAddr = \"\"\r\n+        minAddr = \"\"\r\n         for addr in self.parent.gameData:\r\n             if float(self.parent.gameData[addr][\"nCorrectas\"]) > float(max):\r\n                 max = self.parent.gameData[addr][\"nCorrectas\"]\r\n                 maxAddr = addr\r\n@@ -227,8 +227,9 @@\n                 else:\r\n                     self.socket.sendto(\"final-Perdeu o Jogo!!!\".encode(), (self.addr, self.port))\r\n                     data, addr = self.socket.recvfrom(self.buffer)\r\n                     if data.decode() == \"final-ack\" and addr[0] == self.addr:\r\n+                        print(\"game over\")\r\n                         break\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n         \r\n"
                },
                {
                    "date": 1655053834797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,8 +135,9 @@\n             thread.start()\r\n         #wait for all the threads to finish\r\n         for thread in self.threadPool:\r\n             thread.join()\r\n+        print(\"all players ended the game\")\r\n             \r\n class ClientGame(threading.Thread):\r\n     def __init__(self, caddr, cport, gameMenu, gameID, parent):\r\n         threading.Thread.__init__(self)\r\n"
                },
                {
                    "date": 1655054222820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n     #hello-hostname-actualAddr    \r\n     def run(self):\r\n         global conClients, nClients\r\n         print(\"À espera de clientes...\")\r\n+        self.socket.setblocking(0)\r\n         while True:\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             msg = data.decode().split('-')\r\n             if msg[0] == \"hello\":\r\n"
                },
                {
                    "date": 1655054231061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,9 @@\n         global conClients, nClients\r\n         print(\"À espera de clientes...\")\r\n         self.socket.setblocking(0)\r\n         while True:\r\n+            print(\"waiting for new clients..\")\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             msg = data.decode().split('-')\r\n             if msg[0] == \"hello\":\r\n                 if self.addClient(msg[1], addr[0], addr[1]):\r\n"
                },
                {
                    "date": 1655054259389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,8 @@\n     #hello-hostname-actualAddr    \r\n     def run(self):\r\n         global conClients, nClients\r\n         print(\"À espera de clientes...\")\r\n-        self.socket.setblocking(0)\r\n         while True:\r\n             print(\"waiting for new clients..\")\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             msg = data.decode().split('-')\r\n"
                },
                {
                    "date": 1655054375655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,9 @@\n         print(\"À espera de jogos....\")\r\n         while True:\r\n             while nClients < self.gameSize:\r\n                 time.sleep(0.1)\r\n+            input(\"wait\")\r\n             print(\"jogo a iniciar...\\n\\n\\n\")\r\n             self.selectClientsForGame()\r\n             gm = GameLobby(self.gameSize, self.rounds, self.gameClients)\r\n             gm.start()\r\n"
                },
                {
                    "date": 1655054478276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,8 @@\n \r\n class GameLobby(threading.Thread):\r\n     def __init__(self, gameSize, rounds, gameClients):\r\n         threading.Thread.__init__(self)\r\n-        self.port = 8080\r\n         self.rounds = rounds\r\n         self.gameSize = gameSize\r\n         self.gameClients = gameClients\r\n         self.gameData = dict()\r\n"
                },
                {
                    "date": 1655054483923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,8 @@\n         self.rounds = rounds\r\n         self.gameSize = gameSize\r\n         self.gameClients = gameClients\r\n         self.gameData = dict()\r\n-        self.buffer = 4096\r\n         self.gameClients = gameClients\r\n         self.threadPool = []\r\n         self.gameData = dict()\r\n         self.lock = threading.Lock()\r\n"
                },
                {
                    "date": 1655054593452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,10 +94,10 @@\n                 time.sleep(0.1)\r\n             input(\"wait\")\r\n             print(\"jogo a iniciar...\\n\\n\\n\")\r\n             self.selectClientsForGame()\r\n-            gm = GameLobby(self.gameSize, self.rounds, self.gameClients)\r\n-            gm.start()\r\n+            #gm = GameLobby(self.gameSize, self.rounds, self.gameClients)\r\n+            #gm.start()\r\n             nClients = 0\r\n \r\n class GameLobby(threading.Thread):\r\n     def __init__(self, gameSize, rounds, gameClients):\r\n"
                },
                {
                    "date": 1655054600709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n         print(\"À espera de jogos....\")\r\n         while True:\r\n             while nClients < self.gameSize:\r\n                 time.sleep(0.1)\r\n-            input(\"wait\")\r\n+            #input(\"wait\")\r\n             print(\"jogo a iniciar...\\n\\n\\n\")\r\n             self.selectClientsForGame()\r\n             #gm = GameLobby(self.gameSize, self.rounds, self.gameClients)\r\n             #gm.start()\r\n"
                },
                {
                    "date": 1655054644412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,10 +94,10 @@\n                 time.sleep(0.1)\r\n             #input(\"wait\")\r\n             print(\"jogo a iniciar...\\n\\n\\n\")\r\n             self.selectClientsForGame()\r\n-            #gm = GameLobby(self.gameSize, self.rounds, self.gameClients)\r\n-            #gm.start()\r\n+            gm = GameLobby(self.gameSize, self.rounds, self.gameClients)\r\n+            gm.start()\r\n             nClients = 0\r\n \r\n class GameLobby(threading.Thread):\r\n     def __init__(self, gameSize, rounds, gameClients):\r\n"
                },
                {
                    "date": 1655054680504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,11 +50,11 @@\n             return 0\r\n     #hello-hostname-actualAddr    \r\n     def run(self):\r\n         global conClients, nClients\r\n-        print(\"À espera de clientes...\")\r\n         while True:\r\n             print(\"waiting for new clients..\")\r\n+            print(nClients)\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             msg = data.decode().split('-')\r\n             if msg[0] == \"hello\":\r\n                 if self.addClient(msg[1], addr[0], addr[1]):\r\n"
                },
                {
                    "date": 1655054855497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \r\n class ClientManager(threading.Thread):\r\n     def __init__(self):\r\n         threading.Thread.__init__(self)\r\n-        self.port = 8081\r\n+        self.port = 8080\r\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         self.buffer = 2048\r\n"
                },
                {
                    "date": 1655055137522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         self.buffer = 2048\r\n-        self.gamePort = 8080\r\n+        self.gamePort = 8081\r\n         self.hostname = socket.gethostname()\r\n \r\n     def addClient(self, hostname, addr, port):\r\n         global conClients, nClients, routingTable\r\n@@ -96,9 +96,8 @@\n             print(\"jogo a iniciar...\\n\\n\\n\")\r\n             self.selectClientsForGame()\r\n             gm = GameLobby(self.gameSize, self.rounds, self.gameClients)\r\n             gm.start()\r\n-            nClients = 0\r\n \r\n class GameLobby(threading.Thread):\r\n     def __init__(self, gameSize, rounds, gameClients):\r\n         threading.Thread.__init__(self)\r\n@@ -235,14 +234,16 @@\n             print(\"Timeout\")\r\n         \r\n     \r\n     def run(self):\r\n+        global nClients\r\n         self.socket.settimeout(3)\r\n         self.startGame()\r\n         self.sendGameMenu()\r\n         self.sendGo()\r\n         self.waitForEnd()\r\n         self.finalResults()\r\n+        nClients-=1\r\n         \r\n                 \r\n def main():\r\n     cm = ClientManager()\r\n"
                },
                {
                    "date": 1655055560583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,9 @@\n             print(\"jogo a iniciar...\\n\\n\\n\")\r\n             self.selectClientsForGame()\r\n             gm = GameLobby(self.gameSize, self.rounds, self.gameClients)\r\n             gm.start()\r\n+            nClients = 0\r\n \r\n class GameLobby(threading.Thread):\r\n     def __init__(self, gameSize, rounds, gameClients):\r\n         threading.Thread.__init__(self)\r\n@@ -134,8 +135,9 @@\n             thread.start()\r\n         #wait for all the threads to finish\r\n         for thread in self.threadPool:\r\n             thread.join()\r\n+        \r\n         print(\"all players ended the game\")\r\n             \r\n class ClientGame(threading.Thread):\r\n     def __init__(self, caddr, cport, gameMenu, gameID, parent):\r\n"
                },
                {
                    "date": 1655055600961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,9 @@\n \r\n class GameLobby(threading.Thread):\r\n     def __init__(self, gameSize, rounds, gameClients):\r\n         threading.Thread.__init__(self)\r\n+        global nClients\r\n         self.rounds = rounds\r\n         self.gameSize = gameSize\r\n         self.gameClients = gameClients\r\n         self.gameData = dict()\r\n@@ -110,8 +111,9 @@\n         self.threadPool = []\r\n         self.gameData = dict()\r\n         self.lock = threading.Lock()\r\n         self.gameDone = 0\r\n+        global nClients -= 1\r\n     \r\n     def updateGameData(self, addr, nCorrectas, tempo):\r\n         self.gameData[addr] = {\r\n             \"nCorrectas\": nCorrectas,\r\n"
                },
                {
                    "date": 1655055608826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,8 @@\n             print(\"jogo a iniciar...\\n\\n\\n\")\r\n             self.selectClientsForGame()\r\n             gm = GameLobby(self.gameSize, self.rounds, self.gameClients)\r\n             gm.start()\r\n-            nClients = 0\r\n \r\n class GameLobby(threading.Thread):\r\n     def __init__(self, gameSize, rounds, gameClients):\r\n         threading.Thread.__init__(self)\r\n@@ -111,9 +110,9 @@\n         self.threadPool = []\r\n         self.gameData = dict()\r\n         self.lock = threading.Lock()\r\n         self.gameDone = 0\r\n-        global nClients -= 1\r\n+        nClients -= 1\r\n     \r\n     def updateGameData(self, addr, nCorrectas, tempo):\r\n         self.gameData[addr] = {\r\n             \"nCorrectas\": nCorrectas,\r\n"
                },
                {
                    "date": 1655055680143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,8 +90,9 @@\n         global nClients\r\n         print(\"À espera de jogos....\")\r\n         while True:\r\n             while nClients < self.gameSize:\r\n+                print(nClients)\r\n                 time.sleep(0.1)\r\n             #input(\"wait\")\r\n             print(\"jogo a iniciar...\\n\\n\\n\")\r\n             self.selectClientsForGame()\r\n"
                },
                {
                    "date": 1655055808656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,8 @@\n \r\n class GameLobby(threading.Thread):\r\n     def __init__(self, gameSize, rounds, gameClients):\r\n         threading.Thread.__init__(self)\r\n-        global nClients\r\n         self.rounds = rounds\r\n         self.gameSize = gameSize\r\n         self.gameClients = gameClients\r\n         self.gameData = dict()\r\n@@ -111,9 +110,8 @@\n         self.threadPool = []\r\n         self.gameData = dict()\r\n         self.lock = threading.Lock()\r\n         self.gameDone = 0\r\n-        nClients -= 1\r\n     \r\n     def updateGameData(self, addr, nCorrectas, tempo):\r\n         self.gameData[addr] = {\r\n             \"nCorrectas\": nCorrectas,\r\n"
                },
                {
                    "date": 1655055817421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,8 +97,9 @@\n             print(\"jogo a iniciar...\\n\\n\\n\")\r\n             self.selectClientsForGame()\r\n             gm = GameLobby(self.gameSize, self.rounds, self.gameClients)\r\n             gm.start()\r\n+            nClients = 0\r\n \r\n class GameLobby(threading.Thread):\r\n     def __init__(self, gameSize, rounds, gameClients):\r\n         threading.Thread.__init__(self)\r\n"
                },
                {
                    "date": 1655055887570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,17 +237,15 @@\n             print(\"Timeout\")\r\n         \r\n     \r\n     def run(self):\r\n-        global nClients\r\n         self.socket.settimeout(3)\r\n         self.startGame()\r\n         self.sendGameMenu()\r\n         self.sendGo()\r\n         self.waitForEnd()\r\n         self.finalResults()\r\n-        nClients-=1\r\n-        \r\n+\r\n                 \r\n def main():\r\n     cm = ClientManager()\r\n     cm.start()\r\n"
                },
                {
                    "date": 1655055977526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,9 @@\n             if conClients[client][\"status\"] == 1:\r\n                 conClients[client][\"status\"] = 2\r\n                 self.gameClients[client] = conClients[client]\r\n         print(\"Selected Clients for game: \")\r\n+        print(self.gameClients)\r\n     \r\n     def run(self):\r\n         global nClients\r\n         print(\"À espera de jogos....\")\r\n"
                },
                {
                    "date": 1655055997106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,8 @@\n         global nClients\r\n         print(\"À espera de jogos....\")\r\n         while True:\r\n             while nClients < self.gameSize:\r\n-                print(nClients)\r\n                 time.sleep(0.1)\r\n             #input(\"wait\")\r\n             print(\"jogo a iniciar...\\n\\n\\n\")\r\n             self.selectClientsForGame()\r\n"
                },
                {
                    "date": 1655056098784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n         print(\"Selected Clients for game: \")\r\n         print(self.gameClients)\r\n     \r\n     def run(self):\r\n-        global nClients\r\n+        global nClients, conClients\r\n         print(\"À espera de jogos....\")\r\n         while True:\r\n             while nClients < self.gameSize:\r\n                 time.sleep(0.1)\r\n"
                },
                {
                    "date": 1655056112353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,8 +92,10 @@\n         print(\"À espera de jogos....\")\r\n         while True:\r\n             while nClients < self.gameSize:\r\n                 time.sleep(0.1)\r\n+            print(\"connClients..\")\r\n+            print(conClients)\r\n             #input(\"wait\")\r\n             print(\"jogo a iniciar...\\n\\n\\n\")\r\n             self.selectClientsForGame()\r\n             gm = GameLobby(self.gameSize, self.rounds, self.gameClients)\r\n"
                },
                {
                    "date": 1655056168672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,8 +99,9 @@\n             print(\"jogo a iniciar...\\n\\n\\n\")\r\n             self.selectClientsForGame()\r\n             gm = GameLobby(self.gameSize, self.rounds, self.gameClients)\r\n             gm.start()\r\n+            self.gameClients = dict()\r\n             nClients = 0\r\n \r\n class GameLobby(threading.Thread):\r\n     def __init__(self, gameSize, rounds, gameClients):\r\n"
                },
                {
                    "date": 1655056650687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n     def removeClient(self, hostname):\r\n         global conClients, nClients, routingTable\r\n         if hostname in conClients.keys():\r\n             conClients.pop(hostname)\r\n-            routingTable.pop(hostname)\r\n+            #routingTable.pop(hostname)\r\n             nClients -= 1\r\n             print(\"Client \" + hostname + \" removed\")\r\n             return 1\r\n         else:\r\n"
                },
                {
                    "date": 1655056692647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,8 @@\n         global conClients, nClients, routingTable\r\n         if hostname in conClients.keys():\r\n             conClients.pop(hostname)\r\n             #routingTable.pop(hostname)\r\n-            nClients -= 1\r\n             print(\"Client \" + hostname + \" removed\")\r\n             return 1\r\n         else:\r\n             print(\"Client \" + hostname + \" does not exist\")\r\n"
                }
            ],
            "date": 1655051206402,
            "name": "Commit-0",
            "content": "import threading, random, pprint, time, socket, gameGenerator, re\r\n\r\n\r\n\r\n#Variaveis Globais\r\nnClients = 0 #numero de clientes online\r\nconClients = dict() #dicionario de clientes\r\nroutingTable = dict() #dicionario de rotas\r\ngameData = dict() #dicionario de dados do jogo\r\n\r\n\r\nclass ClientManager(threading.Thread):\r\n    def __init__(self):\r\n        threading.Thread.__init__(self)\r\n        self.port = 8081\r\n        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n        self.socket.bind(('', self.port))\r\n        self.buffer = 2048\r\n        self.gamePort = 8080\r\n        self.hostname = socket.gethostname()\r\n\r\n    def addClient(self, hostname, addr, port):\r\n        global conClients, nClients, routingTable\r\n        if hostname not in conClients.keys():\r\n            self.gamePort += 1\r\n            conClients[hostname] = {\r\n                \"addr\": addr,\r\n                \"status\": 1, #0 = not connected, 1 = connected, 2 = ready, 3 = ingame\r\n                \"port\" : self.gamePort\r\n            }\r\n            routingTable[addr] = addr\r\n            nClients += 1\r\n            print(\"Client \" + hostname + \" added\")\r\n            return 1\r\n        else:\r\n            print(\"Client \" + hostname + \" already exists\")\r\n            return 0\r\n\r\n    def removeClient(self, hostname):\r\n        global conClients, nClients, routingTable\r\n        if hostname in conClients.keys():\r\n            conClients.pop(hostname)\r\n            routingTable.pop(hostname)\r\n            nClients -= 1\r\n            print(\"Client \" + hostname + \" removed\")\r\n            return 1\r\n        else:\r\n            print(\"Client \" + hostname + \" does not exist\")\r\n            return 0\r\n    #hello-hostname-actualAddr    \r\n    def run(self):\r\n        global conClients, nClients\r\n        print(\"À espera de clientes...\")\r\n        while True:\r\n            data, addr = self.socket.recvfrom(self.buffer)\r\n            msg = data.decode().split('-')\r\n            if msg[0] == \"hello\":\r\n                if self.addClient(msg[1], addr[0], addr[1]):\r\n                    self.socket.sendto((\"hello-ack-\" + str(self.gamePort)).encode(), addr)\r\n                    print(\"hello ack sent to \" + msg[1])\r\n                else:\r\n                    self.socket.sendto(\"You are already connected\".encode(), addr)\r\n            elif msg[0] == \"disconnect\":\r\n                if self.removeClient(msg[1]):\r\n                    self.socket.sendto(\"disconnect-ack\".encode(), addr)\r\n                    print(\"disconnect ack sent to \" + msg[1])\r\n                else:\r\n                    self.socket.sendto(\"You are not connected\".encode(), addr)\r\n\r\n\r\n\r\nclass GameManager():\r\n    def __init__(self, rounds, gameSize):\r\n        self.rounds = rounds #Numero de rondas associadas a cada jogo\r\n        self.gameSize = gameSize #Numero de jogadores por jogo\r\n        self.gameClients = dict()\r\n        self.run()\r\n        \r\n    def selectClientsForGame(self):\r\n        global conClients\r\n        for client in conClients:\r\n            if conClients[client][\"status\"] == 1:\r\n                conClients[client][\"status\"] = 2\r\n                self.gameClients[client] = conClients[client]\r\n        print(\"Selected Clients for game: \")\r\n    \r\n    def run(self):\r\n        global nClients\r\n        print(\"À espera de jogos....\")\r\n        while True:\r\n            while nClients < self.gameSize:\r\n                time.sleep(0.1)\r\n            print(\"jogo a iniciar...\\n\\n\\n\")\r\n            self.selectClientsForGame()\r\n            gm = GameLobby(self.gameSize, self.rounds, self.gameClients)\r\n            gm.start()\r\n            nClients = 0\r\n\r\nclass GameLobby(threading.Thread):\r\n    def __init__(self, gameSize, rounds, gameClients):\r\n        threading.Thread.__init__(self)\r\n        self.port = 8080\r\n        self.rounds = rounds\r\n        self.gameSize = gameSize\r\n        self.gameClients = gameClients\r\n        self.gameData = dict()\r\n        self.buffer = 4096\r\n        self.gameClients = gameClients\r\n        self.threadPool = []\r\n        self.gameData = dict()\r\n        self.lock = threading.Lock()\r\n        self.gameDone = 0\r\n    \r\n    def updateGameData(self, addr, nCorrectas, tempo):\r\n        self.gameData[addr] = {\r\n            \"nCorrectas\": nCorrectas,\r\n            \"tempo\": tempo\r\n        }\r\n        self.gameDone += 1\r\n    \r\n    def run(self):\r\n        global gameData\r\n        gg = gameGenerator.gameGenerator(self.rounds)\r\n        gameMenu = gg.getOptionsForSongs()\r\n        pprint.pprint(self.gameClients)\r\n        gameID = random.randint(0, 10000)\r\n        gameData[gameID] = dict()\r\n        for client in self.gameClients:\r\n            print(\"startedThread\")\r\n            t = ClientGame(self.gameClients[client][\"addr\"], self.gameClients[client][\"port\"], gameMenu, gameID, self)\r\n            self.threadPool.append(t)\r\n        #start all the threads\r\n        for thread in self.threadPool:\r\n            thread.start()\r\n        #wait for all the threads to finish\r\n        for thread in self.threadPool:\r\n            thread.join()\r\n            \r\nclass ClientGame(threading.Thread):\r\n    def __init__(self, caddr, cport, gameMenu, gameID, parent):\r\n        threading.Thread.__init__(self)\r\n        self.addr = caddr\r\n        self.port = cport\r\n        self.gameMenu = gameMenu + \"-end\"\r\n        self.buffer = 4096\r\n        self.gameID = gameID\r\n        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n        self.socket.bind(('', self.port))\r\n        self.parent = parent\r\n        \r\n        \r\n    def startGame(self):\r\n        while True:\r\n            print(\"trying to send startGame to \" + self.addr)\r\n            try:\r\n                msg = \"gameStart\"\r\n                self.socket.sendto(msg.encode(), (self.addr, self.port))\r\n                data, addr = self.socket.recvfrom(self.buffer)\r\n                if data.decode() == \"gameStart-ack\" and addr[0] == self.addr:\r\n                    print(\"gameStart-ack received\")\r\n                    break\r\n            except socket.timeout:\r\n                print(\"timeout\")\r\n            \r\n    def sendGameMenu(self):\r\n        while True:\r\n            print(\"trying to send gameMenu to \" + self.addr)\r\n            try:\r\n                self.socket.sendto(self.gameMenu.encode(), (self.addr, self.port))\r\n                data, addr = self.socket.recvfrom(self.buffer)\r\n                if data.decode() == \"gameMenu-ack\" and addr[0] == self.addr:\r\n                    print(\"gameMenu-ack received\")\r\n                    break\r\n            except socket.timeout:\r\n                print(\"Timeout\")\r\n    \r\n    def sendGo(self):\r\n        while True:\r\n            try:\r\n                msg = \"go\"\r\n                self.socket.sendto(msg.encode(), (self.addr, self.port))\r\n                data, addr = self.socket.recvfrom(self.buffer)\r\n                if data.decode() == \"go-ack\" and addr[0] == self.addr:\r\n                    print(\"go-ack received\")\r\n                    break\r\n            except socket.timeout:\r\n                print(\"Timeout\")\r\n    #results-r<id>-@tempo#escolha-r<id>-@tempo#escolha-\r\n    def waitForEnd(self):\r\n        while True:\r\n            try:\r\n                data, addr = self.socket.recvfrom(self.buffer)\r\n                if data.decode().split('-')[0] == \"results\" and addr[0] == self.addr:\r\n                    res = data.decode()\r\n                    self.socket.sendto(\"results-ack\".encode(), addr)\r\n                    break\r\n            except socket.timeout:\r\n                print(\"Timeout\")\r\n        with self.parent.lock:\r\n            self.parent.updateGameData(self.addr, res.split('-')[1], res.split('-')[2])\r\n    \r\n    def finalResults(self):\r\n        while self.parent.gameDone < self.parent.gameSize:\r\n            time.sleep(0.1)\r\n        print(\"Final Results: \")\r\n        pprint.pprint(self.parent.gameData)\r\n        \"\"\"\r\n        with the following structure of self.parent.gameData:\r\n        {'addr':{'nCorrectas': nCorrectas, 'tempo': tempo},\r\n            'addr':{'nCorrectas': nCorrectas, 'tempo': tempo},\r\n            }\r\n        get the addr with highest nCorrectas and lowest tempo\r\n        \"\"\"\r\n        max = 0\r\n        min = 100\r\n        for addr in self.parent.gameData:\r\n            if self.parent.gameData[addr][\"nCorrectas\"] > max:\r\n                max = self.parent.gameData[addr][\"nCorrectas\"]\r\n                maxAddr = addr\r\n            if self.parent.gameData[addr][\"tempo\"] < min:\r\n                min = self.parent.gameData[addr][\"tempo\"]\r\n                minAddr = addr\r\n        print(\"Winner: \" + maxAddr + \" with \" + str(max) + \" correct answers\")\r\n        print(\"Loser: \" + minAddr + \" with \" + str(min) + \" correct answers\")\r\n        \r\n        \r\n        \r\n    \r\n    def run(self):\r\n        self.socket.settimeout(3)\r\n        self.startGame()\r\n        self.sendGameMenu()\r\n        self.sendGo()\r\n        self.waitForEnd()\r\n        self.finalResults()\r\n        \r\n                \r\ndef main():\r\n    cm = ClientManager()\r\n    cm.start()\r\n    gm = GameManager(3, 2)\r\n    \r\nif __name__ == \"__main__\":\r\n    main()"
        }
    ]
}