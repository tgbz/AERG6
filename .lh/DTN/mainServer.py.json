{
    "sourceFile": "DTN/mainServer.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 83,
            "patches": [
                {
                    "date": 1654527527417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1654527877163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,6 +31,30 @@\n                 \"status\": 1, #0 = not connected, 1 = connected, 2 = ready, 3 = ingame\r\n             }\r\n             nClients += 1\r\n             print(\"Client \" + hostname + \" added\")\r\n+            return 1\r\n         else:\r\n\\ No newline at end of file\n-            print(\"Client \" + hostname + \" already exists\")\n+            print(\"Client \" + hostname + \" already exists\")\r\n+            return 0\r\n+        \r\n+    def removeClient(self, hostname):\r\n+        if hostname in connectedClients.keys():\r\n+            connectedClients.pop(hostname)\r\n+            print(\"Client \" + hostname + \" removed\")\r\n+            return 1\r\n+        else:\r\n+            print(\"Client \" + hostname + \" not found\")\r\n+            return 0\r\n+    \r\n+    def run(self):\r\n+        self.sock.bind(('', self.port))\r\n+        \r\n+        while True:\r\n+            data, addr = self.socket.recvfrom(self.buffer)\r\n+            if data.split('-')[0] == 'hello':\r\n+                hostname = data.split('-')[1]\r\n+                if self.addClient(hostname, addr[0], addr[1]):\r\n+                    self.socket.sendto(b'hello-ack-' + self.mCastAddr, addr)\r\n+                else:\r\n+                    self.socket.sendto(b'you are already in the group' + hostname.encode(), addr)\r\n+            elif data.split('-')[0] == \"disconnect\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654527930323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n         self.gam\r\n     \r\n     \r\n \r\n-class ethHandler(threading.Thread):\r\n+class clientsHandler(threading.Thread):\r\n     def __init__(self, rounds, gameSize):\r\n         self.clients = dict()\r\n         self.port = 8080 # porta de autenticação\r\n         self.sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n@@ -56,5 +56,11 @@\n                 if self.addClient(hostname, addr[0], addr[1]):\r\n                     self.socket.sendto(b'hello-ack-' + self.mCastAddr, addr)\r\n                 else:\r\n                     self.socket.sendto(b'you are already in the group' + hostname.encode(), addr)\r\n-            elif data.split('-')[0] == \"disconnect\"\n\\ No newline at end of file\n+            elif data.split('-')[0] == \"disconnect\":\r\n+                hostname = data.split('-')[1]\r\n+                if self.removeClient(hostname):\r\n+                    self.socket.sendto(b'disconnect-ack-' + self.mCastAddr, addr)\r\n+                else:\r\n+                    self.socket.sendto(b'you are not in the group' + hostname.encode(), addr)\r\n+        \n\\ No newline at end of file\n"
                },
                {
                    "date": 1654527998481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import threading, json, socket\r\n+import threading, json, socket, time\r\n \r\n \r\n connectedClients = dict()\r\n remoteConnectedClients = dict()\r\n@@ -8,10 +8,13 @@\n class mainServer():\r\n     def __init__(self, rounds, gameSize):\r\n         self.rounds = rounds # Numero de rondas associadas a cada jogo\r\n         self.gameSize = gameSize # Numero de jogadores por jogo\r\n-        self.gam\r\n     \r\n+    def startGame(self):\r\n+        while nClients < self.gameSize:\r\n+            time.sleep(0.5)\r\n+        \r\n     \r\n \r\n class clientsHandler(threading.Thread):\r\n     def __init__(self, rounds, gameSize):\r\n"
                },
                {
                    "date": 1654528202987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import threading, json, socket, time\r\n+import threading, json, socket, time, gameGenerator\r\n \r\n \r\n connectedClients = dict()\r\n remoteConnectedClients = dict()\r\n@@ -12,9 +12,12 @@\n     \r\n     def startGame(self):\r\n         while nClients < self.gameSize:\r\n             time.sleep(0.5)\r\n+        gG = gameGenerator.gameGenerator(self.rounds)\r\n+        correctSongs, songOptions = gG.chooseSongs()\r\n         \r\n+        \r\n     \r\n \r\n class clientsHandler(threading.Thread):\r\n     def __init__(self, rounds, gameSize):\r\n"
                },
                {
                    "date": 1654528364965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,16 @@\n \r\n connectedClients = dict()\r\n remoteConnectedClients = dict()\r\n nClients = 0\r\n+clientsPort = 8080\r\n+s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\r\n+s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n+buff = 2048\r\n+s.bind(('', clientsPort))\r\n \r\n+\r\n+\r\n class mainServer():\r\n     def __init__(self, rounds, gameSize):\r\n         self.rounds = rounds # Numero de rondas associadas a cada jogo\r\n         self.gameSize = gameSize # Numero de jogadores por jogo\r\n@@ -16,19 +23,16 @@\n         gG = gameGenerator.gameGenerator(self.rounds)\r\n         correctSongs, songOptions = gG.chooseSongs()\r\n         \r\n         \r\n+        \r\n     \r\n \r\n class clientsHandler(threading.Thread):\r\n     def __init__(self, rounds, gameSize):\r\n-        self.clients = dict()\r\n-        self.port = 8080 # porta de autenticação\r\n-        self.sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n-        self.sock.bind(('', 0))\r\n-        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-        self.buffer = 2048\r\n-    \r\n+        #init thread\r\n+        threading.Thread.__init__(self)\r\n+        \r\n     def addClient(self, hostname, addr, port):\r\n         global connectedClients, nClients\r\n         if hostname not in connectedClients.keys():\r\n             connectedClients[hostname] = {\r\n@@ -51,22 +55,4 @@\n         else:\r\n             print(\"Client \" + hostname + \" not found\")\r\n             return 0\r\n     \r\n-    def run(self):\r\n-        self.sock.bind(('', self.port))\r\n-        \r\n-        while True:\r\n-            data, addr = self.socket.recvfrom(self.buffer)\r\n-            if data.split('-')[0] == 'hello':\r\n-                hostname = data.split('-')[1]\r\n-                if self.addClient(hostname, addr[0], addr[1]):\r\n-                    self.socket.sendto(b'hello-ack-' + self.mCastAddr, addr)\r\n-                else:\r\n-                    self.socket.sendto(b'you are already in the group' + hostname.encode(), addr)\r\n-            elif data.split('-')[0] == \"disconnect\":\r\n-                hostname = data.split('-')[1]\r\n-                if self.removeClient(hostname):\r\n-                    self.socket.sendto(b'disconnect-ack-' + self.mCastAddr, addr)\r\n-                else:\r\n-                    self.socket.sendto(b'you are not in the group' + hostname.encode(), addr)\r\n-        \n\\ No newline at end of file\n"
                },
                {
                    "date": 1654528469607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,5 +54,18 @@\n             return 1\r\n         else:\r\n             print(\"Client \" + hostname + \" not found\")\r\n             return 0\r\n-    \r\n+    def run(self):\r\n+        global connectedClients, nClients\r\n+        while True:\r\n+            data, addr = s.recvfrom(buff)\r\n+            msg = data.decode().split('-')\r\n+\r\n+            if msg[0] == 'hello':\r\n+                hostname = msg[1]\r\n+                if self.addClient(hostname, addr[0], addr[1]) == 1:\r\n+                    s.sendto(b'hello-ack-' + self.mCastAddr, addr)\r\n+            elif msg[0] == 'disconnect':\r\n+                hostname = msg[1]\r\n+                if self.removeClient(hostname) == 1:\r\n+                    s.sendto(b'disconnect-ack-' + self.mCastAddr, addr)\r\n"
                },
                {
                    "date": 1654528546498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,21 +11,22 @@\n s.bind(('', clientsPort))\r\n \r\n \r\n \r\n-class mainServer():\r\n+class gameServer(threading.Thread):\r\n     def __init__(self, rounds, gameSize):\r\n+        threading.Thread.__init__(self)\r\n         self.rounds = rounds # Numero de rondas associadas a cada jogo\r\n         self.gameSize = gameSize # Numero de jogadores por jogo\r\n     \r\n     def startGame(self):\r\n         while nClients < self.gameSize:\r\n             time.sleep(0.5)\r\n         gG = gameGenerator.gameGenerator(self.rounds)\r\n         correctSongs, songOptions = gG.chooseSongs()\r\n+\r\n+\r\n         \r\n-        \r\n-        \r\n     \r\n \r\n class clientsHandler(threading.Thread):\r\n     def __init__(self, rounds, gameSize):\r\n"
                },
                {
                    "date": 1654528696888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n connectedClients = dict()\r\n remoteConnectedClients = dict()\r\n nClients = 0\r\n clientsPort = 8080\r\n+gamePort = 8081\r\n s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\r\n s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n buff = 2048\r\n s.bind(('', clientsPort))\r\n@@ -16,14 +17,27 @@\n     def __init__(self, rounds, gameSize):\r\n         threading.Thread.__init__(self)\r\n         self.rounds = rounds # Numero de rondas associadas a cada jogo\r\n         self.gameSize = gameSize # Numero de jogadores por jogo\r\n+        self.gameClients = dict()|\r\n+    def selectClientsForGame(self):\r\n+        global connectedClients\r\n+        #go over connectedClients and random clients for game who have the status = 1, change status to 2\r\n+        #and add them to the game\r\n+        for client in connectedClients:\r\n+            if connectedClients[client][\"status\"] == 1:\r\n+                connectedClients[client][\"status\"] = 2\r\n+                self.gameClients[client] = connectedClients[client]\r\n+        \r\n     \r\n-    def startGame(self):\r\n+    def run(self):\r\n         while nClients < self.gameSize:\r\n             time.sleep(0.5)\r\n+        \r\n+        self.selectClientsForGame()    \r\n         gG = gameGenerator.gameGenerator(self.rounds)\r\n         correctSongs, songOptions = gG.chooseSongs()\r\n+        \r\n \r\n \r\n         \r\n     \r\n"
                },
                {
                    "date": 1654528844574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,14 @@\n         for client in connectedClients:\r\n             if connectedClients[client][\"status\"] == 1:\r\n                 connectedClients[client][\"status\"] = 2\r\n                 self.gameClients[client] = connectedClients[client]\r\n-        \r\n+\r\n+    def gameMessageHandler(self, obj):\r\n+        global gamePort\r\n+        #for each client in self.gameClients, send the obj passed as argument\r\n+        for client in self.gameClients:\r\n+            s.sendto(obj, (self.gameClients[client][\"addr\"], gamePort))\r\n     \r\n     def run(self):\r\n         while nClients < self.gameSize:\r\n             time.sleep(0.5)\r\n@@ -38,9 +43,9 @@\n         correctSongs, songOptions = gG.chooseSongs()\r\n         \r\n \r\n \r\n-        \r\n+\r\n     \r\n \r\n class clientsHandler(threading.Thread):\r\n     def __init__(self, rounds, gameSize):\r\n"
                },
                {
                    "date": 1654529973113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,11 @@\n     def __init__(self, rounds, gameSize):\r\n         threading.Thread.__init__(self)\r\n         self.rounds = rounds # Numero de rondas associadas a cada jogo\r\n         self.gameSize = gameSize # Numero de jogadores por jogo\r\n-        self.gameClients = dict()|\r\n+        self.gameClients = dict()\r\n+        self.clientsAnswers = dict()\r\n+        self.gameSolutions = dict()\r\n     def selectClientsForGame(self):\r\n         global connectedClients\r\n         #go over connectedClients and random clients for game who have the status = 1, change status to 2\r\n         #and add them to the game\r\n@@ -32,16 +34,31 @@\n         global gamePort\r\n         #for each client in self.gameClients, send the obj passed as argument\r\n         for client in self.gameClients:\r\n             s.sendto(obj, (self.gameClients[client][\"addr\"], gamePort))\r\n+            #wait for the ack from the client\r\n+            data, addr = s.recvfrom(buff)\r\n+            if data.decode().split[0] == \"ack\" and data.decode().split[1] == str(client):\r\n+                print(\"Ack received from \" + client)\r\n     \r\n+    def waitForAnswer(self):\r\n+        \"\"\"\r\n+        Wait for the answers for each client\r\n+        \"\"\"\r\n+\r\n+            \r\n+    \r\n     def run(self):\r\n         while nClients < self.gameSize:\r\n             time.sleep(0.5)\r\n         \r\n         self.selectClientsForGame()    \r\n         gG = gameGenerator.gameGenerator(self.rounds)\r\n         correctSongs, songOptions = gG.chooseSongs()\r\n+        self.gameSolutions[correctSongs] = correctSongs\r\n+        self.gameMessageHandler(\"gameStart\")\r\n+        self.gameMessageHandler(json.dumps(correctSongs))\r\n+        self.gameMessageHandler(json.dumps(songOptions))\r\n         \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1654530776465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,12 +41,47 @@\n                 print(\"Ack received from \" + client)\r\n     \r\n     def waitForAnswer(self):\r\n         \"\"\"\r\n-        Wait for the answers for each client\r\n+        Wait for the answers for each client on self.gameClients , the answer is a JSON object with the following structure:\r\n+            {\r\n+                \"hostname\" : { \"round\" :{\r\n+                                        \"answer\" : \"answer\",\r\n+                                        \"time\" : \"time\"\r\n+                                        },\r\n+                                \"round\" : {...},\r\n+                }\r\n+                }\r\n+            }\r\n         \"\"\"\r\n-\r\n+        global gamePort\r\n+        for client in self.gameClients:\r\n+            data, addr = s.recvfrom(buff)\r\n+            self.clientsAnswers[client] = json.loads(data.decode().split[1])\r\n+            print(\"Answer received from \" + client)\r\n+            s.sendto(\"ack\" + str(client), (self.gameClients[client][\"addr\"], gamePort))\r\n+        \r\n+    def getWinner(self):\r\n+        \"\"\"\r\n+        Return the winner of the game, comparing the answers of each client with the correct solution, and return the client with the highest score which is correspondent to the lowest time\r\n+        \"\"\"        \r\n+        \r\n+        winner = None\r\n+        winnerScore = 0\r\n+        winnerTime = 0\r\n+        for client in self.clientsAnswers:\r\n+            score = 0\r\n+            for round in self.clientsAnswers[client]:\r\n+                if self.clientsAnswers[client][round][\"answer\"] == self.gameSolutions[round]:\r\n+                    score += 1\r\n+                    time = self.clientsAnswers[client][round][\"time\"]\r\n+            if score > winnerScore and time < winnerTime:\r\n+                winner = client\r\n+                winnerScore = score\r\n+                winnerTime = time\r\n+        return winner\r\n             \r\n+            \r\n     \r\n     def run(self):\r\n         while nClients < self.gameSize:\r\n             time.sleep(0.5)\r\n"
                },
                {
                    "date": 1654530783422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,8 @@\n     def getWinner(self):\r\n         \"\"\"\r\n         Return the winner of the game, comparing the answers of each client with the correct solution, and return the client with the highest score which is correspondent to the lowest time\r\n         \"\"\"        \r\n-        \r\n         winner = None\r\n         winnerScore = 0\r\n         winnerTime = 0\r\n         for client in self.clientsAnswers:\r\n@@ -78,10 +77,8 @@\n                 winner = client\r\n                 winnerScore = score\r\n                 winnerTime = time\r\n         return winner\r\n-            \r\n-            \r\n     \r\n     def run(self):\r\n         while nClients < self.gameSize:\r\n             time.sleep(0.5)\r\n"
                },
                {
                    "date": 1654530943658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,8 +78,22 @@\n                 winnerScore = score\r\n                 winnerTime = time\r\n         return winner\r\n     \r\n+    def endGame(self):\r\n+        \"\"\"\r\n+        Send the results to each client, if the client won, send the score and \"Ganhaste o jogo\" message. If the client did not won, send the score and \"Perdeste o jogo\" message.\r\n+        \"\"\"\r\n+        winner = self.getWinner()\r\n+        for client in self.gameClients:\r\n+            if client == winner:\r\n+                s.sendto(\"Ganhaste o jogo\" + str(self.clientsAnswers[client][\"score\"]), (self.gameClients[client][\"addr\"], gamePort))\r\n+            else:\r\n+                s.sendto(\"Perdeste o jogo\" + str(self.clientsAnswers[client][\"score\"]), (self.gameClients[client][\"addr\"], gamePort))\r\n+        self.gameClients.clear()\r\n+        self.clientsAnswers.clear()\r\n+        self.gameSolutions.clear()\r\n+    \r\n     def run(self):\r\n         while nClients < self.gameSize:\r\n             time.sleep(0.5)\r\n         \r\n"
                },
                {
                    "date": 1654532259402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n \r\n     \r\n \r\n class clientsHandler(threading.Thread):\r\n-    def __init__(self, rounds, gameSize):\r\n+    def __init__(self):\r\n         #init thread\r\n         threading.Thread.__init__(self)\r\n         \r\n     def addClient(self, hostname, addr, port):\r\n@@ -151,4 +151,13 @@\n             elif msg[0] == 'disconnect':\r\n                 hostname = msg[1]\r\n                 if self.removeClient(hostname) == 1:\r\n                     s.sendto(b'disconnect-ack-' + self.mCastAddr, addr)\r\n+\r\n+def main():\r\n+    global gamePort, clientsPort\r\n+    gameServer = gameServer(3, 2)\r\n+    clientsHandler = clientsHandler(rounds, gameSize)\r\n+    gameServer.start()\r\n+    clientsHandler.start()\r\n+    gameServer.join()\r\n+    clientsHandler.join()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654532265969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n \r\n def main():\r\n     global gamePort, clientsPort\r\n     gameServer = gameServer(3, 2)\r\n-    clientsHandler = clientsHandler(rounds, gameSize)\r\n+    clientsHandler = clientsHandler()\r\n     gameServer.start()\r\n     clientsHandler.start()\r\n     gameServer.join()\r\n     clientsHandler.join()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654532300328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,5 +159,8 @@\n     clientsHandler = clientsHandler()\r\n     gameServer.start()\r\n     clientsHandler.start()\r\n     gameServer.join()\r\n-    clientsHandler.join()\n\\ No newline at end of file\n+    clientsHandler.join()\r\n+\r\n+if __name__ == \"__main__\":\r\n+    main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654532330764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,13 +154,13 @@\n                     s.sendto(b'disconnect-ack-' + self.mCastAddr, addr)\r\n \r\n def main():\r\n     global gamePort, clientsPort\r\n-    gameServer = gameServer(3, 2)\r\n+    gs = gameServer(3, 2)\r\n     clientsHandler = clientsHandler()\r\n-    gameServer.start()\r\n+    gs.start()\r\n     clientsHandler.start()\r\n-    gameServer.join()\r\n+    gs.join()\r\n     clientsHandler.join()\r\n \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654532344450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,12 +155,12 @@\n \r\n def main():\r\n     global gamePort, clientsPort\r\n     gs = gameServer(3, 2)\r\n-    clientsHandler = clientsHandler()\r\n+    ch = clientsHandler()\r\n     gs.start()\r\n-    clientsHandler.start()\r\n+    ch.start()\r\n     gs.join()\r\n-    clientsHandler.join()\r\n+    ch.join()\r\n \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654532635800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,8 +139,9 @@\n             print(\"Client \" + hostname + \" not found\")\r\n             return 0\r\n     def run(self):\r\n         global connectedClients, nClients\r\n+        print(\"À espera de clientes...\")\r\n         while True:\r\n             data, addr = s.recvfrom(buff)\r\n             msg = data.decode().split('-')\r\n \r\n"
                },
                {
                    "date": 1654532661556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,10 @@\n         self.gameSolutions.clear()\r\n     \r\n     def run(self):\r\n         while nClients < self.gameSize:\r\n-            time.sleep(0.5)\r\n+            print(\"game not ready...\")\r\n+            time.sleep(1)\r\n         \r\n         self.selectClientsForGame()    \r\n         gG = gameGenerator.gameGenerator(self.rounds)\r\n         correctSongs, songOptions = gG.chooseSongs()\r\n"
                },
                {
                    "date": 1654554760523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,12 @@\n class clientsHandler(threading.Thread):\r\n     def __init__(self):\r\n         #init thread\r\n         threading.Thread.__init__(self)\r\n-        \r\n+        self.port = 8081\r\n+        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,1)\r\n+        self.socket.bind(('', clientsPort))\r\n     def addClient(self, hostname, addr, port):\r\n         global connectedClients, nClients\r\n         if hostname not in connectedClients.keys():\r\n             connectedClients[hostname] = {\r\n"
                },
                {
                    "date": 1654554766779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,11 @@\n         threading.Thread.__init__(self)\r\n         self.port = 8081\r\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,1)\r\n-        self.socket.bind(('', clientsPort))\r\n+        self.socket.bind(('', self.port))\r\n+        \r\n+        \r\n     def addClient(self, hostname, addr, port):\r\n         global connectedClients, nClients\r\n         if hostname not in connectedClients.keys():\r\n             connectedClients[hostname] = {\r\n"
                },
                {
                    "date": 1654554924554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,16 +112,14 @@\n     \r\n \r\n class clientsHandler(threading.Thread):\r\n     def __init__(self):\r\n-        #init thread\r\n         threading.Thread.__init__(self)\r\n         self.port = 8081\r\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,1)\r\n         self.socket.bind(('', self.port))\r\n         \r\n-        \r\n     def addClient(self, hostname, addr, port):\r\n         global connectedClients, nClients\r\n         if hostname not in connectedClients.keys():\r\n             connectedClients[hostname] = {\r\n@@ -153,21 +151,17 @@\n \r\n             if msg[0] == 'hello':\r\n                 hostname = msg[1]\r\n                 if self.addClient(hostname, addr[0], addr[1]) == 1:\r\n-                    s.sendto(b'hello-ack-' + self.mCastAddr, addr)\r\n+                    self.socket.sendto(b'hello-ack-' + self.mCastAddr, addr)\r\n             elif msg[0] == 'disconnect':\r\n                 hostname = msg[1]\r\n                 if self.removeClient(hostname) == 1:\r\n-                    s.sendto(b'disconnect-ack-' + self.mCastAddr, addr)\r\n+                    self.socket.sendto(b'disconnect-ack-' + self.mCastAddr, addr)\r\n \r\n def main():\r\n     global gamePort, clientsPort\r\n-    gs = gameServer(3, 2)\r\n     ch = clientsHandler()\r\n-    gs.start()\r\n-    ch.start()\r\n-    gs.join()\r\n-    ch.join()\r\n+    \r\n \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654554961482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,8 +160,10 @@\n \r\n def main():\r\n     global gamePort, clientsPort\r\n     ch = clientsHandler()\r\n+    gs = gameServer(3,3)\r\n+    ch.start()\r\n     \r\n \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654554968689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,8 +162,9 @@\n     global gamePort, clientsPort\r\n     ch = clientsHandler()\r\n     gs = gameServer(3,3)\r\n     ch.start()\r\n+    gs.start()\r\n     \r\n \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654555296227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,15 @@\n         threading.Thread.__init__(self)\r\n         self.rounds = rounds # Numero de rondas associadas a cada jogo\r\n         self.gameSize = gameSize # Numero de jogadores por jogo\r\n         self.gameClients = dict()\r\n+        self.port = 8080\r\n         self.clientsAnswers = dict()\r\n         self.gameSolutions = dict()\r\n+        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n+        self.socket = socket.socket(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n+        self.socket.bind(('', self.port))\r\n+        \r\n     def selectClientsForGame(self):\r\n         global connectedClients\r\n         #go over connectedClients and random clients for game who have the status = 1, change status to 2\r\n         #and add them to the game\r\n"
                },
                {
                    "date": 1654555315514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,11 +38,11 @@\n     def gameMessageHandler(self, obj):\r\n         global gamePort\r\n         #for each client in self.gameClients, send the obj passed as argument\r\n         for client in self.gameClients:\r\n-            s.sendto(obj, (self.gameClients[client][\"addr\"], gamePort))\r\n+            self.socket.sendto(obj, (self.gameClients[client][\"addr\"], gamePort))\r\n             #wait for the ack from the client\r\n-            data, addr = s.recvfrom(buff)\r\n+            data, addr = self.socket.recvfrom(buff)\r\n             if data.decode().split[0] == \"ack\" and data.decode().split[1] == str(client):\r\n                 print(\"Ack received from \" + client)\r\n     \r\n     def waitForAnswer(self):\r\n"
                },
                {
                    "date": 1654555343372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,8 +122,9 @@\n         self.port = 8081\r\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,1)\r\n         self.socket.bind(('', self.port))\r\n+        self.buffer = 2048\r\n         \r\n     def addClient(self, hostname, addr, port):\r\n         global connectedClients, nClients\r\n         if hostname not in connectedClients.keys():\r\n@@ -150,9 +151,9 @@\n     def run(self):\r\n         global connectedClients, nClients\r\n         print(\"À espera de clientes...\")\r\n         while True:\r\n-            data, addr = s.recvfrom(buff)\r\n+            data, addr = self.socket.recvfrom(buff)\r\n             msg = data.decode().split('-')\r\n \r\n             if msg[0] == 'hello':\r\n                 hostname = msg[1]\r\n"
                },
                {
                    "date": 1654555371909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,17 +3,12 @@\n \r\n connectedClients = dict()\r\n remoteConnectedClients = dict()\r\n nClients = 0\r\n-clientsPort = 8080\r\n-gamePort = 8081\r\n-s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\r\n-s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-buff = 2048\r\n-s.bind(('', clientsPort))\r\n \r\n \r\n \r\n+\r\n class gameServer(threading.Thread):\r\n     def __init__(self, rounds, gameSize):\r\n         threading.Thread.__init__(self)\r\n         self.rounds = rounds # Numero de rondas associadas a cada jogo\r\n@@ -40,9 +35,9 @@\n         #for each client in self.gameClients, send the obj passed as argument\r\n         for client in self.gameClients:\r\n             self.socket.sendto(obj, (self.gameClients[client][\"addr\"], gamePort))\r\n             #wait for the ack from the client\r\n-            data, addr = self.socket.recvfrom(buff)\r\n+            data, addr = self.socket.recvfrom(self.buffer)\r\n             if data.decode().split[0] == \"ack\" and data.decode().split[1] == str(client):\r\n                 print(\"Ack received from \" + client)\r\n     \r\n     def waitForAnswer(self):\r\n"
                },
                {
                    "date": 1654555599773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n             }\r\n         \"\"\"\r\n         global gamePort\r\n         for client in self.gameClients:\r\n-            data, addr = s.recvfrom(buff)\r\n+            data, addr = s.recvfrom(self.buffer)\r\n             self.clientsAnswers[client] = json.loads(data.decode().split[1])\r\n             print(\"Answer received from \" + client)\r\n             s.sendto(\"ack\" + str(client), (self.gameClients[client][\"addr\"], gamePort))\r\n         \r\n@@ -146,9 +146,9 @@\n     def run(self):\r\n         global connectedClients, nClients\r\n         print(\"À espera de clientes...\")\r\n         while True:\r\n-            data, addr = self.socket.recvfrom(buff)\r\n+            data, addr = self.socket.recvfrom(self.buffer)\r\n             msg = data.decode().split('-')\r\n \r\n             if msg[0] == 'hello':\r\n                 hostname = msg[1]\r\n"
                },
                {
                    "date": 1654555790177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         self.clientsAnswers = dict()\r\n         self.gameSolutions = dict()\r\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket = socket.socket(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-        self.socket.bind(('', self.port))\r\n+        self.socket.bind('', self.port)\r\n         \r\n     def selectClientsForGame(self):\r\n         global connectedClients\r\n         #go over connectedClients and random clients for game who have the status = 1, change status to 2\r\n"
                },
                {
                    "date": 1654555799762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         self.clientsAnswers = dict()\r\n         self.gameSolutions = dict()\r\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket = socket.socket(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-        self.socket.bind('', self.port)\r\n+        self.socket.bind(('', self.port))\r\n         \r\n     def selectClientsForGame(self):\r\n         global connectedClients\r\n         #go over connectedClients and random clients for game who have the status = 1, change status to 2\r\n"
                },
                {
                    "date": 1654555878623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n         threading.Thread.__init__(self)\r\n         self.rounds = rounds # Numero de rondas associadas a cada jogo\r\n         self.gameSize = gameSize # Numero de jogadores por jogo\r\n         self.gameClients = dict()\r\n-        self.port = 8080\r\n+        self.port = int(8080)\r\n         self.clientsAnswers = dict()\r\n         self.gameSolutions = dict()\r\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket = socket.socket(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n"
                },
                {
                    "date": 1654555885732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         self.clientsAnswers = dict()\r\n         self.gameSolutions = dict()\r\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket = socket.socket(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-        self.socket.bind(('', self.port))\r\n+        self.socket.bind((\"\", self.port))\r\n         \r\n     def selectClientsForGame(self):\r\n         global connectedClients\r\n         #go over connectedClients and random clients for game who have the status = 1, change status to 2\r\n"
                },
                {
                    "date": 1654555921001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,8 @@\n         self.clientsAnswers = dict()\r\n         self.gameSolutions = dict()\r\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket = socket.socket(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-        self.socket.bind((\"\", self.port))\r\n         \r\n     def selectClientsForGame(self):\r\n         global connectedClients\r\n         #go over connectedClients and random clients for game who have the status = 1, change status to 2\r\n"
                },
                {
                    "date": 1654555946494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,10 @@\n         self.clientsAnswers = dict()\r\n         self.gameSolutions = dict()\r\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket = socket.socket(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n+        #bind the socket to the port\r\n+        self.socket.bind(('', self.port))\r\n         \r\n     def selectClientsForGame(self):\r\n         global connectedClients\r\n         #go over connectedClients and random clients for game who have the status = 1, change status to 2\r\n"
                },
                {
                    "date": 1654556087770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,11 +162,11 @@\n \r\n def main():\r\n     global gamePort, clientsPort\r\n     ch = clientsHandler()\r\n-    gs = gameServer(3,3)\r\n+    #gs = gameServer(3,3)\r\n     ch.start()\r\n-    gs.start()\r\n+    #gs.start()\r\n     \r\n \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654556195432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,9 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,1)\r\n         self.socket.bind(('', self.port))\r\n         self.buffer = 2048\r\n+        self.hostname = socket.gethostname()\r\n         \r\n     def addClient(self, hostname, addr, port):\r\n         global connectedClients, nClients\r\n         if hostname not in connectedClients.keys():\r\n@@ -153,9 +154,9 @@\n \r\n             if msg[0] == 'hello':\r\n                 hostname = msg[1]\r\n                 if self.addClient(hostname, addr[0], addr[1]) == 1:\r\n-                    self.socket.sendto(b'hello-ack-' + self.mCastAddr, addr)\r\n+                    self.socket.sendto(b'hello-ack-' + self., addr)\r\n             elif msg[0] == 'disconnect':\r\n                 hostname = msg[1]\r\n                 if self.removeClient(hostname) == 1:\r\n                     self.socket.sendto(b'disconnect-ack-' + self.mCastAddr, addr)\r\n"
                },
                {
                    "date": 1654556204885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,13 +154,13 @@\n \r\n             if msg[0] == 'hello':\r\n                 hostname = msg[1]\r\n                 if self.addClient(hostname, addr[0], addr[1]) == 1:\r\n-                    self.socket.sendto(b'hello-ack-' + self., addr)\r\n+                    self.socket.sendto(b'hello-ack-' + self.hostname, addr)\r\n             elif msg[0] == 'disconnect':\r\n                 hostname = msg[1]\r\n                 if self.removeClient(hostname) == 1:\r\n-                    self.socket.sendto(b'disconnect-ack-' + self.mCastAddr, addr)\r\n+                    self.socket.sendto(b'disconnect-ack-' + self.hostname, addr)\r\n \r\n def main():\r\n     global gamePort, clientsPort\r\n     ch = clientsHandler()\r\n"
                },
                {
                    "date": 1654556247835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         self.port = int(8080)\r\n         self.clientsAnswers = dict()\r\n         self.gameSolutions = dict()\r\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n-        self.socket = socket.socket(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         #bind the socket to the port\r\n         self.socket.bind(('', self.port))\r\n         \r\n     def selectClientsForGame(self):\r\n"
                },
                {
                    "date": 1654556267079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n \r\n             if msg[0] == 'hello':\r\n                 hostname = msg[1]\r\n                 if self.addClient(hostname, addr[0], addr[1]) == 1:\r\n-                    self.socket.sendto(b'hello-ack-' + self.hostname, addr)\r\n+                    self.socket.sendto(\"hello-ack-\".encode() + self.hostname, addr)\r\n             elif msg[0] == 'disconnect':\r\n                 hostname = msg[1]\r\n                 if self.removeClient(hostname) == 1:\r\n                     self.socket.sendto(b'disconnect-ack-' + self.hostname, addr)\r\n"
                },
                {
                    "date": 1654556276354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,9 +158,9 @@\n                     self.socket.sendto(\"hello-ack-\".encode() + self.hostname, addr)\r\n             elif msg[0] == 'disconnect':\r\n                 hostname = msg[1]\r\n                 if self.removeClient(hostname) == 1:\r\n-                    self.socket.sendto(b'disconnect-ack-' + self.hostname, addr)\r\n+                    self.socket.sendto(\"disconnect-ack-\".encode() + self.hostname, addr)\r\n \r\n def main():\r\n     global gamePort, clientsPort\r\n     ch = clientsHandler()\r\n"
                },
                {
                    "date": 1654556312110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,13 +154,13 @@\n \r\n             if msg[0] == 'hello':\r\n                 hostname = msg[1]\r\n                 if self.addClient(hostname, addr[0], addr[1]) == 1:\r\n-                    self.socket.sendto(\"hello-ack-\".encode() + self.hostname, addr)\r\n+                    self.socket.sendto((\"hello-ack-\" + self.hostname).encode(), addr)\r\n             elif msg[0] == 'disconnect':\r\n                 hostname = msg[1]\r\n                 if self.removeClient(hostname) == 1:\r\n-                    self.socket.sendto(\"disconnect-ack-\".encode() + self.hostname, addr)\r\n+                    self.socket.sendto((\"disconnect-ack-\" + self.hostname).encode(), addr)\r\n \r\n def main():\r\n     global gamePort, clientsPort\r\n     ch = clientsHandler()\r\n"
                },
                {
                    "date": 1654556464075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,11 +163,11 @@\n \r\n def main():\r\n     global gamePort, clientsPort\r\n     ch = clientsHandler()\r\n-    #gs = gameServer(3,3)\r\n+    gs = gameServer(3,3)\r\n     ch.start()\r\n-    #gs.start()\r\n+    gs.start()\r\n     \r\n \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654557142594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n \r\n def main():\r\n     global gamePort, clientsPort\r\n     ch = clientsHandler()\r\n-    gs = gameServer(3,3)\r\n+    gs = gameServer(3,2)\r\n     ch.start()\r\n     gs.start()\r\n     \r\n \r\n"
                },
                {
                    "date": 1654560235440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,12 +55,12 @@\n             }\r\n         \"\"\"\r\n         global gamePort\r\n         for client in self.gameClients:\r\n-            data, addr = s.recvfrom(self.buffer)\r\n+            data, addr = self.socket.recvfrom(self.buffer)\r\n             self.clientsAnswers[client] = json.loads(data.decode().split[1])\r\n             print(\"Answer received from \" + client)\r\n-            s.sendto(\"ack\" + str(client), (self.gameClients[client][\"addr\"], gamePort))\r\n+            self.socket.sendto(\"ack\" + str(client), (self.gameClients[client][\"addr\"], gamePort))\r\n         \r\n     def getWinner(self):\r\n         \"\"\"\r\n         Return the winner of the game, comparing the answers of each client with the correct solution, and return the client with the highest score which is correspondent to the lowest time\r\n@@ -86,11 +86,11 @@\n         \"\"\"\r\n         winner = self.getWinner()\r\n         for client in self.gameClients:\r\n             if client == winner:\r\n-                s.sendto(\"Ganhaste o jogo\" + str(self.clientsAnswers[client][\"score\"]), (self.gameClients[client][\"addr\"], gamePort))\r\n+                self.socket.sendto(\"Ganhaste o jogo\" + str(self.clientsAnswers[client][\"score\"]), (self.gameClients[client][\"addr\"], gamePort))\r\n             else:\r\n-                s.sendto(\"Perdeste o jogo\" + str(self.clientsAnswers[client][\"score\"]), (self.gameClients[client][\"addr\"], gamePort))\r\n+                self.socket.sendto(\"Perdeste o jogo\" + str(self.clientsAnswers[client][\"score\"]), (self.gameClients[client][\"addr\"], gamePort))\r\n         self.gameClients.clear()\r\n         self.clientsAnswers.clear()\r\n         self.gameSolutions.clear()\r\n     \r\n"
                },
                {
                    "date": 1654560261485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n             time.sleep(1)\r\n         \r\n         self.selectClientsForGame()    \r\n         gG = gameGenerator.gameGenerator(self.rounds)\r\n-        correctSongs, songOptions = gG.chooseSongs()\r\n+        correctSongs, songOptions = gG.chooseSongs(), gG.getOptionsForSongs()\r\n         self.gameSolutions[correctSongs] = correctSongs\r\n         self.gameMessageHandler(\"gameStart\")\r\n         self.gameMessageHandler(json.dumps(correctSongs))\r\n         self.gameMessageHandler(json.dumps(songOptions))\r\n"
                },
                {
                    "date": 1654560487633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n         \r\n         self.selectClientsForGame()    \r\n         gG = gameGenerator.gameGenerator(self.rounds)\r\n         correctSongs, songOptions = gG.chooseSongs(), gG.getOptionsForSongs()\r\n-        self.gameSolutions[correctSongs] = correctSongs\r\n+        self.gameSolutions = correctSongs\r\n         self.gameMessageHandler(\"gameStart\")\r\n         self.gameMessageHandler(json.dumps(correctSongs))\r\n         self.gameMessageHandler(json.dumps(songOptions))\r\n         \r\n"
                },
                {
                    "date": 1654560541357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,12 +31,11 @@\n                 connectedClients[client][\"status\"] = 2\r\n                 self.gameClients[client] = connectedClients[client]\r\n \r\n     def gameMessageHandler(self, obj):\r\n-        global gamePort\r\n         #for each client in self.gameClients, send the obj passed as argument\r\n         for client in self.gameClients:\r\n-            self.socket.sendto(obj, (self.gameClients[client][\"addr\"], gamePort))\r\n+            self.socket.sendto(obj, (self.gameClients[client][\"addr\"], self.port))\r\n             #wait for the ack from the client\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             if data.decode().split[0] == \"ack\" and data.decode().split[1] == str(client):\r\n                 print(\"Ack received from \" + client)\r\n@@ -53,14 +52,13 @@\n                 }\r\n                 }\r\n             }\r\n         \"\"\"\r\n-        global gamePort\r\n         for client in self.gameClients:\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             self.clientsAnswers[client] = json.loads(data.decode().split[1])\r\n             print(\"Answer received from \" + client)\r\n-            self.socket.sendto(\"ack\" + str(client), (self.gameClients[client][\"addr\"], gamePort))\r\n+            self.socket.sendto(\"ack\" + str(client), (self.gameClients[client][\"addr\"], self.port))\r\n         \r\n     def getWinner(self):\r\n         \"\"\"\r\n         Return the winner of the game, comparing the answers of each client with the correct solution, and return the client with the highest score which is correspondent to the lowest time\r\n@@ -86,11 +84,11 @@\n         \"\"\"\r\n         winner = self.getWinner()\r\n         for client in self.gameClients:\r\n             if client == winner:\r\n-                self.socket.sendto(\"Ganhaste o jogo\" + str(self.clientsAnswers[client][\"score\"]), (self.gameClients[client][\"addr\"], gamePort))\r\n+                self.socket.sendto(\"Ganhaste o jogo\" + str(self.clientsAnswers[client][\"score\"]), (self.gameClients[client][\"addr\"], self.port))\r\n             else:\r\n-                self.socket.sendto(\"Perdeste o jogo\" + str(self.clientsAnswers[client][\"score\"]), (self.gameClients[client][\"addr\"], gamePort))\r\n+                self.socket.sendto(\"Perdeste o jogo\" + str(self.clientsAnswers[client][\"score\"]), (self.gameClients[client][\"addr\"], self.port))\r\n         self.gameClients.clear()\r\n         self.clientsAnswers.clear()\r\n         self.gameSolutions.clear()\r\n     \r\n@@ -161,9 +159,8 @@\n                 if self.removeClient(hostname) == 1:\r\n                     self.socket.sendto((\"disconnect-ack-\" + self.hostname).encode(), addr)\r\n \r\n def main():\r\n-    global gamePort, clientsPort\r\n     ch = clientsHandler()\r\n     gs = gameServer(3,2)\r\n     ch.start()\r\n     gs.start()\r\n"
                },
                {
                    "date": 1654560725929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,10 @@\n                 self.gameClients[client] = connectedClients[client]\r\n \r\n     def gameMessageHandler(self, obj):\r\n         #for each client in self.gameClients, send the obj passed as argument\r\n+        if type(obj) == str:\r\n+            obj.encode()\r\n         for client in self.gameClients:\r\n             self.socket.sendto(obj, (self.gameClients[client][\"addr\"], self.port))\r\n             #wait for the ack from the client\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n"
                },
                {
                    "date": 1654560819622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,16 @@\n             if connectedClients[client][\"status\"] == 1:\r\n                 connectedClients[client][\"status\"] = 2\r\n                 self.gameClients[client] = connectedClients[client]\r\n \r\n+\r\n+\r\n+    ###FIXME E PRECISO SEPARAR A FUNCAO DE ENVIAR MENSAGENS E A FUNCAO DE ENVIAR OBJETOS!\r\n+\r\n+\r\n+\r\n+\r\n+\r\n     def gameMessageHandler(self, obj):\r\n         #for each client in self.gameClients, send the obj passed as argument\r\n         if type(obj) == str:\r\n             obj.encode()\r\n"
                },
                {
                    "date": 1654611522005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,16 +34,20 @@\n \r\n \r\n     ###FIXME E PRECISO SEPARAR A FUNCAO DE ENVIAR MENSAGENS E A FUNCAO DE ENVIAR OBJETOS!\r\n \r\n+    def messageHandler(self, msg):\r\n+        for client in self.gameClients:\r\n+            self.socket.sendto(msg.encode(), (self.gameClients[client][\"addr\"], self.port))\r\n+            data, addr = self.socket.recvfrom(self.buffer)\r\n+            if data.decode().split[0] == \"ack\" and data.decode().split[1] == str(client):\r\n+                print(\"Ack received from \" + client)\r\n \r\n \r\n \r\n \r\n-    def gameMessageHandler(self, obj):\r\n+    def objectHandler(self, obj):\r\n         #for each client in self.gameClients, send the obj passed as argument\r\n-        if type(obj) == str:\r\n-            obj.encode()\r\n         for client in self.gameClients:\r\n             self.socket.sendto(obj, (self.gameClients[client][\"addr\"], self.port))\r\n             #wait for the ack from the client\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n@@ -110,11 +114,11 @@\n         self.selectClientsForGame()    \r\n         gG = gameGenerator.gameGenerator(self.rounds)\r\n         correctSongs, songOptions = gG.chooseSongs(), gG.getOptionsForSongs()\r\n         self.gameSolutions = correctSongs\r\n-        self.gameMessageHandler(\"gameStart\")\r\n-        self.gameMessageHandler(json.dumps(correctSongs))\r\n-        self.gameMessageHandler(json.dumps(songOptions))\r\n+        self.messageHandler(\"gameStart\")\r\n+        self.objectHandler(json.dumps(correctSongs))\r\n+        self.objectHandler(json.dumps(songOptions))\r\n         \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1654611544079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         #bind the socket to the port\r\n         self.socket.bind(('', self.port))\r\n+        self.buffer = 2038\r\n         \r\n     def selectClientsForGame(self):\r\n         global connectedClients\r\n         #go over connectedClients and random clients for game who have the status = 1, change status to 2\r\n"
                },
                {
                    "date": 1654611627519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         #bind the socket to the port\r\n         self.socket.bind(('', self.port))\r\n-        self.buffer = 2038\r\n+        self.buffer = 2048\r\n         \r\n     def selectClientsForGame(self):\r\n         global connectedClients\r\n         #go over connectedClients and random clients for game who have the status = 1, change status to 2\r\n@@ -167,13 +167,13 @@\n \r\n             if msg[0] == 'hello':\r\n                 hostname = msg[1]\r\n                 if self.addClient(hostname, addr[0], addr[1]) == 1:\r\n-                    self.socket.sendto((\"hello-ack-\" + self.hostname).encode(), addr)\r\n+                    self.socket.sendto((\"hello-ack-\" + self.hostname).encode(), addr[0], self.port)\r\n             elif msg[0] == 'disconnect':\r\n                 hostname = msg[1]\r\n                 if self.removeClient(hostname) == 1:\r\n-                    self.socket.sendto((\"disconnect-ack-\" + self.hostname).encode(), addr)\r\n+                    self.socket.sendto((\"disconnect-ack-\" + self.hostname).encode(), addr[0], self.port)\r\n \r\n def main():\r\n     ch = clientsHandler()\r\n     gs = gameServer(3,2)\r\n"
                },
                {
                    "date": 1654611647176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,13 +167,13 @@\n \r\n             if msg[0] == 'hello':\r\n                 hostname = msg[1]\r\n                 if self.addClient(hostname, addr[0], addr[1]) == 1:\r\n-                    self.socket.sendto((\"hello-ack-\" + self.hostname).encode(), addr[0], self.port)\r\n+                    self.socket.sendto((\"hello-ack-\" + self.hostname).encode(), (addr[0], self.port))\r\n             elif msg[0] == 'disconnect':\r\n                 hostname = msg[1]\r\n                 if self.removeClient(hostname) == 1:\r\n-                    self.socket.sendto((\"disconnect-ack-\" + self.hostname).encode(), addr[0], self.port)\r\n+                    self.socket.sendto((\"disconnect-ack-\" + self.hostname).encode(), (addr[0], self.port))\r\n \r\n def main():\r\n     ch = clientsHandler()\r\n     gs = gameServer(3,2)\r\n"
                },
                {
                    "date": 1654611682057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,12 +168,14 @@\n             if msg[0] == 'hello':\r\n                 hostname = msg[1]\r\n                 if self.addClient(hostname, addr[0], addr[1]) == 1:\r\n                     self.socket.sendto((\"hello-ack-\" + self.hostname).encode(), (addr[0], self.port))\r\n+                    print(\"Hello ack sent to \" + hostname)\r\n             elif msg[0] == 'disconnect':\r\n                 hostname = msg[1]\r\n                 if self.removeClient(hostname) == 1:\r\n                     self.socket.sendto((\"disconnect-ack-\" + self.hostname).encode(), (addr[0], self.port))\r\n+                    print(\"Disconnect ack sent to \" + hostname)\r\n \r\n def main():\r\n     ch = clientsHandler()\r\n     gs = gameServer(3,2)\r\n"
                },
                {
                    "date": 1654611734484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n             if msg[0] == 'hello':\r\n                 hostname = msg[1]\r\n                 if self.addClient(hostname, addr[0], addr[1]) == 1:\r\n                     self.socket.sendto((\"hello-ack-\" + self.hostname).encode(), (addr[0], self.port))\r\n-                    print(\"Hello ack sent to \" + hostname)\r\n+                    print(\"Hello ack sent to \" + hostname + \"on addr \" + addr[0] \" and port \" + str(addr[1])) \"))\r\n             elif msg[0] == 'disconnect':\r\n                 hostname = msg[1]\r\n                 if self.removeClient(hostname) == 1:\r\n                     self.socket.sendto((\"disconnect-ack-\" + self.hostname).encode(), (addr[0], self.port))\r\n"
                },
                {
                    "date": 1654611765583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n             if msg[0] == 'hello':\r\n                 hostname = msg[1]\r\n                 if self.addClient(hostname, addr[0], addr[1]) == 1:\r\n                     self.socket.sendto((\"hello-ack-\" + self.hostname).encode(), (addr[0], self.port))\r\n-                    print(\"Hello ack sent to \" + hostname + \"on addr \" + addr[0] \" and port \" + str(addr[1])) \"))\r\n+                    print(\"Hello ack sent to \" + hostname + \"on addr \" + addr[0] \" and port \" + str(addr[1]) + \".\")\r\n             elif msg[0] == 'disconnect':\r\n                 hostname = msg[1]\r\n                 if self.removeClient(hostname) == 1:\r\n                     self.socket.sendto((\"disconnect-ack-\" + self.hostname).encode(), (addr[0], self.port))\r\n"
                },
                {
                    "date": 1654611814684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,8 @@\n         global connectedClients, nClients\r\n         if hostname not in connectedClients.keys():\r\n             connectedClients[hostname] = {\r\n                 \"addr\": addr,\r\n-                \"port\": port,\r\n                 \"status\": 1, #0 = not connected, 1 = connected, 2 = ready, 3 = ingame\r\n             }\r\n             nClients += 1\r\n             print(\"Client \" + hostname + \" added\")\r\n"
                },
                {
                    "date": 1654611907442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,20 +162,19 @@\n         print(\"À espera de clientes...\")\r\n         while True:\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             msg = data.decode().split('-')\r\n+            if msg[0] == \"hello\":\r\n+                if self.addClient(msg[1], addr[0], addr[1]):\r\n+                    self.socket.sendto(\"hello-ack\".encode(), addr)\r\n+                else:\r\n+                    self.socket.sendto(\"You are already connected\".encode(), addr)\r\n+            elif msg[0] == \"disconnect\":\r\n+                if self.removeClient(msg[1]):\r\n+                    self.socket.sendto(\"bye-ack\".encode(), addr)\r\n+                else:\r\n+                    self.socket.sendto(\"You are not connected\".encode(), addr)\r\n \r\n-            if msg[0] == 'hello':\r\n-                hostname = msg[1]\r\n-                if self.addClient(hostname, addr[0], addr[1]) == 1:\r\n-                    self.socket.sendto((\"hello-ack-\" + self.hostname).encode(), (addr[0], self.port))\r\n-                    print(\"Hello ack sent to \" + hostname + \"on addr \" + addr[0] \" and port \" + str(addr[1]) + \".\")\r\n-            elif msg[0] == 'disconnect':\r\n-                hostname = msg[1]\r\n-                if self.removeClient(hostname) == 1:\r\n-                    self.socket.sendto((\"disconnect-ack-\" + self.hostname).encode(), (addr[0], self.port))\r\n-                    print(\"Disconnect ack sent to \" + hostname)\r\n-\r\n def main():\r\n     ch = clientsHandler()\r\n     gs = gameServer(3,2)\r\n     ch.start()\r\n"
                },
                {
                    "date": 1654611916428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n                 else:\r\n                     self.socket.sendto(\"You are already connected\".encode(), addr)\r\n             elif msg[0] == \"disconnect\":\r\n                 if self.removeClient(msg[1]):\r\n-                    self.socket.sendto(\"bye-ack\".encode(), addr)\r\n+                    self.socket.sendto(\"disconnect-ack\".encode(), addr)\r\n                 else:\r\n                     self.socket.sendto(\"You are not connected\".encode(), addr)\r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654611949132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,8 +165,9 @@\n             msg = data.decode().split('-')\r\n             if msg[0] == \"hello\":\r\n                 if self.addClient(msg[1], addr[0], addr[1]):\r\n                     self.socket.sendto(\"hello-ack\".encode(), addr)\r\n+                    print(\"hello ack sent to \" + msg[1])\r\n                 else:\r\n                     self.socket.sendto(\"You are already connected\".encode(), addr)\r\n             elif msg[0] == \"disconnect\":\r\n                 if self.removeClient(msg[1]):\r\n"
                },
                {
                    "date": 1654612296512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,14 +110,13 @@\n     def run(self):\r\n         while nClients < self.gameSize:\r\n             print(\"game not ready...\")\r\n             time.sleep(1)\r\n-        \r\n+        self.messageHandler(\"gameStart\")\r\n         self.selectClientsForGame()    \r\n         gG = gameGenerator.gameGenerator(self.rounds)\r\n         correctSongs, songOptions = gG.chooseSongs(), gG.getOptionsForSongs()\r\n         self.gameSolutions = correctSongs\r\n-        self.messageHandler(\"gameStart\")\r\n         self.objectHandler(json.dumps(correctSongs))\r\n         self.objectHandler(json.dumps(songOptions))\r\n         \r\n \r\n@@ -171,8 +170,9 @@\n                     self.socket.sendto(\"You are already connected\".encode(), addr)\r\n             elif msg[0] == \"disconnect\":\r\n                 if self.removeClient(msg[1]):\r\n                     self.socket.sendto(\"disconnect-ack\".encode(), addr)\r\n+                    print(\"disconnect ack sent to \" + msg[1])\r\n                 else:\r\n                     self.socket.sendto(\"You are not connected\".encode(), addr)\r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654612354074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,11 @@\n     def messageHandler(self, msg):\r\n         for client in self.gameClients:\r\n             self.socket.sendto(msg.encode(), (self.gameClients[client][\"addr\"], self.port))\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n-            if data.decode().split[0] == \"ack\" and data.decode().split[1] == str(client):\r\n+            print(\"messaging client to start game\")\r\n+            print(\"waiting for ack...\")\r\n+            if data.decode().split[1] == \"ack\" and data.decode().split[1] == str(client):\r\n                 print(\"Ack received from \" + client)\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1654612398319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,14 +113,14 @@\n         while nClients < self.gameSize:\r\n             print(\"game not ready...\")\r\n             time.sleep(1)\r\n         self.messageHandler(\"gameStart\")\r\n-        self.selectClientsForGame()    \r\n-        gG = gameGenerator.gameGenerator(self.rounds)\r\n-        correctSongs, songOptions = gG.chooseSongs(), gG.getOptionsForSongs()\r\n-        self.gameSolutions = correctSongs\r\n-        self.objectHandler(json.dumps(correctSongs))\r\n-        self.objectHandler(json.dumps(songOptions))\r\n+        #self.selectClientsForGame()    \r\n+        #gG = gameGenerator.gameGenerator(self.rounds)\r\n+        #correctSongs, songOptions = gG.chooseSongs(), gG.getOptionsForSongs()\r\n+        #self.gameSolutions = correctSongs\r\n+       #self.objectHandler(json.dumps(correctSongs))\r\n+        #self.objectHandler(json.dumps(songOptions))\r\n         \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1654612464465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n         for client in connectedClients:\r\n             if connectedClients[client][\"status\"] == 1:\r\n                 connectedClients[client][\"status\"] = 2\r\n                 self.gameClients[client] = connectedClients[client]\r\n+        print(\"Selected Clients for game: \" + str(self.gameClients))\r\n \r\n \r\n \r\n     ###FIXME E PRECISO SEPARAR A FUNCAO DE ENVIAR MENSAGENS E A FUNCAO DE ENVIAR OBJETOS!\r\n@@ -113,9 +114,9 @@\n         while nClients < self.gameSize:\r\n             print(\"game not ready...\")\r\n             time.sleep(1)\r\n         self.messageHandler(\"gameStart\")\r\n-        #self.selectClientsForGame()    \r\n+        self.selectClientsForGame()    \r\n         #gG = gameGenerator.gameGenerator(self.rounds)\r\n         #correctSongs, songOptions = gG.chooseSongs(), gG.getOptionsForSongs()\r\n         #self.gameSolutions = correctSongs\r\n        #self.objectHandler(json.dumps(correctSongs))\r\n"
                },
                {
                    "date": 1654612475349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         for client in connectedClients:\r\n             if connectedClients[client][\"status\"] == 1:\r\n                 connectedClients[client][\"status\"] = 2\r\n                 self.gameClients[client] = connectedClients[client]\r\n-        print(\"Selected Clients for game: \" + str(self.gameClients))\r\n+        print(\"Selected Clients for game: \" + pprint.pprint(self.gameClients))\r\n \r\n \r\n \r\n     ###FIXME E PRECISO SEPARAR A FUNCAO DE ENVIAR MENSAGENS E A FUNCAO DE ENVIAR OBJETOS!\r\n"
                },
                {
                    "date": 1654612829067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import threading, json, socket, time, gameGenerator\r\n+import threading, json, socket, time, gameGenerator, pprint\r\n \r\n \r\n connectedClients = dict()\r\n remoteConnectedClients = dict()\r\n@@ -113,9 +113,8 @@\n     def run(self):\r\n         while nClients < self.gameSize:\r\n             print(\"game not ready...\")\r\n             time.sleep(1)\r\n-        self.messageHandler(\"gameStart\")\r\n         self.selectClientsForGame()    \r\n         #gG = gameGenerator.gameGenerator(self.rounds)\r\n         #correctSongs, songOptions = gG.chooseSongs(), gG.getOptionsForSongs()\r\n         #self.gameSolutions = correctSongs\r\n"
                },
                {
                    "date": 1654612841960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,10 @@\n     def run(self):\r\n         while nClients < self.gameSize:\r\n             print(\"game not ready...\")\r\n             time.sleep(1)\r\n-        self.selectClientsForGame()    \r\n+        self.selectClientsForGame()\r\n+        self.messageHandler(\"gameStart\")    \r\n         #gG = gameGenerator.gameGenerator(self.rounds)\r\n         #correctSongs, songOptions = gG.chooseSongs(), gG.getOptionsForSongs()\r\n         #self.gameSolutions = correctSongs\r\n        #self.objectHandler(json.dumps(correctSongs))\r\n"
                },
                {
                    "date": 1654612872953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,10 @@\n         for client in connectedClients:\r\n             if connectedClients[client][\"status\"] == 1:\r\n                 connectedClients[client][\"status\"] = 2\r\n                 self.gameClients[client] = connectedClients[client]\r\n-        print(\"Selected Clients for game: \" + pprint.pprint(self.gameClients))\r\n+        print(\"Selected Clients for game: \")\r\n+        pprint.pprint(self.gameClients)\r\n \r\n \r\n \r\n     ###FIXME E PRECISO SEPARAR A FUNCAO DE ENVIAR MENSAGENS E A FUNCAO DE ENVIAR OBJETOS!\r\n"
                },
                {
                    "date": 1654612914046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n \r\n     def messageHandler(self, msg):\r\n         for client in self.gameClients:\r\n             self.socket.sendto(msg.encode(), (self.gameClients[client][\"addr\"], self.port))\r\n+            print(\"Message sent to \" + client)\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             print(\"messaging client to start game\")\r\n             print(\"waiting for ack...\")\r\n             if data.decode().split[1] == \"ack\" and data.decode().split[1] == str(client):\r\n"
                },
                {
                    "date": 1654612953577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,12 +39,12 @@\n     ###FIXME E PRECISO SEPARAR A FUNCAO DE ENVIAR MENSAGENS E A FUNCAO DE ENVIAR OBJETOS!\r\n \r\n     def messageHandler(self, msg):\r\n         for client in self.gameClients:\r\n+            print(\"Message:\" + msg +  \" \\nto client: \" + client)\r\n             self.socket.sendto(msg.encode(), (self.gameClients[client][\"addr\"], self.port))\r\n             print(\"Message sent to \" + client)\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n-            print(\"messaging client to start game\")\r\n             print(\"waiting for ack...\")\r\n             if data.decode().split[1] == \"ack\" and data.decode().split[1] == str(client):\r\n                 print(\"Ack received from \" + client)\r\n \r\n"
                },
                {
                    "date": 1654613020821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,10 @@\n         for client in self.gameClients:\r\n             print(\"Message:\" + msg +  \" \\nto client: \" + client)\r\n             self.socket.sendto(msg.encode(), (self.gameClients[client][\"addr\"], self.port))\r\n             print(\"Message sent to \" + client)\r\n+            print(\"waiting for ack...\")\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n-            print(\"waiting for ack...\")\r\n             if data.decode().split[1] == \"ack\" and data.decode().split[1] == str(client):\r\n                 print(\"Ack received from \" + client)\r\n \r\n \r\n"
                },
                {
                    "date": 1654613880441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,15 +43,17 @@\n             print(\"Message:\" + msg +  \" \\nto client: \" + client)\r\n             self.socket.sendto(msg.encode(), (self.gameClients[client][\"addr\"], self.port))\r\n             print(\"Message sent to \" + client)\r\n             print(\"waiting for ack...\")\r\n+\r\n+\r\n+\r\n+    def waitForAcks(self):\r\n+        for client in self.gameClients:\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             if data.decode().split[1] == \"ack\" and data.decode().split[1] == str(client):\r\n                 print(\"Ack received from \" + client)\r\n \r\n-\r\n-\r\n-\r\n     def objectHandler(self, obj):\r\n         #for each client in self.gameClients, send the obj passed as argument\r\n         for client in self.gameClients:\r\n             self.socket.sendto(obj, (self.gameClients[client][\"addr\"], self.port))\r\n"
                },
                {
                    "date": 1654613955860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,11 +43,10 @@\n             print(\"Message:\" + msg +  \" \\nto client: \" + client)\r\n             self.socket.sendto(msg.encode(), (self.gameClients[client][\"addr\"], self.port))\r\n             print(\"Message sent to \" + client)\r\n             print(\"waiting for ack...\")\r\n+        self.waitForAcks()\r\n \r\n-\r\n-\r\n     def waitForAcks(self):\r\n         for client in self.gameClients:\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             if data.decode().split[1] == \"ack\" and data.decode().split[1] == str(client):\r\n"
                },
                {
                    "date": 1654613975208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,12 +55,11 @@\n     def objectHandler(self, obj):\r\n         #for each client in self.gameClients, send the obj passed as argument\r\n         for client in self.gameClients:\r\n             self.socket.sendto(obj, (self.gameClients[client][\"addr\"], self.port))\r\n-            #wait for the ack from the client\r\n-            data, addr = self.socket.recvfrom(self.buffer)\r\n-            if data.decode().split[0] == \"ack\" and data.decode().split[1] == str(client):\r\n-                print(\"Ack received from \" + client)\r\n+        self.waitForAcks()\r\n+           \r\n+        \r\n     \r\n     def waitForAnswer(self):\r\n         \"\"\"\r\n         Wait for the answers for each client on self.gameClients , the answer is a JSON object with the following structure:\r\n"
                },
                {
                    "date": 1654613983489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,20 +45,19 @@\n             print(\"Message sent to \" + client)\r\n             print(\"waiting for ack...\")\r\n         self.waitForAcks()\r\n \r\n-    def waitForAcks(self):\r\n-        for client in self.gameClients:\r\n-            data, addr = self.socket.recvfrom(self.buffer)\r\n-            if data.decode().split[1] == \"ack\" and data.decode().split[1] == str(client):\r\n-                print(\"Ack received from \" + client)\r\n-\r\n     def objectHandler(self, obj):\r\n         #for each client in self.gameClients, send the obj passed as argument\r\n         for client in self.gameClients:\r\n             self.socket.sendto(obj, (self.gameClients[client][\"addr\"], self.port))\r\n         self.waitForAcks()\r\n            \r\n+    def waitForAcks(self):\r\n+        for client in self.gameClients:\r\n+        data, addr = self.socket.recvfrom(self.buffer)\r\n+        if data.decode().split[1] == \"ack\" and data.decode().split[1] == str(client):\r\n+            print(\"Ack received from \" + client)\r\n         \r\n     \r\n     def waitForAnswer(self):\r\n         \"\"\"\r\n"
                },
                {
                    "date": 1654614014882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,21 +43,21 @@\n             print(\"Message:\" + msg +  \" \\nto client: \" + client)\r\n             self.socket.sendto(msg.encode(), (self.gameClients[client][\"addr\"], self.port))\r\n             print(\"Message sent to \" + client)\r\n             print(\"waiting for ack...\")\r\n-        self.waitForAcks()\r\n+        #self.waitForAcks()\r\n \r\n     def objectHandler(self, obj):\r\n         #for each client in self.gameClients, send the obj passed as argument\r\n         for client in self.gameClients:\r\n             self.socket.sendto(obj, (self.gameClients[client][\"addr\"], self.port))\r\n-        self.waitForAcks()\r\n+        #self.waitForAcks()\r\n            \r\n     def waitForAcks(self):\r\n         for client in self.gameClients:\r\n-        data, addr = self.socket.recvfrom(self.buffer)\r\n-        if data.decode().split[1] == \"ack\" and data.decode().split[1] == str(client):\r\n-            print(\"Ack received from \" + client)\r\n+            data, addr = self.socket.recvfrom(self.buffer)\r\n+            if data.decode().split[1] == \"ack\" and data.decode().split[1] == str(client):\r\n+                print(\"Ack received from \" + client)\r\n         \r\n     \r\n     def waitForAnswer(self):\r\n         \"\"\"\r\n"
                },
                {
                    "date": 1654614088108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     def messageHandler(self, msg):\r\n         for client in self.gameClients:\r\n             print(\"Message:\" + msg +  \" \\nto client: \" + client)\r\n             self.socket.sendto(msg.encode(), (self.gameClients[client][\"addr\"], self.port))\r\n-            print(\"Message sent to \" + client)\r\n+            print(\"Message sent to \" + client + \" on address \" + self.gameClients[client][\"addr\"] + \" on port \" + str(self.port))\r\n             print(\"waiting for ack...\")\r\n         #self.waitForAcks()\r\n \r\n     def objectHandler(self, obj):\r\n"
                },
                {
                    "date": 1654614093470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     def messageHandler(self, msg):\r\n         for client in self.gameClients:\r\n             print(\"Message:\" + msg +  \" \\nto client: \" + client)\r\n             self.socket.sendto(msg.encode(), (self.gameClients[client][\"addr\"], self.port))\r\n-            print(\"Message sent to \" + client + \" on address \" + self.gameClients[client][\"addr\"] + \" on port \" + str(self.port))\r\n+            print(\"Message sent to \" + client + \" on address \" + str(self.gameClients[client])[\"addr\"] + \" on port \" + str(self.port))\r\n             print(\"waiting for ack...\")\r\n         #self.waitForAcks()\r\n \r\n     def objectHandler(self, obj):\r\n"
                },
                {
                    "date": 1654614121649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,8 @@\n     def messageHandler(self, msg):\r\n         for client in self.gameClients:\r\n             print(\"Message:\" + msg +  \" \\nto client: \" + client)\r\n             self.socket.sendto(msg.encode(), (self.gameClients[client][\"addr\"], self.port))\r\n-            print(\"Message sent to \" + client + \" on address \" + str(self.gameClients[client])[\"addr\"] + \" on port \" + str(self.port))\r\n             print(\"waiting for ack...\")\r\n         #self.waitForAcks()\r\n \r\n     def objectHandler(self, obj):\r\n"
                },
                {
                    "date": 1654614149055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,28 +56,8 @@\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             if data.decode().split[1] == \"ack\" and data.decode().split[1] == str(client):\r\n                 print(\"Ack received from \" + client)\r\n         \r\n-    \r\n-    def waitForAnswer(self):\r\n-        \"\"\"\r\n-        Wait for the answers for each client on self.gameClients , the answer is a JSON object with the following structure:\r\n-            {\r\n-                \"hostname\" : { \"round\" :{\r\n-                                        \"answer\" : \"answer\",\r\n-                                        \"time\" : \"time\"\r\n-                                        },\r\n-                                \"round\" : {...},\r\n-                }\r\n-                }\r\n-            }\r\n-        \"\"\"\r\n-        for client in self.gameClients:\r\n-            data, addr = self.socket.recvfrom(self.buffer)\r\n-            self.clientsAnswers[client] = json.loads(data.decode().split[1])\r\n-            print(\"Answer received from \" + client)\r\n-            self.socket.sendto(\"ack\" + str(client), (self.gameClients[client][\"addr\"], self.port))\r\n-        \r\n     def getWinner(self):\r\n         \"\"\"\r\n         Return the winner of the game, comparing the answers of each client with the correct solution, and return the client with the highest score which is correspondent to the lowest time\r\n         \"\"\"        \r\n"
                },
                {
                    "date": 1654615092887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,22 @@\n \r\n \r\n \r\n \r\n+\r\n+class clientHandler(threading.Thread):\r\n+    def __init__(self, addr, port, socket):\r\n+        self.clientAddr = addr\r\n+        self.clientPort = port\r\n+        self.socket = socket\r\n+    def startGame(self):\r\n+        \r\n+        \r\n+    def run(self):\r\n+\r\n+\r\n+\r\n+\r\n class gameServer(threading.Thread):\r\n     def __init__(self, rounds, gameSize):\r\n         threading.Thread.__init__(self)\r\n         self.rounds = rounds # Numero de rondas associadas a cada jogo\r\n@@ -34,30 +48,16 @@\n         print(\"Selected Clients for game: \")\r\n         pprint.pprint(self.gameClients)\r\n \r\n \r\n+    def multiUnicastMessageLoop(self, message):\r\n+        for client in self.gameClients:\r\n+            \r\n \r\n-    ###FIXME E PRECISO SEPARAR A FUNCAO DE ENVIAR MENSAGENS E A FUNCAO DE ENVIAR OBJETOS!\r\n+    def ackLoop(self, message):\r\n+        \r\n \r\n-    def messageHandler(self, msg):\r\n-        for client in self.gameClients:\r\n-            print(\"Message:\" + msg +  \" \\nto client: \" + client)\r\n-            self.socket.sendto(msg.encode(), (self.gameClients[client][\"addr\"], self.port))\r\n-            print(\"waiting for ack...\")\r\n-        #self.waitForAcks()\r\n \r\n-    def objectHandler(self, obj):\r\n-        #for each client in self.gameClients, send the obj passed as argument\r\n-        for client in self.gameClients:\r\n-            self.socket.sendto(obj, (self.gameClients[client][\"addr\"], self.port))\r\n-        #self.waitForAcks()\r\n-           \r\n-    def waitForAcks(self):\r\n-        for client in self.gameClients:\r\n-            data, addr = self.socket.recvfrom(self.buffer)\r\n-            if data.decode().split[1] == \"ack\" and data.decode().split[1] == str(client):\r\n-                print(\"Ack received from \" + client)\r\n-        \r\n     def getWinner(self):\r\n         \"\"\"\r\n         Return the winner of the game, comparing the answers of each client with the correct solution, and return the client with the highest score which is correspondent to the lowest time\r\n         \"\"\"        \r\n"
                }
            ],
            "date": 1654527527417,
            "name": "Commit-0",
            "content": "import threading, json, socket\r\n\r\n\r\nconnectedClients = dict()\r\nremoteConnectedClients = dict()\r\nnClients = 0\r\n\r\nclass mainServer():\r\n    def __init__(self, rounds, gameSize):\r\n        self.rounds = rounds # Numero de rondas associadas a cada jogo\r\n        self.gameSize = gameSize # Numero de jogadores por jogo\r\n        self.gam\r\n    \r\n    \r\n\r\nclass ethHandler(threading.Thread):\r\n    def __init__(self, rounds, gameSize):\r\n        self.clients = dict()\r\n        self.port = 8080 # porta de autenticação\r\n        self.sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n        self.sock.bind(('', 0))\r\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n        self.buffer = 2048\r\n    \r\n    def addClient(self, hostname, addr, port):\r\n        global connectedClients, nClients\r\n        if hostname not in connectedClients.keys():\r\n            connectedClients[hostname] = {\r\n                \"addr\": addr,\r\n                \"port\": port,\r\n                \"status\": 1, #0 = not connected, 1 = connected, 2 = ready, 3 = ingame\r\n            }\r\n            nClients += 1\r\n            print(\"Client \" + hostname + \" added\")\r\n        else:\r\n            print(\"Client \" + hostname + \" already exists\")"
        }
    ]
}