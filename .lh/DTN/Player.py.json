{
    "sourceFile": "DTN/Player.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1654642618240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1654643263805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n         data = self.wf.readframes(frame_count)\r\n         return (data, pyaudio.paContinue)\r\n \r\n     def run(self):\r\n+        print(\"playing song....\")\r\n         stream = self.p.open(format=self.p.get_format_from_width(self.wf.getsampwidth()),\r\n                         channels=self.wf.getnchannels(),\r\n                         rate=self.wf.getframerate(),\r\n                         output=True,\r\n"
                },
                {
                    "date": 1654644818026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,22 @@\n-import pyaudio, wave, threading, time, sys\r\n+import pyaudio, wave, threading, time, sys, os, sys, contextlib\r\n \r\n \r\n class Player(threading.Thread):\r\n+    @contextlib.contextmanager\r\n     def __init__(self,file):\r\n         threading.Thread.__init__(self)\r\n+        devnull = os.open(os.devnull, os.O_WRONLY)\r\n+        old_stderr = os.dup(2)\r\n+        sys.stderr.flush()\r\n+        os.dup2(devnull, 2)\r\n+        os.close(devnull)\r\n+        try: \r\n+            yield\r\n+        \r\n+        finally:\r\n+            os.dup2(old_stderr,2)\r\n+            os.close(old_stderr)\r\n         self.wf = wave.open(file)\r\n         self.p = pyaudio.PyAudio()\r\n \r\n \r\n"
                },
                {
                    "date": 1654644834352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import pyaudio, wave, threading, time, sys, os, sys, contextlib\r\n \r\n-\r\n+@contextlib.contextmanager\r\n class Player(threading.Thread):\r\n-    @contextlib.contextmanager\r\n     def __init__(self,file):\r\n         threading.Thread.__init__(self)\r\n         devnull = os.open(os.devnull, os.O_WRONLY)\r\n         old_stderr = os.dup(2)\r\n"
                },
                {
                    "date": 1654644910285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import pyaudio, wave, threading, time, sys, os, sys, contextlib\r\n \r\n-@contextlib.contextmanager\r\n class Player(threading.Thread):\r\n     def __init__(self,file):\r\n         threading.Thread.__init__(self)\r\n         devnull = os.open(os.devnull, os.O_WRONLY)\r\n@@ -22,8 +21,9 @@\n     def callback(self,in_data, frame_count, time_info, status):\r\n         data = self.wf.readframes(frame_count)\r\n         return (data, pyaudio.paContinue)\r\n \r\n+    @contextlib.contextmanager\r\n     def run(self):\r\n         print(\"playing song....\")\r\n         stream = self.p.open(format=self.p.get_format_from_width(self.wf.getsampwidth()),\r\n                         channels=self.wf.getnchannels(),\r\n"
                },
                {
                    "date": 1654644935365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,18 @@\n \r\n class Player(threading.Thread):\r\n     def __init__(self,file):\r\n         threading.Thread.__init__(self)\r\n+        self.wf = wave.open(file)\r\n+        self.p = pyaudio.PyAudio()\r\n+\r\n+\r\n+    def callback(self,in_data, frame_count, time_info, status):\r\n+        data = self.wf.readframes(frame_count)\r\n+        return (data, pyaudio.paContinue)\r\n+\r\n+    @contextlib.contextmanager\r\n+    def run(self):\r\n         devnull = os.open(os.devnull, os.O_WRONLY)\r\n         old_stderr = os.dup(2)\r\n         sys.stderr.flush()\r\n         os.dup2(devnull, 2)\r\n@@ -13,18 +23,8 @@\n         \r\n         finally:\r\n             os.dup2(old_stderr,2)\r\n             os.close(old_stderr)\r\n-        self.wf = wave.open(file)\r\n-        self.p = pyaudio.PyAudio()\r\n-\r\n-\r\n-    def callback(self,in_data, frame_count, time_info, status):\r\n-        data = self.wf.readframes(frame_count)\r\n-        return (data, pyaudio.paContinue)\r\n-\r\n-    @contextlib.contextmanager\r\n-    def run(self):\r\n         print(\"playing song....\")\r\n         stream = self.p.open(format=self.p.get_format_from_width(self.wf.getsampwidth()),\r\n                         channels=self.wf.getnchannels(),\r\n                         rate=self.wf.getframerate(),\r\n"
                },
                {
                    "date": 1654644943665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n class Player(threading.Thread):\r\n     def __init__(self,file):\r\n         threading.Thread.__init__(self)\r\n         self.wf = wave.open(file)\r\n-        self.p = pyaudio.PyAudio()\r\n \r\n \r\n     def callback(self,in_data, frame_count, time_info, status):\r\n         data = self.wf.readframes(frame_count)\r\n@@ -23,8 +22,9 @@\n         \r\n         finally:\r\n             os.dup2(old_stderr,2)\r\n             os.close(old_stderr)\r\n+        self.p = pyaudio.PyAudio()\r\n         print(\"playing song....\")\r\n         stream = self.p.open(format=self.p.get_format_from_width(self.wf.getsampwidth()),\r\n                         channels=self.wf.getnchannels(),\r\n                         rate=self.wf.getframerate(),\r\n"
                },
                {
                    "date": 1654645015391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,18 @@\n-import pyaudio, wave, threading, time, sys, os, sys, contextlib\r\n+import pyaudio, wave, threading, time, sys\r\n \r\n+\r\n class Player(threading.Thread):\r\n     def __init__(self,file):\r\n-        threading.Thread.__init__(self)\r\n         self.wf = wave.open(file)\r\n+        self.p = pyaudio.PyAudio()\r\n \r\n \r\n     def callback(self,in_data, frame_count, time_info, status):\r\n         data = self.wf.readframes(frame_count)\r\n         return (data, pyaudio.paContinue)\r\n \r\n-    @contextlib.contextmanager\r\n     def run(self):\r\n-        devnull = os.open(os.devnull, os.O_WRONLY)\r\n-        old_stderr = os.dup(2)\r\n-        sys.stderr.flush()\r\n-        os.dup2(devnull, 2)\r\n-        os.close(devnull)\r\n-        try: \r\n-            yield\r\n-        \r\n-        finally:\r\n-            os.dup2(old_stderr,2)\r\n-            os.close(old_stderr)\r\n-        self.p = pyaudio.PyAudio()\r\n-        print(\"playing song....\")\r\n         stream = self.p.open(format=self.p.get_format_from_width(self.wf.getsampwidth()),\r\n                         channels=self.wf.getnchannels(),\r\n                         rate=self.wf.getframerate(),\r\n                         output=True,\r\n"
                },
                {
                    "date": 1654645025006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \r\n \r\n class Player(threading.Thread):\r\n     def __init__(self,file):\r\n+        threading.Thread.__init__(self)\r\n         self.wf = wave.open(file)\r\n         self.p = pyaudio.PyAudio()\r\n \r\n \r\n@@ -11,8 +12,9 @@\n         data = self.wf.readframes(frame_count)\r\n         return (data, pyaudio.paContinue)\r\n \r\n     def run(self):\r\n+        \r\n         stream = self.p.open(format=self.p.get_format_from_width(self.wf.getsampwidth()),\r\n                         channels=self.wf.getnchannels(),\r\n                         rate=self.wf.getframerate(),\r\n                         output=True,\r\n"
                },
                {
                    "date": 1654720457197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,29 +5,31 @@\n     def __init__(self,file):\r\n         threading.Thread.__init__(self)\r\n         self.wf = wave.open(file)\r\n         self.p = pyaudio.PyAudio()\r\n+        self.flag = True\r\n \r\n-\r\n     def callback(self,in_data, frame_count, time_info, status):\r\n         data = self.wf.readframes(frame_count)\r\n         return (data, pyaudio.paContinue)\r\n \r\n+    def stopThread(self):\r\n+        self.flag = False\r\n     def run(self):\r\n-        \r\n-        stream = self.p.open(format=self.p.get_format_from_width(self.wf.getsampwidth()),\r\n-                        channels=self.wf.getnchannels(),\r\n-                        rate=self.wf.getframerate(),\r\n-                        output=True,\r\n-                        stream_callback=self.callback)\r\n+        while self.flag:\r\n+            stream = self.p.open(format=self.p.get_format_from_width(self.wf.getsampwidth()),\r\n+                            channels=self.wf.getnchannels(),\r\n+                            rate=self.wf.getframerate(),\r\n+                            output=True,\r\n+                            stream_callback=self.callback)\r\n \r\n-        stream.start_stream()\r\n-        while stream.is_active():\r\n-            time.sleep(0.1)\r\n-        stream.stop_stream()\r\n-        stream.close()\r\n-        self.wf.close()\r\n-        self.p.terminate()\r\n+            stream.start_stream()\r\n+            while stream.is_active():\r\n+                time.sleep(0.1)\r\n+            stream.stop_stream()\r\n+            stream.close()\r\n+            self.wf.close()\r\n+            self.p.terminate()\r\n \r\n def main():\r\n     file = sys.argv[1]\r\n     Player(file).run()\r\n"
                },
                {
                    "date": 1654725573833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,13 +29,6 @@\n             stream.close()\r\n             self.wf.close()\r\n             self.p.terminate()\r\n \r\n-def main():\r\n-    file = sys.argv[1]\r\n-    Player(file).run()\r\n \r\n-if __name__ == '__main__':\r\n-    main()\r\n-    \r\n \r\n-\r\n"
                },
                {
                    "date": 1654725821440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,25 +6,31 @@\n         threading.Thread.__init__(self)\r\n         self.wf = wave.open(file)\r\n         self.p = pyaudio.PyAudio()\r\n         self.flag = True\r\n+        self._stop = threading.Event()\r\n \r\n     def callback(self,in_data, frame_count, time_info, status):\r\n         data = self.wf.readframes(frame_count)\r\n         return (data, pyaudio.paContinue)\r\n \r\n-    def stopThread(self):\r\n-        self.flag = False\r\n+    def stop(self):\r\n+        self._stop.set()\r\n+\r\n+    def stopped(self):\r\n+        return self._stop.isSet()\r\n+    \r\n     def run(self):\r\n-        while self.flag:\r\n             stream = self.p.open(format=self.p.get_format_from_width(self.wf.getsampwidth()),\r\n                             channels=self.wf.getnchannels(),\r\n                             rate=self.wf.getframerate(),\r\n                             output=True,\r\n                             stream_callback=self.callback)\r\n \r\n             stream.start_stream()\r\n             while stream.is_active():\r\n+                if self.stopped():\r\n+                    return\r\n                 time.sleep(0.1)\r\n             stream.stop_stream()\r\n             stream.close()\r\n             self.wf.close()\r\n"
                },
                {
                    "date": 1654725853824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \r\n \r\n class Player(threading.Thread):\r\n     def __init__(self,file):\r\n+        super(myThread,self).__init__(*args,**kwargs)\r\n         threading.Thread.__init__(self)\r\n         self.wf = wave.open(file)\r\n         self.p = pyaudio.PyAudio()\r\n         self.flag = True\r\n"
                },
                {
                    "date": 1654725867912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n \r\n class Player(threading.Thread):\r\n     def __init__(self,file):\r\n-        super(myThread,self).__init__(*args,**kwargs)\r\n+        super(Player,self).__init__(*args,**kwargs)\r\n         threading.Thread.__init__(self)\r\n         self.wf = wave.open(file)\r\n         self.p = pyaudio.PyAudio()\r\n         self.flag = True\r\n"
                },
                {
                    "date": 1654725923346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n \r\n \r\n class Player(threading.Thread):\r\n     def __init__(self,file):\r\n-        super(Player,self).__init__(*args,**kwargs)\r\n         threading.Thread.__init__(self)\r\n         self.wf = wave.open(file)\r\n         self.p = pyaudio.PyAudio()\r\n         self.flag = True\r\n"
                },
                {
                    "date": 1654726001666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n import pyaudio, wave, threading, time, sys\r\n \r\n \r\n class Player(threading.Thread):\r\n+    \r\n     def __init__(self,file):\r\n+        \r\n         threading.Thread.__init__(self)\r\n         self.wf = wave.open(file)\r\n         self.p = pyaudio.PyAudio()\r\n         self.flag = True\r\n"
                },
                {
                    "date": 1654726155106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,36 +7,29 @@\n         \r\n         threading.Thread.__init__(self)\r\n         self.wf = wave.open(file)\r\n         self.p = pyaudio.PyAudio()\r\n-        self.flag = True\r\n-        self._stop = threading.Event()\r\n \r\n     def callback(self,in_data, frame_count, time_info, status):\r\n         data = self.wf.readframes(frame_count)\r\n         return (data, pyaudio.paContinue)\r\n-\r\n-    def stop(self):\r\n-        self._stop.set()\r\n-\r\n-    def stopped(self):\r\n-        return self._stop.isSet()\r\n     \r\n     def run(self):\r\n-            stream = self.p.open(format=self.p.get_format_from_width(self.wf.getsampwidth()),\r\n-                            channels=self.wf.getnchannels(),\r\n-                            rate=self.wf.getframerate(),\r\n-                            output=True,\r\n-                            stream_callback=self.callback)\r\n+        global stopThreads\r\n+        stream = self.p.open(format=self.p.get_format_from_width(self.wf.getsampwidth()),\r\n+                        channels=self.wf.getnchannels(),\r\n+                        rate=self.wf.getframerate(),\r\n+                        output=True,\r\n+                        stream_callback=self.callback)\r\n \r\n-            stream.start_stream()\r\n-            while stream.is_active():\r\n-                if self.stopped():\r\n-                    return\r\n-                time.sleep(0.1)\r\n-            stream.stop_stream()\r\n-            stream.close()\r\n-            self.wf.close()\r\n-            self.p.terminate()\r\n+        stream.start_stream()\r\n+        while stream.is_active():\r\n+            if stopThreads:\r\n+                break\r\n+            time.sleep(0.1)\r\n+        stream.stop_stream()\r\n+        stream.close()\r\n+        self.wf.close()\r\n+        self.p.terminate()\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1654726299562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,42 @@\n import pyaudio, wave, threading, time, sys\r\n \r\n \r\n class Player(threading.Thread):\r\n-    \r\n     def __init__(self,file):\r\n-        \r\n         threading.Thread.__init__(self)\r\n         self.wf = wave.open(file)\r\n         self.p = pyaudio.PyAudio()\r\n+        self.flag = True\r\n \r\n     def callback(self,in_data, frame_count, time_info, status):\r\n         data = self.wf.readframes(frame_count)\r\n         return (data, pyaudio.paContinue)\r\n-    \r\n+\r\n+    def stopThread(self):\r\n+        self.flag = False\r\n     def run(self):\r\n-        global stopThreads\r\n         stream = self.p.open(format=self.p.get_format_from_width(self.wf.getsampwidth()),\r\n                         channels=self.wf.getnchannels(),\r\n                         rate=self.wf.getframerate(),\r\n                         output=True,\r\n                         stream_callback=self.callback)\r\n \r\n         stream.start_stream()\r\n         while stream.is_active():\r\n-            if stopThreads:\r\n+            if self.flag:\r\n                 break\r\n             time.sleep(0.1)\r\n         stream.stop_stream()\r\n         stream.close()\r\n         self.wf.close()\r\n         self.p.terminate()\r\n \r\n+def main():\r\n+    file = sys.argv[1]\r\n+    Player(file).run()\r\n \r\n+if __name__ == '__main__':\r\n+    main()\r\n+    \r\n \r\n+\r\n"
                },
                {
                    "date": 1654726340907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n                         stream_callback=self.callback)\r\n \r\n         stream.start_stream()\r\n         while stream.is_active():\r\n-            if self.flag:\r\n+            if not self.flag:\r\n                 break\r\n             time.sleep(0.1)\r\n         stream.stop_stream()\r\n         stream.close()\r\n"
                }
            ],
            "date": 1654642618240,
            "name": "Commit-0",
            "content": "import pyaudio, wave, threading, time, sys\r\n\r\n\r\nclass Player(threading.Thread):\r\n    def __init__(self,file):\r\n        threading.Thread.__init__(self)\r\n        self.wf = wave.open(file)\r\n        self.p = pyaudio.PyAudio()\r\n\r\n\r\n    def callback(self,in_data, frame_count, time_info, status):\r\n        data = self.wf.readframes(frame_count)\r\n        return (data, pyaudio.paContinue)\r\n\r\n    def run(self):\r\n        stream = self.p.open(format=self.p.get_format_from_width(self.wf.getsampwidth()),\r\n                        channels=self.wf.getnchannels(),\r\n                        rate=self.wf.getframerate(),\r\n                        output=True,\r\n                        stream_callback=self.callback)\r\n\r\n        stream.start_stream()\r\n        while stream.is_active():\r\n            time.sleep(0.1)\r\n        stream.stop_stream()\r\n        stream.close()\r\n        self.wf.close()\r\n        self.p.terminate()\r\n\r\ndef main():\r\n    file = sys.argv[1]\r\n    Player(file).run()\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n    \r\n\r\n\r\n"
        }
    ]
}