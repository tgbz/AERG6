{
    "sourceFile": "DTN/server.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 235,
            "patches": [
                {
                    "date": 1654615308058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1654615314123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,18 +16,8 @@\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind((':', self.port))\r\n         self.buffer = 2048\r\n         self.hostname = socket.gethostname()\r\n-    \r\n-        def __init__(self):\r\n-            threading.Thread.__init__(self)\r\n-        self.port = 8081\r\n-        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n-        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,1)\r\n-        self.socket.bind(('', self.port))\r\n-        self.buffer = 2048\r\n-        self.hostname = socket.gethostname()\r\n-        \r\n     def addClient(self, hostname, addr, port):\r\n         global connectedClients, nClients\r\n         if hostname not in connectedClients.keys():\r\n             connectedClients[hostname] = {\r\n"
                },
                {
                    "date": 1654615967727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import threading, time, sys, json, random, socket\r\n+import threading, time, sys, json, random, socket, pprint\r\n \r\n #Global Vars\r\n conClients = dict()\r\n rConClients = dict()\r\n@@ -57,9 +57,32 @@\n                     print(\"disconnect ack sent to \" + msg[1])\r\n                 else:\r\n                     self.socket.sendto(\"You are not connected\".encode(), addr)\r\n \r\n+\r\n+class GameServer(threading.Thread):\r\n+    def __init__(self, rounds, gameSize):\r\n+        self.rounds = rounds #Numero de rondas associadas a cada jogo\r\n+        self.gameSize = gameSize #Numero de jogadores por jogo\r\n+        self.gameClients = dict()\r\n+        self.port = 8080\r\n+        self.clientsAnswers = dict()\r\n+        self.gameSolutions = dict()\r\n+        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n+        self.socket.bind(('', self.port))\r\n+        self.buffer = 2048\r\n         \r\n+    def selectClientsForGame(self):\r\n+        global connectedClients\r\n+        #go over connectedClients and random clients for game who have the status = 1, change status to 2\r\n+        #and add them to the game\r\n+        for client in connectedClients:\r\n+            if connectedClients[client][\"status\"] == 1:\r\n+                connectedClients[client][\"status\"] = 2\r\n+                self.gameClients[client] = connectedClients[client]\r\n+        print(\"Selected Clients for game: \")\r\n+        pprint.pprint(self.gameClients)\r\n \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1654615985708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,23 @@\n                 self.gameClients[client] = connectedClients[client]\r\n         print(\"Selected Clients for game: \")\r\n         pprint.pprint(self.gameClients)\r\n \r\n+    def getWinner(self):   \r\n+        winner = None\r\n+        winnerScore = 0\r\n+        winnerTime = 0\r\n+        for client in self.clientsAnswers:\r\n+            score = 0\r\n+            for round in self.clientsAnswers[client]:\r\n+                if self.clientsAnswers[client][round][\"answer\"] == self.gameSolutions[round]:\r\n+                    score += 1\r\n+                    time = self.clientsAnswers[client][round][\"time\"]\r\n+            if score > winnerScore and time < winnerTime:\r\n+                winner = client\r\n+                winnerScore = score\r\n+                winnerTime = time\r\n+        return winner\r\n \r\n \r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654616689280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,15 @@\n-import threading, time, sys, json, random, socket, pprint\r\n+import threading, time, sys, json, random, socket, pprint, pickle\r\n \r\n #Global Vars\r\n conClients = dict()\r\n rConClients = dict()\r\n nClients = 0\r\n \r\n+gameData = dict()\r\n \r\n+\r\n+\r\n #Classe para gestão de autenticação de clients\r\n \r\n class ClientsManager(threading.Thread):\r\n     def __init__(self):\r\n@@ -98,8 +101,49 @@\n                 winnerScore = score\r\n                 winnerTime = time\r\n         return winner\r\n \r\n+    def run(self):\r\n+        while nClients < self.gameSize:\r\n+            time.sleep(1)\r\n+        self.selectClientsForGame()\r\n+        #\r\n \r\n \r\n+class clientGame(threading.Thread):\r\n+    def __init__(self, addr, port, socket, gameOptions, gameSolutions):\r\n+        self.addr = addr\r\n+        self.port = port\r\n+        self.socket = socket\r\n+        self.gameOptions = gameOptions\r\n+        self.gameSolutions = gameSolutions\r\n+        self.buffer = 2048\r\n+    \r\n+    def startGame(self):\r\n+        #send message to client to start game\r\n+        self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n+        #wait for client to start game\r\n+        data, addr = self.socket.recvfrom(self.buffer)\r\n+        if data.decode() == \"gameStart-ack\":\r\n+            print(\"Game started\")\r\n+            return 1\r\n+    def sendGameOptions(self):\r\n+        #send the game options via pickle to client\r\n+        self.socket.sendto(pickle.dumps(self.gameOptions), (self.addr, self.port))\r\n+        #wait for client to receive game options\r\n+        data, addr = self.socket.recvfrom(self.buffer)\r\n+        if data.decode() == \"gameOptions-ack\":\r\n+            print(\"Game options sent\")\r\n+            return 1\r\n+    def run(self):\r\n+        self.startGame()\r\n+        self.sendGameOptions()\r\n+        data, recv = self.socket.recvfrom(self.buffer)\r\n+        if pickle.loads(data):\r\n+            options = dict()\r\n+            options = pickle.loads(data)\r\n+            print(\"Game Options Received...\")\r\n+            return 1\r\n+        return options\r\n+\r\n def main():\r\n     connectedClients = dict()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654617146205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,12 +105,13 @@\n     def run(self):\r\n         while nClients < self.gameSize:\r\n             time.sleep(1)\r\n         self.selectClientsForGame()\r\n-        #\r\n+        for client in self.gameClients:\r\n+            cg = ClientGame(self.gameClients[client][\"addr\"], self.port, self.gameOptions, self.gameSolutions)\r\n+            cg.start()\r\n \r\n-\r\n-class clientGame(threading.Thread):\r\n+class ClientGame(threading.Thread):\r\n     def __init__(self, addr, port, socket, gameOptions, gameSolutions):\r\n         self.addr = addr\r\n         self.port = port\r\n         self.socket = socket\r\n"
                },
                {
                    "date": 1654617176600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,10 +106,11 @@\n         while nClients < self.gameSize:\r\n             time.sleep(1)\r\n         self.selectClientsForGame()\r\n         for client in self.gameClients:\r\n-            cg = ClientGame(self.gameClients[client][\"addr\"], self.port, self.gameOptions, self.gameSolutions)\r\n+            cg = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             cg.start()\r\n+            \r\n \r\n class ClientGame(threading.Thread):\r\n     def __init__(self, addr, port, socket, gameOptions, gameSolutions):\r\n         self.addr = addr\r\n"
                },
                {
                    "date": 1654617203772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import threading, time, sys, json, random, socket, pprint, pickle\r\n+import threading, time, sys, json, random, socket, pprint, pickle, gameGenerator\r\n \r\n #Global Vars\r\n conClients = dict()\r\n rConClients = dict()\r\n@@ -105,8 +105,9 @@\n     def run(self):\r\n         while nClients < self.gameSize:\r\n             time.sleep(1)\r\n         self.selectClientsForGame()\r\n+        gg = \r\n         for client in self.gameClients:\r\n             cg = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             cg.start()\r\n             \r\n"
                },
                {
                    "date": 1654617399244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,9 @@\n         self.socket = socket\r\n         self.gameOptions = gameOptions\r\n         self.gameSolutions = gameSolutions\r\n         self.buffer = 2048\r\n+        self._return = None\r\n     \r\n     def startGame(self):\r\n         #send message to client to start game\r\n         self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n"
                },
                {
                    "date": 1654617466441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,8 +137,9 @@\n         data, addr = self.socket.recvfrom(self.buffer)\r\n         if data.decode() == \"gameOptions-ack\":\r\n             print(\"Game options sent\")\r\n             return 1\r\n+        \r\n     def run(self):\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         data, recv = self.socket.recvfrom(self.buffer)\r\n@@ -146,8 +147,10 @@\n             options = dict()\r\n             options = pickle.loads(data)\r\n             print(\"Game Options Received...\")\r\n             return 1\r\n-        return options\r\n+        self._return = options\r\n+    def join(self):\r\n+        return self._return\r\n \r\n def main():\r\n     connectedClients = dict()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654617482293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n     def run(self):\r\n         while nClients < self.gameSize:\r\n             time.sleep(1)\r\n         self.selectClientsForGame()\r\n-        gg = \r\n+        gg = gameGenerator.GameGenerator(self.gameSize, self.rounds)\r\n         for client in self.gameClients:\r\n             cg = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             cg.start()\r\n             \r\n@@ -137,9 +137,8 @@\n         data, addr = self.socket.recvfrom(self.buffer)\r\n         if data.decode() == \"gameOptions-ack\":\r\n             print(\"Game options sent\")\r\n             return 1\r\n-        \r\n     def run(self):\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         data, recv = self.socket.recvfrom(self.buffer)\r\n"
                },
                {
                    "date": 1654617565742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,9 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         self.buffer = 2048\r\n+        self.threadPool = []\r\n         \r\n     def selectClientsForGame(self):\r\n         global connectedClients\r\n         #go over connectedClients and random clients for game who have the status = 1, change status to 2\r\n@@ -110,8 +111,9 @@\n         for client in self.gameClients:\r\n             cg = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             cg.start()\r\n             \r\n+            \r\n \r\n class ClientGame(threading.Thread):\r\n     def __init__(self, addr, port, socket, gameOptions, gameSolutions):\r\n         self.addr = addr\r\n"
                },
                {
                    "date": 1654617757170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,9 @@\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         self.buffer = 2048\r\n         self.threadPool = []\r\n+        self.GameResults = []\r\n         \r\n     def selectClientsForGame(self):\r\n         global connectedClients\r\n         #go over connectedClients and random clients for game who have the status = 1, change status to 2\r\n@@ -108,10 +109,13 @@\n             time.sleep(1)\r\n         self.selectClientsForGame()\r\n         gg = gameGenerator.GameGenerator(self.gameSize, self.rounds)\r\n         for client in self.gameClients:\r\n-            cg = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n-            cg.start()\r\n+            i = 0\r\n+            self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n+            self.threadPool[i].start()\r\n+            i+=1\r\n+        for client in self.GameClients:\r\n             \r\n             \r\n \r\n class ClientGame(threading.Thread):\r\n"
                },
                {
                    "date": 1654617792565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,10 +114,12 @@\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i+=1\r\n         for client in self.GameClients:\r\n+            i = 0\r\n+            self.GameResults[client] = self.threadPool[i].join()\r\n+            i+=1\r\n             \r\n-            \r\n \r\n class ClientGame(threading.Thread):\r\n     def __init__(self, addr, port, socket, gameOptions, gameSolutions):\r\n         self.addr = addr\r\n"
                },
                {
                    "date": 1654617803964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,8 +117,10 @@\n         for client in self.GameClients:\r\n             i = 0\r\n             self.GameResults[client] = self.threadPool[i].join()\r\n             i+=1\r\n+        print(\"Game Results: \")\r\n+        pprint.pprint(self.GameResults)\r\n             \r\n \r\n class ClientGame(threading.Thread):\r\n     def __init__(self, addr, port, socket, gameOptions, gameSolutions):\r\n"
                },
                {
                    "date": 1654617843083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,8 +108,9 @@\n         while nClients < self.gameSize:\r\n             time.sleep(1)\r\n         self.selectClientsForGame()\r\n         gg = gameGenerator.GameGenerator(self.gameSize, self.rounds)\r\n+        self.gameSolutions, self.gameData = gg.generateGame()\r\n         for client in self.gameClients:\r\n             i = 0\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n"
                },
                {
                    "date": 1654617867626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,5 +162,8 @@\n     def join(self):\r\n         return self._return\r\n \r\n def main():\r\n-    connectedClients = dict()\n\\ No newline at end of file\n+    connectedClients = dict()\r\n+    \r\n+if __name__ == \"__main__\":\r\n+    main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654617883133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,8 +162,10 @@\n     def join(self):\r\n         return self._return\r\n \r\n def main():\r\n-    connectedClients = dict()\r\n+    ch = ClientHandler()\r\n+    ch.start()\r\n+    gM = GameServer(10, 4)\r\n     \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654617941418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,10 +162,11 @@\n     def join(self):\r\n         return self._return\r\n \r\n def main():\r\n-    ch = ClientHandler()\r\n-    ch.start()\r\n-    gM = GameServer(10, 4)\r\n+    cm = ClientsManager()\r\n+    cm.start()\r\n+    gm = GameServer(3, 2)\r\n+    gm.start()\r\n     \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654617950814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         threading.Thread.__init__(self)\r\n         self.port = 8081\r\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-        self.socket.bind((':', self.port))\r\n+        self.socket.bind(('', self.port))\r\n         self.buffer = 2048\r\n         self.hostname = socket.gethostname()\r\n     def addClient(self, hostname, addr, port):\r\n         global connectedClients, nClients\r\n"
                },
                {
                    "date": 1654617965447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,9 @@\n \r\n \r\n class GameServer(threading.Thread):\r\n     def __init__(self, rounds, gameSize):\r\n+        threading.Thread.__init__(self)\r\n         self.rounds = rounds #Numero de rondas associadas a cada jogo\r\n         self.gameSize = gameSize #Numero de jogadores por jogo\r\n         self.gameClients = dict()\r\n         self.port = 8080\r\n"
                },
                {
                    "date": 1654617977830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,8 +125,9 @@\n             \r\n \r\n class ClientGame(threading.Thread):\r\n     def __init__(self, addr, port, socket, gameOptions, gameSolutions):\r\n+        threading.Thread.__init__(self)\r\n         self.addr = addr\r\n         self.port = port\r\n         self.socket = socket\r\n         self.gameOptions = gameOptions\r\n"
                },
                {
                    "date": 1654618020993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,11 @@\n         self.socket.bind(('', self.port))\r\n         self.buffer = 2048\r\n         self.hostname = socket.gethostname()\r\n     def addClient(self, hostname, addr, port):\r\n-        global connectedClients, nClients\r\n-        if hostname not in connectedClients.keys():\r\n-            connectedClients[hostname] = {\r\n+        global conClients, nClients\r\n+        if hostname not in conClients.keys():\r\n+            conClients[hostname] = {\r\n                 \"addr\": addr,\r\n                 \"status\": 1, #0 = not connected, 1 = connected, 2 = ready, 3 = ingame\r\n             }\r\n             nClients += 1\r\n@@ -34,17 +34,17 @@\n             print(\"Client \" + hostname + \" already exists\")\r\n             return 0\r\n         \r\n     def removeClient(self, hostname):\r\n-        if hostname in connectedClients.keys():\r\n-            connectedClients.pop(hostname)\r\n+        if hostname in conClients.keys():\r\n+            conClients.pop(hostname)\r\n             print(\"Client \" + hostname + \" removed\")\r\n             return 1\r\n         else:\r\n             print(\"Client \" + hostname + \" not found\")\r\n             return 0\r\n     def run(self):\r\n-        global connectedClients, nClients\r\n+        global conClients, nClients\r\n         print(\"À espera de clientes...\")\r\n         while True:\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             msg = data.decode().split('-')\r\n@@ -78,15 +78,15 @@\n         self.threadPool = []\r\n         self.GameResults = []\r\n         \r\n     def selectClientsForGame(self):\r\n-        global connectedClients\r\n-        #go over connectedClients and random clients for game who have the status = 1, change status to 2\r\n+        global conClients\r\n+        #go over conClients and random clients for game who have the status = 1, change status to 2\r\n         #and add them to the game\r\n-        for client in connectedClients:\r\n-            if connectedClients[client][\"status\"] == 1:\r\n-                connectedClients[client][\"status\"] = 2\r\n-                self.gameClients[client] = connectedClients[client]\r\n+        for client in conClients:\r\n+            if conClients[client][\"status\"] == 1:\r\n+                conClients[client][\"status\"] = 2\r\n+                self.gameClients[client] = conClients[client]\r\n         print(\"Selected Clients for game: \")\r\n         pprint.pprint(self.gameClients)\r\n \r\n     def getWinner(self):   \r\n"
                },
                {
                    "date": 1654618047509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n     def run(self):\r\n         while nClients < self.gameSize:\r\n             time.sleep(1)\r\n         self.selectClientsForGame()\r\n-        gg = gameGenerator.GameGenerator(self.gameSize, self.rounds)\r\n+        gg = gameGenerator.gameGenerator(self.gameSize, self.rounds)\r\n         self.gameSolutions, self.gameData = gg.generateGame()\r\n         for client in self.gameClients:\r\n             i = 0\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n"
                },
                {
                    "date": 1654618066250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n     def run(self):\r\n         while nClients < self.gameSize:\r\n             time.sleep(1)\r\n         self.selectClientsForGame()\r\n-        gg = gameGenerator.gameGenerator(self.gameSize, self.rounds)\r\n+        gg = gameGenerator.gameGenerator(self.rounds)\r\n         self.gameSolutions, self.gameData = gg.generateGame()\r\n         for client in self.gameClients:\r\n             i = 0\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n"
                },
                {
                    "date": 1654618181888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,11 @@\n         while nClients < self.gameSize:\r\n             time.sleep(1)\r\n         self.selectClientsForGame()\r\n         gg = gameGenerator.gameGenerator(self.rounds)\r\n-        self.gameSolutions, self.gameData = gg.generateGame()\r\n+        gg.generateGame()\r\n+        self.gameSolutions = gg.getSongs()\r\n+        self.gameOptions = gg.getOptions()\r\n         for client in self.gameClients:\r\n             i = 0\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n"
                },
                {
                    "date": 1654618214996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,8 +114,9 @@\n         self.gameSolutions = gg.getSongs()\r\n         self.gameOptions = gg.getOptions()\r\n         for client in self.gameClients:\r\n             i = 0\r\n+            print(self.threadPool[i])\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i+=1\r\n         for client in self.GameClients:\r\n"
                },
                {
                    "date": 1654620703804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         self.buffer = 2048\r\n-        self.threadPool = []\r\n+        self.threadPool = []*self.gameSize\r\n         self.GameResults = []\r\n         \r\n     def selectClientsForGame(self):\r\n         global conClients\r\n"
                },
                {
                    "date": 1654620824087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         self.buffer = 2048\r\n-        self.threadPool = []*self.gameSize\r\n+        self.threadPool = [None]*self.gameSize\r\n         self.GameResults = []\r\n         \r\n     def selectClientsForGame(self):\r\n         global conClients\r\n"
                },
                {
                    "date": 1654620858755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n             print(self.threadPool[i])\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i+=1\r\n-        for client in self.GameClients:\r\n+        for client in self.gameClients:\r\n             i = 0\r\n             self.GameResults[client] = self.threadPool[i].join()\r\n             i+=1\r\n         print(\"Game Results: \")\r\n"
                },
                {
                    "date": 1654620908671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,10 +119,10 @@\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i+=1\r\n         for client in self.gameClients:\r\n-            i = 0\r\n-            self.GameResults[client] = self.threadPool[i].join()\r\n+            i = int(0)\r\n+            self.GameResults[i] = self.threadPool[i].join()\r\n             i+=1\r\n         print(\"Game Results: \")\r\n         pprint.pprint(self.GameResults)\r\n             \r\n"
                },
                {
                    "date": 1654620928721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         self.buffer = 2048\r\n         self.threadPool = [None]*self.gameSize\r\n-        self.GameResults = []\r\n+        self.GameResults = [None]*self.gameSize\r\n         \r\n     def selectClientsForGame(self):\r\n         global conClients\r\n         #go over conClients and random clients for game who have the status = 1, change status to 2\r\n"
                },
                {
                    "date": 1654621050238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,11 +118,11 @@\n             print(self.threadPool[i])\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i+=1\r\n-        for client in self.gameClients:\r\n-            i = int(0)\r\n-            self.GameResults[i] = self.threadPool[i].join()\r\n+        for thread in self.threadPool:\r\n+            i = 0\r\n+            self.GameResults[i]=thread.join()\r\n             i+=1\r\n         print(\"Game Results: \")\r\n         pprint.pprint(self.GameResults)\r\n             \r\n"
                },
                {
                    "date": 1654621091377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,8 +118,9 @@\n             print(self.threadPool[i])\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i+=1\r\n+        print(self.threadPool)\r\n         for thread in self.threadPool:\r\n             i = 0\r\n             self.GameResults[i]=thread.join()\r\n             i+=1\r\n"
                },
                {
                    "date": 1654621117555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,8 @@\n         self.gameSolutions = gg.getSongs()\r\n         self.gameOptions = gg.getOptions()\r\n         for client in self.gameClients:\r\n             i = 0\r\n-            print(self.threadPool[i])\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i+=1\r\n         print(self.threadPool)\r\n"
                },
                {
                    "date": 1654621136508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,15 +113,15 @@\n         gg.generateGame()\r\n         self.gameSolutions = gg.getSongs()\r\n         self.gameOptions = gg.getOptions()\r\n         for client in self.gameClients:\r\n-            i = 0\r\n+            i = 1\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i+=1\r\n         print(self.threadPool)\r\n         for thread in self.threadPool:\r\n-            i = 0\r\n+            i = 1\r\n             self.GameResults[i]=thread.join()\r\n             i+=1\r\n         print(\"Game Results: \")\r\n         pprint.pprint(self.GameResults)\r\n"
                },
                {
                    "date": 1654621142381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,12 +113,12 @@\n         gg.generateGame()\r\n         self.gameSolutions = gg.getSongs()\r\n         self.gameOptions = gg.getOptions()\r\n         for client in self.gameClients:\r\n-            i = 1\r\n+            i = 0\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n-            i+=1\r\n+            i+=0\r\n         print(self.threadPool)\r\n         for thread in self.threadPool:\r\n             i = 1\r\n             self.GameResults[i]=thread.join()\r\n"
                },
                {
                    "date": 1654621155535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,12 +113,12 @@\n         gg.generateGame()\r\n         self.gameSolutions = gg.getSongs()\r\n         self.gameOptions = gg.getOptions()\r\n         for client in self.gameClients:\r\n-            i = 0\r\n+            i = 1\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n-            i+=0\r\n+            i+=1\r\n         print(self.threadPool)\r\n         for thread in self.threadPool:\r\n             i = 1\r\n             self.GameResults[i]=thread.join()\r\n"
                },
                {
                    "date": 1654621173816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,15 +113,15 @@\n         gg.generateGame()\r\n         self.gameSolutions = gg.getSongs()\r\n         self.gameOptions = gg.getOptions()\r\n         for client in self.gameClients:\r\n-            i = 1\r\n+            i = 0\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i+=1\r\n         print(self.threadPool)\r\n         for thread in self.threadPool:\r\n-            i = 1\r\n+            i = 0\r\n             self.GameResults[i]=thread.join()\r\n             i+=1\r\n         print(\"Game Results: \")\r\n         pprint.pprint(self.GameResults)\r\n"
                },
                {
                    "date": 1654621191556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,8 +112,9 @@\n         gg = gameGenerator.gameGenerator(self.rounds)\r\n         gg.generateGame()\r\n         self.gameSolutions = gg.getSongs()\r\n         self.gameOptions = gg.getOptions()\r\n+        print(self.gameClients)\r\n         for client in self.gameClients:\r\n             i = 0\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n"
                },
                {
                    "date": 1654621197649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n         gg = gameGenerator.gameGenerator(self.rounds)\r\n         gg.generateGame()\r\n         self.gameSolutions = gg.getSongs()\r\n         self.gameOptions = gg.getOptions()\r\n-        print(self.gameClients)\r\n+        pprint.pprint(self.gameClients)\r\n         for client in self.gameClients:\r\n             i = 0\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n"
                },
                {
                    "date": 1654621230291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,14 +119,14 @@\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i+=1\r\n         print(self.threadPool)\r\n-        for thread in self.threadPool:\r\n+       '''  for thread in self.threadPool:\r\n             i = 0\r\n             self.GameResults[i]=thread.join()\r\n             i+=1\r\n         print(\"Game Results: \")\r\n-        pprint.pprint(self.GameResults)\r\n+        pprint.pprint(self.GameResults) '''\r\n             \r\n \r\n class ClientGame(threading.Thread):\r\n     def __init__(self, addr, port, socket, gameOptions, gameSolutions):\r\n"
                },
                {
                    "date": 1654621246861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,14 +119,14 @@\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i+=1\r\n         print(self.threadPool)\r\n-       '''  for thread in self.threadPool:\r\n+        for thread in self.threadPool:\r\n             i = 0\r\n             self.GameResults[i]=thread.join()\r\n             i+=1\r\n         print(\"Game Results: \")\r\n-        pprint.pprint(self.GameResults) '''\r\n+        pprint.pprint(self.GameResults)\r\n             \r\n \r\n class ClientGame(threading.Thread):\r\n     def __init__(self, addr, port, socket, gameOptions, gameSolutions):\r\n"
                },
                {
                    "date": 1654621264360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n         for client in self.gameClients:\r\n             i = 0\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n-            i+=1\r\n+            i = i + 1\r\n         print(self.threadPool)\r\n         for thread in self.threadPool:\r\n             i = 0\r\n             self.GameResults[i]=thread.join()\r\n"
                },
                {
                    "date": 1654621282543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,8 +115,9 @@\n         self.gameOptions = gg.getOptions()\r\n         pprint.pprint(self.gameClients)\r\n         for client in self.gameClients:\r\n             i = 0\r\n+            print(\"startedThread\")\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i = i + 1\r\n         print(self.threadPool)\r\n"
                },
                {
                    "date": 1654621303332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,8 +114,9 @@\n         self.gameSolutions = gg.getSongs()\r\n         self.gameOptions = gg.getOptions()\r\n         pprint.pprint(self.gameClients)\r\n         for client in self.gameClients:\r\n+            print(i)\r\n             i = 0\r\n             print(\"startedThread\")\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n"
                },
                {
                    "date": 1654621315098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,11 +113,11 @@\n         gg.generateGame()\r\n         self.gameSolutions = gg.getSongs()\r\n         self.gameOptions = gg.getOptions()\r\n         pprint.pprint(self.gameClients)\r\n+        i = 0\r\n         for client in self.gameClients:\r\n             print(i)\r\n-            i = 0\r\n             print(\"startedThread\")\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i = i + 1\r\n"
                },
                {
                    "date": 1654621323673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,10 +121,10 @@\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i = i + 1\r\n         print(self.threadPool)\r\n+        i=0\r\n         for thread in self.threadPool:\r\n-            i = 0\r\n             self.GameResults[i]=thread.join()\r\n             i+=1\r\n         print(\"Game Results: \")\r\n         pprint.pprint(self.GameResults)\r\n"
                },
                {
                    "date": 1654621946600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,8 +128,9 @@\n             i+=1\r\n         print(\"Game Results: \")\r\n         pprint.pprint(self.GameResults)\r\n             \r\n+#NEED TO CREATE ARRAY OF ARRAY OF ARRAYS CENAS MORANGO E UJM NERD\r\n \r\n class ClientGame(threading.Thread):\r\n     def __init__(self, addr, port, socket, gameOptions, gameSolutions):\r\n         threading.Thread.__init__(self)\r\n"
                },
                {
                    "date": 1654637012475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,17 +115,16 @@\n         self.gameOptions = gg.getOptions()\r\n         pprint.pprint(self.gameClients)\r\n         i = 0\r\n         for client in self.gameClients:\r\n-            print(i)\r\n             print(\"startedThread\")\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i = i + 1\r\n         print(self.threadPool)\r\n         i=0\r\n         for thread in self.threadPool:\r\n-            self.GameResults[i]=thread.join()\r\n+            thread.join()\r\n             i+=1\r\n         print(\"Game Results: \")\r\n         pprint.pprint(self.GameResults)\r\n             \r\n"
                },
                {
                    "date": 1654637021515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,12 +120,10 @@\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i = i + 1\r\n         print(self.threadPool)\r\n-        i=0\r\n         for thread in self.threadPool:\r\n             thread.join()\r\n-            i+=1\r\n         print(\"Game Results: \")\r\n         pprint.pprint(self.GameResults)\r\n             \r\n #NEED TO CREATE ARRAY OF ARRAY OF ARRAYS CENAS MORANGO E UJM NERD\r\n"
                },
                {
                    "date": 1654637148878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,10 +74,10 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         self.buffer = 2048\r\n-        self.threadPool = [None]*self.gameSize\r\n-        self.GameResults = [None]*self.gameSize\r\n+        self.threadPool = []\r\n+        self.GameResults = []\r\n         \r\n     def selectClientsForGame(self):\r\n         global conClients\r\n         #go over conClients and random clients for game who have the status = 1, change status to 2\r\n@@ -113,9 +113,8 @@\n         gg.generateGame()\r\n         self.gameSolutions = gg.getSongs()\r\n         self.gameOptions = gg.getOptions()\r\n         pprint.pprint(self.gameClients)\r\n-        i = 0\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n"
                },
                {
                    "date": 1654637208435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,8 +115,10 @@\n         self.gameOptions = gg.getOptions()\r\n         pprint.pprint(self.gameClients)\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n+            t = ClientGame(client, self.gameClients[client][\"addr\"], self.gameClients[client][\"port\"], self.gameOptions, self.gameSolutions).start()\r\n+            t.append\r\n             self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool[i].start()\r\n             i = i + 1\r\n         print(self.threadPool)\r\n"
                },
                {
                    "date": 1654637413641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,11 +115,10 @@\n         self.gameOptions = gg.getOptions()\r\n         pprint.pprint(self.gameClients)\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n-            t = ClientGame(client, self.gameClients[client][\"addr\"], self.gameClients[client][\"port\"], self.gameOptions, self.gameSolutions).start()\r\n-            t.append\r\n-            self.threadPool[i] = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n+            t = ClientGame(client, self.gameClients[client][\"addr\"], self.gameClients[client][\"port\"], self.gameOptions, self.gameSolutions)\r\n+            self.threadPool.append(t)\r\n             self.threadPool[i].start()\r\n             i = i + 1\r\n         print(self.threadPool)\r\n         for thread in self.threadPool:\r\n"
                },
                {
                    "date": 1654637425481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,10 +117,8 @@\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n             t = ClientGame(client, self.gameClients[client][\"addr\"], self.gameClients[client][\"port\"], self.gameOptions, self.gameSolutions)\r\n             self.threadPool.append(t)\r\n-            self.threadPool[i].start()\r\n-            i = i + 1\r\n         print(self.threadPool)\r\n         for thread in self.threadPool:\r\n             thread.join()\r\n         print(\"Game Results: \")\r\n"
                },
                {
                    "date": 1654637468295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,17 @@\n             print(\"startedThread\")\r\n             t = ClientGame(client, self.gameClients[client][\"addr\"], self.gameClients[client][\"port\"], self.gameOptions, self.gameSolutions)\r\n             self.threadPool.append(t)\r\n         print(self.threadPool)\r\n+        \r\n+        #start all the threads\r\n         for thread in self.threadPool:\r\n+            thread.start()\r\n+        for thread in self.threadPool:\r\n+            var = thread.join()\r\n+            self.GameResults.append(var)\r\n+        \r\n+        for thread in self.threadPool:\r\n             thread.join()\r\n         print(\"Game Results: \")\r\n         pprint.pprint(self.GameResults)\r\n             \r\n"
                },
                {
                    "date": 1654637473663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,11 +125,8 @@\n             thread.start()\r\n         for thread in self.threadPool:\r\n             var = thread.join()\r\n             self.GameResults.append(var)\r\n-        \r\n-        for thread in self.threadPool:\r\n-            thread.join()\r\n         print(\"Game Results: \")\r\n         pprint.pprint(self.GameResults)\r\n             \r\n #NEED TO CREATE ARRAY OF ARRAY OF ARRAYS CENAS MORANGO E UJM NERD\r\n"
                },
                {
                    "date": 1654637497815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n         self.gameOptions = gg.getOptions()\r\n         pprint.pprint(self.gameClients)\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n-            t = ClientGame(client, self.gameClients[client][\"addr\"], self.gameClients[client][\"port\"], self.gameOptions, self.gameSolutions)\r\n+            t = ClientGame(client, self.gameClients[client][\"addr\"], self.port, self.gameOptions, self.gameSolutions)\r\n             self.threadPool.append(t)\r\n         print(self.threadPool)\r\n         \r\n         #start all the threads\r\n"
                },
                {
                    "date": 1654638455585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n         self.gameOptions = gg.getOptions()\r\n         pprint.pprint(self.gameClients)\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n-            t = ClientGame(client, self.gameClients[client][\"addr\"], self.port, self.gameOptions, self.gameSolutions)\r\n+            t = ClientGame(client, self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool.append(t)\r\n         print(self.threadPool)\r\n         \r\n         #start all the threads\r\n"
                },
                {
                    "date": 1654638483514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n         self.gameOptions = gg.getOptions()\r\n         pprint.pprint(self.gameClients)\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n-            t = ClientGame(client, self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n+            t = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool.append(t)\r\n         print(self.threadPool)\r\n         \r\n         #start all the threads\r\n"
                },
                {
                    "date": 1654638506206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,8 +158,9 @@\n         if data.decode() == \"gameOptions-ack\":\r\n             print(\"Game options sent\")\r\n             return 1\r\n     def run(self):\r\n+        print(\"starting game for \" + self.addr)\")\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         data, recv = self.socket.recvfrom(self.buffer)\r\n         if pickle.loads(data):\r\n"
                },
                {
                    "date": 1654638511400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,9 +158,9 @@\n         if data.decode() == \"gameOptions-ack\":\r\n             print(\"Game options sent\")\r\n             return 1\r\n     def run(self):\r\n-        print(\"starting game for \" + self.addr)\")\r\n+        print(\"starting game for \" + self.addr)\", port: \" + str(self.port))\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         data, recv = self.socket.recvfrom(self.buffer)\r\n         if pickle.loads(data):\r\n"
                },
                {
                    "date": 1654638519916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,9 +158,9 @@\n         if data.decode() == \"gameOptions-ack\":\r\n             print(\"Game options sent\")\r\n             return 1\r\n     def run(self):\r\n-        print(\"starting game for \" + self.addr)\", port: \" + str(self.port))\r\n+        print(\"starting game for \" + self.addr\", port: \" + str(self.port))\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         data, recv = self.socket.recvfrom(self.buffer)\r\n         if pickle.loads(data):\r\n"
                },
                {
                    "date": 1654638527082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,9 +158,9 @@\n         if data.decode() == \"gameOptions-ack\":\r\n             print(\"Game options sent\")\r\n             return 1\r\n     def run(self):\r\n-        print(\"starting game for \" + self.addr\", port: \" + str(self.port))\r\n+        print(\"starting game for \" + str(self.addr)\", port: \" + str(self.port))\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         data, recv = self.socket.recvfrom(self.buffer)\r\n         if pickle.loads(data):\r\n"
                },
                {
                    "date": 1654638543521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,9 +158,9 @@\n         if data.decode() == \"gameOptions-ack\":\r\n             print(\"Game options sent\")\r\n             return 1\r\n     def run(self):\r\n-        print(\"starting game for \" + str(self.addr)\", port: \" + str(self.port))\r\n+        print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         data, recv = self.socket.recvfrom(self.buffer)\r\n         if pickle.loads(data):\r\n"
                },
                {
                    "date": 1654638597923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,10 +144,12 @@\n     \r\n     def startGame(self):\r\n         #send message to client to start game\r\n         self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n+        print(\"gameStart sent to \" + self.addr)\r\n         #wait for client to start game\r\n         data, addr = self.socket.recvfrom(self.buffer)\r\n+        print(\"gameStart received from \" + self.addr)\r\n         if data.decode() == \"gameStart-ack\":\r\n             print(\"Game started\")\r\n             return 1\r\n     def sendGameOptions(self):\r\n"
                },
                {
                    "date": 1654638608436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,8 +154,9 @@\n             return 1\r\n     def sendGameOptions(self):\r\n         #send the game options via pickle to client\r\n         self.socket.sendto(pickle.dumps(self.gameOptions), (self.addr, self.port))\r\n+        print(\"gameOptions sent to \" + self.addr)\r\n         #wait for client to receive game options\r\n         data, addr = self.socket.recvfrom(self.buffer)\r\n         if data.decode() == \"gameOptions-ack\":\r\n             print(\"Game options sent\")\r\n"
                },
                {
                    "date": 1654638624404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,8 +157,9 @@\n         self.socket.sendto(pickle.dumps(self.gameOptions), (self.addr, self.port))\r\n         print(\"gameOptions sent to \" + self.addr)\r\n         #wait for client to receive game options\r\n         data, addr = self.socket.recvfrom(self.buffer)\r\n+        print(\"gameOptions received from \" + self.addr)\r\n         if data.decode() == \"gameOptions-ack\":\r\n             print(\"Game options sent\")\r\n             return 1\r\n     def run(self):\r\n"
                },
                {
                    "date": 1654638691413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,8 +122,9 @@\n         \r\n         #start all the threads\r\n         for thread in self.threadPool:\r\n             thread.start()\r\n+            print(\"thread started\")\r\n         for thread in self.threadPool:\r\n             var = thread.join()\r\n             self.GameResults.append(var)\r\n         print(\"Game Results: \")\r\n"
                },
                {
                    "date": 1654638736209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,13 +123,13 @@\n         #start all the threads\r\n         for thread in self.threadPool:\r\n             thread.start()\r\n             print(\"thread started\")\r\n-        for thread in self.threadPool:\r\n+        ''' for thread in self.threadPool:\r\n             var = thread.join()\r\n             self.GameResults.append(var)\r\n         print(\"Game Results: \")\r\n-        pprint.pprint(self.GameResults)\r\n+        pprint.pprint(self.GameResults) '''\r\n             \r\n #NEED TO CREATE ARRAY OF ARRAY OF ARRAYS CENAS MORANGO E UJM NERD\r\n \r\n class ClientGame(threading.Thread):\r\n"
                },
                {
                    "date": 1654639117937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,19 +141,23 @@\n         self.gameOptions = gameOptions\r\n         self.gameSolutions = gameSolutions\r\n         self.buffer = 2048\r\n         self._return = None\r\n+        self.socket.settimeout(3)\r\n     \r\n     def startGame(self):\r\n         #send message to client to start game\r\n         self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n         print(\"gameStart sent to \" + self.addr)\r\n         #wait for client to start game\r\n-        data, addr = self.socket.recvfrom(self.buffer)\r\n-        print(\"gameStart received from \" + self.addr)\r\n-        if data.decode() == \"gameStart-ack\":\r\n-            print(\"Game started\")\r\n-            return 1\r\n+        try:\r\n+            data, addr = self.socket.recvfrom(self.buffer)\r\n+            print(\"gameStart received from \" + self.addr)\r\n+            if data.decode() == \"gameStart-ack\":\r\n+                print(\"Game started\")\r\n+                return 1\r\n+        except timeout:\r\n+            \r\n     def sendGameOptions(self):\r\n         #send the game options via pickle to client\r\n         self.socket.sendto(pickle.dumps(self.gameOptions), (self.addr, self.port))\r\n         print(\"gameOptions sent to \" + self.addr)\r\n"
                },
                {
                    "date": 1654639145289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,11 @@\n             print(\"gameStart received from \" + self.addr)\r\n             if data.decode() == \"gameStart-ack\":\r\n                 print(\"Game started\")\r\n                 return 1\r\n-        except timeout:\r\n+        except socket.timeout:\r\n+            print(\"Timeout\")\r\n+            self.startGame()\r\n             \r\n     def sendGameOptions(self):\r\n         #send the game options via pickle to client\r\n         self.socket.sendto(pickle.dumps(self.gameOptions), (self.addr, self.port))\r\n"
                },
                {
                    "date": 1654639171596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,13 +163,17 @@\n         #send the game options via pickle to client\r\n         self.socket.sendto(pickle.dumps(self.gameOptions), (self.addr, self.port))\r\n         print(\"gameOptions sent to \" + self.addr)\r\n         #wait for client to receive game options\r\n-        data, addr = self.socket.recvfrom(self.buffer)\r\n-        print(\"gameOptions received from \" + self.addr)\r\n-        if data.decode() == \"gameOptions-ack\":\r\n-            print(\"Game options sent\")\r\n-            return 1\r\n+        try:\r\n+            data, addr = self.socket.recvfrom(self.buffer)\r\n+            print(\"gameOptions received from \" + self.addr)\r\n+            if data.decode() == \"gameOptions-ack\":\r\n+                print(\"Game options sent\")\r\n+                return 1\r\n+        except socket.timeout:\r\n+            print(\"Timeout\")\r\n+            self.startGame()\r\n     def run(self):\r\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n"
                },
                {
                    "date": 1654639217993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,11 @@\n                 print(\"Game options sent\")\r\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n-            self.startGame()\r\n+            self.sendGameOptions()\r\n+            \r\n+        \r\n     def run(self):\r\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n"
                },
                {
                    "date": 1654639593679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n         self.port = port\r\n         self.socket = socket\r\n         self.gameOptions = gameOptions\r\n         self.gameSolutions = gameSolutions\r\n-        self.buffer = 2048\r\n+        self.buffer = 4096\r\n         self._return = None\r\n         self.socket.settimeout(3)\r\n     \r\n     def startGame(self):\r\n@@ -173,9 +173,9 @@\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n             self.sendGameOptions()\r\n             \r\n-        \r\n+    \r\n     def run(self):\r\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n"
                },
                {
                    "date": 1654641769856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n             self.startGame()\r\n-            \r\n+    \r\n     def sendGameOptions(self):\r\n         #send the game options via pickle to client\r\n         self.socket.sendto(pickle.dumps(self.gameOptions), (self.addr, self.port))\r\n         print(\"gameOptions sent to \" + self.addr)\r\n@@ -178,8 +178,9 @@\n     def run(self):\r\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n+        \r\n         data, recv = self.socket.recvfrom(self.buffer)\r\n         if pickle.loads(data):\r\n             options = dict()\r\n             options = pickle.loads(data)\r\n"
                },
                {
                    "date": 1654642059855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,8 +157,9 @@\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n             self.startGame()\r\n+\r\n     \r\n     def sendGameOptions(self):\r\n         #send the game options via pickle to client\r\n         self.socket.sendto(pickle.dumps(self.gameOptions), (self.addr, self.port))\r\n@@ -179,16 +180,21 @@\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         \r\n-        data, recv = self.socket.recvfrom(self.buffer)\r\n-        if pickle.loads(data):\r\n-            options = dict()\r\n-            options = pickle.loads(data)\r\n-            print(\"Game Options Received...\")\r\n-            return 1\r\n-        self._return = options\r\n-    def join(self):\r\n+        done = 0\r\n+        while not done :\r\n+            try:\r\n+                data, recv = self.socket.recvfrom(self.buffer)\r\n+                pickle.loads(data)\r\n+                options = dict()\r\n+                options = pickle.loads(data)\r\n+                print(\"Game Options Received...\")\r\n+                done = 0\r\n+                self._return = options\r\n+            except pickle.UnpicklingError:\r\n+                print(\"Error receiving game options\")\r\n+def join(self):\r\n         return self._return\r\n \r\n def main():\r\n     cm = ClientsManager()\r\n"
                },
                {
                    "date": 1654642159470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n         #wait for client to receive game options\r\n         try:\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             print(\"gameOptions received from \" + self.addr)\r\n-            if data.decode() == \"gameOptions-ack\":\r\n+            if data.decode().split('-')[0] == \"gameOptions-ack\":\r\n                 print(\"Game options sent\")\r\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n"
                },
                {
                    "date": 1654642211008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,9 @@\n         #wait for client to start game\r\n         try:\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             print(\"gameStart received from \" + self.addr)\r\n-            if data.decode() == \"gameStart-ack\":\r\n+            if data.decode().split('-')[0] == \"gameStartack\":\r\n                 print(\"Game started\")\r\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n@@ -167,9 +167,9 @@\n         #wait for client to receive game options\r\n         try:\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             print(\"gameOptions received from \" + self.addr)\r\n-            if data.decode().split('-')[0] == \"gameOptions-ack\":\r\n+            if data.decode().split('-')[0] == \"gameOptionsack\":\r\n                 print(\"Game options sent\")\r\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n"
                },
                {
                    "date": 1654642268016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n \r\n def main():\r\n     cm = ClientsManager()\r\n     cm.start()\r\n-    gm = GameServer(3, 2)\r\n+    gm = GameServer(3, 1)\r\n     gm.start()\r\n     \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654642294614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,8 +188,9 @@\n                 pickle.loads(data)\r\n                 options = dict()\r\n                 options = pickle.loads(data)\r\n                 print(\"Game Options Received...\")\r\n+                ppprint.ppprint(options)\r\n                 done = 0\r\n                 self._return = options\r\n             except pickle.UnpicklingError:\r\n                 print(\"Error receiving game options\")\r\n"
                },
                {
                    "date": 1654642309829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,9 @@\n                 pickle.loads(data)\r\n                 options = dict()\r\n                 options = pickle.loads(data)\r\n                 print(\"Game Options Received...\")\r\n-                ppprint.ppprint(options)\r\n+                pprint.ppprint(options)\r\n                 done = 0\r\n                 self._return = options\r\n             except pickle.UnpicklingError:\r\n                 print(\"Error receiving game options\")\r\n"
                },
                {
                    "date": 1654642323082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import threading, time, sys, json, random, socket, pprint, pickle, gameGenerator\r\n+import threading, time, sys, json, random, socket, pprint, pickle, gameGenerator, pprint\r\n \r\n #Global Vars\r\n conClients = dict()\r\n rConClients = dict()\r\n"
                },
                {
                    "date": 1654642338375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,9 @@\n                 pickle.loads(data)\r\n                 options = dict()\r\n                 options = pickle.loads(data)\r\n                 print(\"Game Options Received...\")\r\n-                pprint.ppprint(options)\r\n+                pprint.pprint(options)\r\n                 done = 0\r\n                 self._return = options\r\n             except pickle.UnpicklingError:\r\n                 print(\"Error receiving game options\")\r\n"
                },
                {
                    "date": 1654642379384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,8 @@\n                 data, recv = self.socket.recvfrom(self.buffer)\r\n                 pickle.loads(data)\r\n                 options = dict()\r\n                 options = pickle.loads(data)\r\n-                print(\"Game Options Received...\")\r\n                 pprint.pprint(options)\r\n                 done = 0\r\n                 self._return = options\r\n             except pickle.UnpicklingError:\r\n"
                },
                {
                    "date": 1654642453595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,8 +181,9 @@\n         self.startGame()\r\n         self.sendGameOptions()\r\n         \r\n         done = 0\r\n+        self.socket.settimeout(None)\r\n         while not done :\r\n             try:\r\n                 data, recv = self.socket.recvfrom(self.buffer)\r\n                 pickle.loads(data)\r\n"
                },
                {
                    "date": 1654643077433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,8 +158,13 @@\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n             self.startGame()\r\n \r\n+    def sendGameSolution(self):\r\n+        #send game solution to client\r\n+        self.socket.sendto(str(self.gameSolutions).encode(), (self.addr, self.port))\r\n+        print(\"gameSolution sent to \" + self.addr)\r\n+\r\n     \r\n     def sendGameOptions(self):\r\n         #send the game options via pickle to client\r\n         self.socket.sendto(pickle.dumps(self.gameOptions), (self.addr, self.port))\r\n"
                },
                {
                    "date": 1654643092083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,8 +162,17 @@\n     def sendGameSolution(self):\r\n         #send game solution to client\r\n         self.socket.sendto(str(self.gameSolutions).encode(), (self.addr, self.port))\r\n         print(\"gameSolution sent to \" + self.addr)\r\n+        try:\r\n+            data, addr = self.socket.recvfrom(self.buffer)\r\n+            print(\"gameSolution received from \" + self.addr)\r\n+            if data.decode().split('-')[0] == \"gameSolutionack\":\r\n+                print(\"Game Solution sent\")\r\n+                return 1\r\n+        except socket.timeout:\r\n+            print(\"Timeout\")\r\n+            self.sendGameSolution()\r\n \r\n     \r\n     def sendGameOptions(self):\r\n         #send the game options via pickle to client\r\n"
                },
                {
                    "date": 1654643118439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,9 +158,9 @@\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n             self.startGame()\r\n \r\n-    def sendGameSolution(self):\r\n+    def sendGameSolutions(self):\r\n         #send game solution to client\r\n         self.socket.sendto(str(self.gameSolutions).encode(), (self.addr, self.port))\r\n         print(\"gameSolution sent to \" + self.addr)\r\n         try:\r\n@@ -193,9 +193,9 @@\n     def run(self):\r\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n-        \r\n+        self.sendGameSolutions()\r\n         done = 0\r\n         self.socket.settimeout(None)\r\n         while not done :\r\n             try:\r\n"
                },
                {
                    "date": 1654643186562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,9 @@\n             self.startGame()\r\n \r\n     def sendGameSolutions(self):\r\n         #send game solution to client\r\n-        self.socket.sendto(str(self.gameSolutions).encode(), (self.addr, self.port))\r\n+        self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n         print(\"gameSolution sent to \" + self.addr)\r\n         try:\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             print(\"gameSolution received from \" + self.addr)\r\n"
                },
                {
                    "date": 1654719630106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,10 +129,10 @@\n             self.GameResults.append(var)\r\n         print(\"Game Results: \")\r\n         pprint.pprint(self.GameResults) '''\r\n             \r\n-#NEED TO CREATE ARRAY OF ARRAY OF ARRAYS CENAS MORANGO E UJM NERD\r\n \r\n+\r\n class ClientGame(threading.Thread):\r\n     def __init__(self, addr, port, socket, gameOptions, gameSolutions):\r\n         threading.Thread.__init__(self)\r\n         self.addr = addr\r\n"
                },
                {
                    "date": 1654790743413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,16 +199,14 @@\n         self.socket.settimeout(None)\r\n         while not done :\r\n             try:\r\n                 data, recv = self.socket.recvfrom(self.buffer)\r\n-                pickle.loads(data)\r\n-                options = dict()\r\n-                options = pickle.loads(data)\r\n-                pprint.pprint(options)\r\n-                done = 0\r\n-                self._return = options\r\n+                gameRes = pickle.loads(data)\r\n+                done = 1\r\n             except pickle.UnpicklingError:\r\n                 print(\"Error receiving game options\")\r\n+        print(\"Resultados recebidos!\")\r\n+        print(gameRes)\r\n def join(self):\r\n         return self._return\r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654790835984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,11 +164,9 @@\n         self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n         print(\"gameSolution sent to \" + self.addr)\r\n         try:\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n-            print(\"gameSolution received from \" + self.addr)\r\n             if data.decode().split('-')[0] == \"gameSolutionack\":\r\n-                print(\"Game Solution sent\")\r\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n             self.sendGameSolution()\r\n@@ -196,15 +194,14 @@\n         self.sendGameOptions()\r\n         self.sendGameSolutions()\r\n         done = 0\r\n         self.socket.settimeout(None)\r\n-        while not done :\r\n-            try:\r\n-                data, recv = self.socket.recvfrom(self.buffer)\r\n-                gameRes = pickle.loads(data)\r\n-                done = 1\r\n-            except pickle.UnpicklingError:\r\n-                print(\"Error receiving game options\")\r\n+        try:\r\n+            data, recv = self.socket.recvfrom(self.buffer)\r\n+            gameRes = pickle.loads(data)\r\n+        \r\n+        except pickle.UnpicklingError:\r\n+            print(\"Error receiving game options\")\r\n         print(\"Resultados recebidos!\")\r\n         print(gameRes)\r\n def join(self):\r\n         return self._return\r\n"
                },
                {
                    "date": 1654790848969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,8 +194,9 @@\n         self.sendGameOptions()\r\n         self.sendGameSolutions()\r\n         done = 0\r\n         self.socket.settimeout(None)\r\n+        print(\"A espera dos resultdos do cliente \" + str(self.addr))\")\r\n         try:\r\n             data, recv = self.socket.recvfrom(self.buffer)\r\n             gameRes = pickle.loads(data)\r\n         \r\n"
                },
                {
                    "date": 1654791074939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,16 +194,18 @@\n         self.sendGameOptions()\r\n         self.sendGameSolutions()\r\n         done = 0\r\n         self.socket.settimeout(None)\r\n-        print(\"A espera dos resultdos do cliente \" + str(self.addr))\")\r\n+        print(\"A espera dos resultdos do cliente \" + str(self.addr))\r\n         try:\r\n             data, recv = self.socket.recvfrom(self.buffer)\r\n             gameRes = pickle.loads(data)\r\n         \r\n         except pickle.UnpicklingError:\r\n             print(\"Error receiving game options\")\r\n         print(\"Resultados recebidos!\")\r\n+        self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n+        print(\"Confirmação enviada\")\r\n         print(gameRes)\r\n def join(self):\r\n         return self._return\r\n \r\n"
                },
                {
                    "date": 1654791141407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,8 +188,9 @@\n             self.sendGameOptions()\r\n             \r\n     \r\n     def run(self):\r\n+        global gameData\r\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         self.sendGameSolutions()\r\n@@ -205,8 +206,9 @@\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n         print(gameRes)\r\n+        \r\n def join(self):\r\n         return self._return\r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654791162223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,8 +189,10 @@\n             \r\n     \r\n     def run(self):\r\n         global gameData\r\n+        #Generate random ID for GAME\r\n+        gameID = random.randint(0, 1000000)\r\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         self.sendGameSolutions()\r\n"
                },
                {
                    "date": 1654791184884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n             \r\n \r\n \r\n class ClientGame(threading.Thread):\r\n-    def __init__(self, addr, port, socket, gameOptions, gameSolutions):\r\n+    def __init__(self, addr, port, socket, gameOptions, gameSolutions, gameID):\r\n         threading.Thread.__init__(self)\r\n         self.addr = addr\r\n         self.port = port\r\n         self.socket = socket\r\n@@ -142,8 +142,9 @@\n         self.gameSolutions = gameSolutions\r\n         self.buffer = 4096\r\n         self._return = None\r\n         self.socket.settimeout(3)\r\n+        self.gameID = gameID\r\n     \r\n     def startGame(self):\r\n         #send message to client to start game\r\n         self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n"
                },
                {
                    "date": 1654791229703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,10 +190,8 @@\n             \r\n     \r\n     def run(self):\r\n         global gameData\r\n-        #Generate random ID for GAME\r\n-        gameID = random.randint(0, 1000000)\r\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         self.sendGameSolutions()\r\n@@ -209,8 +207,9 @@\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n         print(gameRes)\r\n+        gameData[self.gameID][str(self.addr[0])] = gameRes\r\n         \r\n def join(self):\r\n         return self._return\r\n \r\n"
                },
                {
                    "date": 1654791235247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,8 +208,9 @@\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n         print(gameRes)\r\n         gameData[self.gameID][str(self.addr[0])] = gameRes\r\n+        print(gameData)\r\n         \r\n def join(self):\r\n         return self._return\r\n \r\n"
                },
                {
                    "date": 1654791585397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     self.socket.sendto(\"You are not connected\".encode(), addr)\r\n \r\n \r\n class GameServer(threading.Thread):\r\n-    def __init__(self, rounds, gameSize):\r\n+    def __init__(self, rounds, gameSize, gameClients):\r\n         threading.Thread.__init__(self)\r\n         self.rounds = rounds #Numero de rondas associadas a cada jogo\r\n         self.gameSize = gameSize #Numero de jogadores por jogo\r\n         self.gameClients = dict()\r\n@@ -76,19 +76,10 @@\n         self.socket.bind(('', self.port))\r\n         self.buffer = 2048\r\n         self.threadPool = []\r\n         self.GameResults = []\r\n+        self.GameClients = gameClients\r\n         \r\n-    def selectClientsForGame(self):\r\n-        global conClients\r\n-        #go over conClients and random clients for game who have the status = 1, change status to 2\r\n-        #and add them to the game\r\n-        for client in conClients:\r\n-            if conClients[client][\"status\"] == 1:\r\n-                conClients[client][\"status\"] = 2\r\n-                self.gameClients[client] = conClients[client]\r\n-        print(\"Selected Clients for game: \")\r\n-        pprint.pprint(self.gameClients)\r\n \r\n     def getWinner(self):   \r\n         winner = None\r\n         winnerScore = 0\r\n@@ -130,9 +121,34 @@\n         print(\"Game Results: \")\r\n         pprint.pprint(self.GameResults) '''\r\n             \r\n \r\n+class GameManager(threading.Thread):\r\n+    def __init__(self, rounds, gameSize):\r\n+        threading.Thread.__init__(self)\r\n+        self.rounds = rounds #Numero de rondas associadas a cada jogo\r\n+        self.gameSize = gameSize #Numero de jogadores por jogo\r\n+        self.gameClients = dict()    \r\n+    \r\n+    def selectClientsForGame(self):\r\n+        global conClients\r\n+        for client in conClients:\r\n+            if conClients[client][\"status\"] == 1:\r\n+                conClients[client][\"status\"] = 2\r\n+                self.gameClients[client] = conClients[client]\r\n+        print(\"Selected Clients for game: \")\r\n \r\n+    \r\n+    \r\n+    def run(self):\r\n+        print(\"À espera de jogos....\")\r\n+        while nClients < self.gameSize:\r\n+            time.sleep(0.1)\r\n+        self.selectClientsForGame()\r\n+        \r\n+    \r\n+\r\n+\r\n class ClientGame(threading.Thread):\r\n     def __init__(self, addr, port, socket, gameOptions, gameSolutions, gameID):\r\n         threading.Thread.__init__(self)\r\n         self.addr = addr\r\n@@ -206,9 +222,8 @@\n             print(\"Error receiving game options\")\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n-        print(gameRes)\r\n         gameData[self.gameID][str(self.addr[0])] = gameRes\r\n         print(gameData)\r\n         \r\n def join(self):\r\n"
                },
                {
                    "date": 1654791608210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,17 +135,19 @@\n             if conClients[client][\"status\"] == 1:\r\n                 conClients[client][\"status\"] = 2\r\n                 self.gameClients[client] = conClients[client]\r\n         print(\"Selected Clients for game: \")\r\n-\r\n     \r\n     \r\n     def run(self):\r\n         print(\"À espera de jogos....\")\r\n         while nClients < self.gameSize:\r\n             time.sleep(0.1)\r\n         self.selectClientsForGame()\r\n+        gm = GameServer(3, 1)\r\n+        gm.start()\r\n         \r\n+        \r\n     \r\n \r\n \r\n class ClientGame(threading.Thread):\r\n@@ -231,9 +233,8 @@\n \r\n def main():\r\n     cm = ClientsManager()\r\n     cm.start()\r\n-    gm = GameServer(3, 1)\r\n-    gm.start()\r\n     \r\n+    \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654791626012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,8 +141,9 @@\n     def run(self):\r\n         print(\"À espera de jogos....\")\r\n         while nClients < self.gameSize:\r\n             time.sleep(0.1)\r\n+        nClients = 0\r\n         self.selectClientsForGame()\r\n         gm = GameServer(3, 1)\r\n         gm.start()\r\n         \r\n"
                },
                {
                    "date": 1654792505333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,14 +141,14 @@\n     def run(self):\r\n         print(\"À espera de jogos....\")\r\n         while nClients < self.gameSize:\r\n             time.sleep(0.1)\r\n-        nClients = 0\r\n         self.selectClientsForGame()\r\n         gm = GameServer(3, 1)\r\n         gm.start()\r\n         \r\n         \r\n+        \r\n     \r\n \r\n \r\n class ClientGame(threading.Thread):\r\n"
                },
                {
                    "date": 1654792514470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,14 +141,14 @@\n     def run(self):\r\n         print(\"À espera de jogos....\")\r\n         while nClients < self.gameSize:\r\n             time.sleep(0.1)\r\n+\r\n         self.selectClientsForGame()\r\n         gm = GameServer(3, 1)\r\n         gm.start()\r\n         \r\n         \r\n-        \r\n     \r\n \r\n \r\n class ClientGame(threading.Thread):\r\n"
                },
                {
                    "date": 1654792558352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,14 +139,15 @@\n     \r\n     \r\n     def run(self):\r\n         print(\"À espera de jogos....\")\r\n-        while nClients < self.gameSize:\r\n-            time.sleep(0.1)\r\n-\r\n-        self.selectClientsForGame()\r\n-        gm = GameServer(3, 1)\r\n-        gm.start()\r\n+        while True:\r\n+            while nClients < self.gameSize:\r\n+                time.sleep(0.1)\r\n+            self.selectClientsForGame()\r\n+            gm = GameServer(3, 1)\r\n+            gm.start()\r\n+             nClients = 0\r\n         \r\n         \r\n     \r\n \r\n"
                },
                {
                    "date": 1654792572762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,16 +138,17 @@\n         print(\"Selected Clients for game: \")\r\n     \r\n     \r\n     def run(self):\r\n+        global nClients\r\n         print(\"À espera de jogos....\")\r\n         while True:\r\n             while nClients < self.gameSize:\r\n                 time.sleep(0.1)\r\n             self.selectClientsForGame()\r\n             gm = GameServer(3, 1)\r\n             gm.start()\r\n-             nClients = 0\r\n+            nClients = 0\r\n         \r\n         \r\n     \r\n \r\n"
                },
                {
                    "date": 1654792632481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,8 +149,9 @@\n             gm.start()\r\n             nClients = 0\r\n         \r\n         \r\n+        \r\n     \r\n \r\n \r\n class ClientGame(threading.Thread):\r\n"
                },
                {
                    "date": 1654792682702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,12 +149,9 @@\n             gm.start()\r\n             nClients = 0\r\n         \r\n         \r\n-        \r\n-    \r\n \r\n-\r\n class ClientGame(threading.Thread):\r\n     def __init__(self, addr, port, socket, gameOptions, gameSolutions, gameID):\r\n         threading.Thread.__init__(self)\r\n         self.addr = addr\r\n@@ -231,10 +228,8 @@\n         print(\"Confirmação enviada\")\r\n         gameData[self.gameID][str(self.addr[0])] = gameRes\r\n         print(gameData)\r\n         \r\n-def join(self):\r\n-        return self._return\r\n \r\n def main():\r\n     cm = ClientsManager()\r\n     cm.start()\r\n"
                },
                {
                    "date": 1654792704824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,8 +232,9 @@\n \r\n def main():\r\n     cm = ClientsManager()\r\n     cm.start()\r\n+    gm = GameManager(3, 1)\r\n+    gm.start()\r\n     \r\n-    \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654794883490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,10 @@\n         while True:\r\n             while nClients < self.gameSize:\r\n                 time.sleep(0.1)\r\n             self.selectClientsForGame()\r\n-            gm = GameServer(3, 1)\r\n+            gm = GameServer(3, 1, self.gameClients)\r\n+            self.gameClients = None\r\n             gm.start()\r\n             nClients = 0\r\n         \r\n         \r\n"
                },
                {
                    "date": 1654794888875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,10 +145,10 @@\n             while nClients < self.gameSize:\r\n                 time.sleep(0.1)\r\n             self.selectClientsForGame()\r\n             gm = GameServer(3, 1, self.gameClients)\r\n+            gm.start()\r\n             self.gameClients = None\r\n-            gm.start()\r\n             nClients = 0\r\n         \r\n         \r\n \r\n"
                },
                {
                    "date": 1654794923948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,8 @@\n \r\n     def run(self):\r\n         while nClients < self.gameSize:\r\n             time.sleep(1)\r\n-        self.selectClientsForGame()\r\n         gg = gameGenerator.gameGenerator(self.rounds)\r\n         gg.generateGame()\r\n         self.gameSolutions = gg.getSongs()\r\n         self.gameOptions = gg.getOptions()\r\n"
                },
                {
                    "date": 1654794953122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,8 @@\n                 time.sleep(0.1)\r\n             self.selectClientsForGame()\r\n             gm = GameServer(3, 1, self.gameClients)\r\n             gm.start()\r\n-            self.gameClients = None\r\n             nClients = 0\r\n         \r\n         \r\n \r\n"
                },
                {
                    "date": 1654807733408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,8 +142,9 @@\n         print(\"À espera de jogos....\")\r\n         while True:\r\n             while nClients < self.gameSize:\r\n                 time.sleep(0.1)\r\n+            print(\"jogo a iniciar...\\n\\n\\n\")\r\n             self.selectClientsForGame()\r\n             gm = GameServer(3, 1, self.gameClients)\r\n             gm.start()\r\n             nClients = 0\r\n@@ -212,9 +213,8 @@\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         self.sendGameSolutions()\r\n-        done = 0\r\n         self.socket.settimeout(None)\r\n         print(\"A espera dos resultdos do cliente \" + str(self.addr))\r\n         try:\r\n             data, recv = self.socket.recvfrom(self.buffer)\r\n"
                },
                {
                    "date": 1654807786160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,10 +96,8 @@\n                 winnerTime = time\r\n         return winner\r\n \r\n     def run(self):\r\n-        while nClients < self.gameSize:\r\n-            time.sleep(1)\r\n         gg = gameGenerator.gameGenerator(self.rounds)\r\n         gg.generateGame()\r\n         self.gameSolutions = gg.getSongs()\r\n         self.gameOptions = gg.getOptions()\r\n"
                },
                {
                    "date": 1654807823897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n         self.socket.bind(('', self.port))\r\n         self.buffer = 2048\r\n         self.threadPool = []\r\n         self.GameResults = []\r\n-        self.GameClients = gameClients\r\n+        self.gameClients = gameClients\r\n         \r\n \r\n     def getWinner(self):   \r\n         winner = None\r\n"
                },
                {
                    "date": 1654808110597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,40 @@\n                 else:\r\n                     self.socket.sendto(\"You are not connected\".encode(), addr)\r\n \r\n \r\n+\r\n+class GameManager(threading.Thread):\r\n+    def __init__(self, rounds, gameSize):\r\n+        threading.Thread.__init__(self)\r\n+        self.rounds = rounds #Numero de rondas associadas a cada jogo\r\n+        self.gameSize = gameSize #Numero de jogadores por jogo\r\n+        self.gameClients = dict()    \r\n+    \r\n+    def selectClientsForGame(self):\r\n+        global conClients\r\n+        for client in conClients:\r\n+            if conClients[client][\"status\"] == 1:\r\n+                conClients[client][\"status\"] = 2\r\n+                self.gameClients[client] = conClients[client]\r\n+        print(\"Selected Clients for game: \")\r\n+    \r\n+    \r\n+    def run(self):\r\n+        global nClients\r\n+        print(\"À espera de jogos....\")\r\n+        while True:\r\n+            while nClients < self.gameSize:\r\n+                time.sleep(0.1)\r\n+            print(\"jogo a iniciar...\\n\\n\\n\")\r\n+            self.selectClientsForGame()\r\n+            gm = GameServer(3, 1, self.gameClients)\r\n+            gm.start()\r\n+            nClients = 0\r\n+        \r\n+        \r\n+\r\n+\r\n class GameServer(threading.Thread):\r\n     def __init__(self, rounds, gameSize, gameClients):\r\n         threading.Thread.__init__(self)\r\n         self.rounds = rounds #Numero de rondas associadas a cada jogo\r\n@@ -101,8 +133,9 @@\n         gg.generateGame()\r\n         self.gameSolutions = gg.getSongs()\r\n         self.gameOptions = gg.getOptions()\r\n         pprint.pprint(self.gameClients)\r\n+        gameID = random.randint(0, 10000)\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n             t = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n             self.threadPool.append(t)\r\n@@ -118,37 +151,8 @@\n         print(\"Game Results: \")\r\n         pprint.pprint(self.GameResults) '''\r\n             \r\n \r\n-class GameManager(threading.Thread):\r\n-    def __init__(self, rounds, gameSize):\r\n-        threading.Thread.__init__(self)\r\n-        self.rounds = rounds #Numero de rondas associadas a cada jogo\r\n-        self.gameSize = gameSize #Numero de jogadores por jogo\r\n-        self.gameClients = dict()    \r\n-    \r\n-    def selectClientsForGame(self):\r\n-        global conClients\r\n-        for client in conClients:\r\n-            if conClients[client][\"status\"] == 1:\r\n-                conClients[client][\"status\"] = 2\r\n-                self.gameClients[client] = conClients[client]\r\n-        print(\"Selected Clients for game: \")\r\n-    \r\n-    \r\n-    def run(self):\r\n-        global nClients\r\n-        print(\"À espera de jogos....\")\r\n-        while True:\r\n-            while nClients < self.gameSize:\r\n-                time.sleep(0.1)\r\n-            print(\"jogo a iniciar...\\n\\n\\n\")\r\n-            self.selectClientsForGame()\r\n-            gm = GameServer(3, 1, self.gameClients)\r\n-            gm.start()\r\n-            nClients = 0\r\n-        \r\n-        \r\n \r\n class ClientGame(threading.Thread):\r\n     def __init__(self, addr, port, socket, gameOptions, gameSolutions, gameID):\r\n         threading.Thread.__init__(self)\r\n"
                },
                {
                    "date": 1654808115657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n         pprint.pprint(self.gameClients)\r\n         gameID = random.randint(0, 10000)\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n-            t = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions)\r\n+            t = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions, gameID\\)\r\n             self.threadPool.append(t)\r\n         print(self.threadPool)\r\n         \r\n         #start all the threads\r\n"
                },
                {
                    "date": 1654808131119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,21 +136,21 @@\n         pprint.pprint(self.gameClients)\r\n         gameID = random.randint(0, 10000)\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n-            t = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions, gameID\\)\r\n+            t = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions, gameID)\r\n             self.threadPool.append(t)\r\n         print(self.threadPool)\r\n         \r\n         #start all the threads\r\n         for thread in self.threadPool:\r\n             thread.start()\r\n             print(\"thread started\")\r\n-        ''' for thread in self.threadPool:\r\n+        for thread in self.threadPool:\r\n             var = thread.join()\r\n             self.GameResults.append(var)\r\n         print(\"Game Results: \")\r\n-        pprint.pprint(self.GameResults) '''\r\n+        pprint.pprint(self.GameResults)\r\n             \r\n \r\n \r\n class ClientGame(threading.Thread):\r\n"
                },
                {
                    "date": 1654808144975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,13 +144,13 @@\n         #start all the threads\r\n         for thread in self.threadPool:\r\n             thread.start()\r\n             print(\"thread started\")\r\n-        for thread in self.threadPool:\r\n+        ''' for thread in self.threadPool:\r\n             var = thread.join()\r\n             self.GameResults.append(var)\r\n         print(\"Game Results: \")\r\n-        pprint.pprint(self.GameResults)\r\n+        pprint.pprint(self.GameResults) '''\r\n             \r\n \r\n \r\n class ClientGame(threading.Thread):\r\n"
                },
                {
                    "date": 1654808175913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n             print(\"Error receiving game options\")\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n-        gameData[self.gameID][str(self.addr[0])] = gameRes\r\n+        gameData[self.gameID][str(self.addr[0])] = gameRes.values()\r\n         print(gameData)\r\n         \r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654808220903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n             print(\"Error receiving game options\")\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n-        gameData[self.gameID][str(self.addr[0])] = gameRes.values()\r\n+        gameData[self.gameID][str(self.addr[0])] = dict()\r\n         print(gameData)\r\n         \r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654808259907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n             print(\"Error receiving game options\")\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n-        gameData[self.gameID][str(self.addr[0])] = dict()\r\n+        gameData[str(self.gameID)][str(self.addr[0])] = dict()\r\n         print(gameData)\r\n         \r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654808579794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n             print(\"Error receiving game options\")\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n-        gameData[str(self.gameID)][str(self.addr[0])] = dict()\r\n+        gameData[str(self.gameID)] = \"putas e vinho verde\"\r\n         print(gameData)\r\n         \r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654808699048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,10 @@\n             print(\"Error receiving game options\")\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n-        gameData[str(self.gameID)] = \"putas e vinho verde\"\r\n+        gameData[self.gameID] = [str(self.addr)]\r\n+        gameData[self.gameID][str(self.addr[0])] = gameRes.values()\r\n         print(gameData)\r\n         \r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654808723357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,9 +227,9 @@\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n         gameData[self.gameID] = [str(self.addr)]\r\n-        gameData[self.gameID][str(self.addr[0])] = gameRes.values()\r\n+        gameData[self.gameID][str(self.addr)] = gameRes.values()\r\n         print(gameData)\r\n         \r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654808739387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n             print(\"Error receiving game options\")\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n-        gameData[self.gameID] = [str(self.addr)]\r\n+        gameData[self.gameID][str(self.addr)] = gamesRes.items()\r\n         gameData[self.gameID][str(self.addr)] = gameRes.values()\r\n         print(gameData)\r\n         \r\n \r\n"
                },
                {
                    "date": 1654808753966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,10 +226,9 @@\n             print(\"Error receiving game options\")\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n-        gameData[self.gameID][str(self.addr)] = gamesRes.items()\r\n-        gameData[self.gameID][str(self.addr)] = gameRes.values()\r\n+        gameData[self.gameID][str(self.addr)] = gameData.items()\r\n         print(gameData)\r\n         \r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654808761646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n             print(\"Error receiving game options\")\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n-        gameData[self.gameID][str(self.addr)] = gameData.items()\r\n+        gameData[self.gameID][str(self.addr)] = gameRes.items()\r\n         print(gameData)\r\n         \r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654808792634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,8 +226,9 @@\n             print(\"Error receiving game options\")\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n+        print(str(self.addr)\r\n         gameData[self.gameID][str(self.addr)] = gameRes.items()\r\n         print(gameData)\r\n         \r\n \r\n"
                },
                {
                    "date": 1654809012205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,10 +226,12 @@\n             print(\"Error receiving game options\")\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n-        print(str(self.addr)\r\n-        gameData[self.gameID][str(self.addr)] = gameRes.items()\r\n+        print(str(self.addr))\r\n+        tmpDict = dict()\r\n+        tmpDict[str(self.addr)] = gameRes\r\n+        gameData[self.gameID].update(tmpDict)\r\n         print(gameData)\r\n         \r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654809121573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,9 @@\n         print(\"Confirmação enviada\")\r\n         print(str(self.addr))\r\n         tmpDict = dict()\r\n         tmpDict[str(self.addr)] = gameRes\r\n-        gameData[self.gameID].update(tmpDict)\r\n+        gameData[str(self.gameID)].update(tmpDict)\r\n         print(gameData)\r\n         \r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654809179534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,11 +227,9 @@\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n         print(str(self.addr))\r\n-        tmpDict = dict()\r\n-        tmpDict[str(self.addr)] = gameRes\r\n-        gameData[str(self.gameID)].update(tmpDict)\r\n+        gameData[self.gameID][str(self.addr)] = gameRes.values()\r\n         print(gameData)\r\n         \r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654809321906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,19 @@\n \r\n gameData = dict()\r\n \r\n \r\n+\"\"\"\r\n+{gameID <randomly generated> : { 'addr' : {\r\n+                                            \r\n+}}\r\n \r\n+\r\n+\r\n+\"\"\"\r\n+\r\n+\r\n+\r\n #Classe para gestão de autenticação de clients\r\n \r\n class ClientsManager(threading.Thread):\r\n     def __init__(self):\r\n@@ -226,9 +236,10 @@\n             print(\"Error receiving game options\")\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n-        print(str(self.addr))\r\n+        print(\"Addr :  \" + str(self.addr))\r\n+        pprint.pprint(gameData)\r\n         gameData[self.gameID][str(self.addr)] = gameRes.values()\r\n         print(gameData)\r\n         \r\n \r\n"
                },
                {
                    "date": 1654809373120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,9 +237,9 @@\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n         print(\"Addr :  \" + str(self.addr))\r\n-        pprint.pprint(gameData)\r\n+        pprint.pprint(gameRes)\r\n         gameData[self.gameID][str(self.addr)] = gameRes.values()\r\n         print(gameData)\r\n         \r\n \r\n"
                },
                {
                    "date": 1654809458996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,14 +138,16 @@\n                 winnerTime = time\r\n         return winner\r\n \r\n     def run(self):\r\n+        global gameData\r\n         gg = gameGenerator.gameGenerator(self.rounds)\r\n         gg.generateGame()\r\n         self.gameSolutions = gg.getSongs()\r\n         self.gameOptions = gg.getOptions()\r\n         pprint.pprint(self.gameClients)\r\n         gameID = random.randint(0, 10000)\r\n+        gameData[gameID] = dict()\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n             t = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions, gameID)\r\n             self.threadPool.append(t)\r\n"
                },
                {
                    "date": 1654809548873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,9 +240,9 @@\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n         print(\"Addr :  \" + str(self.addr))\r\n         pprint.pprint(gameRes)\r\n-        gameData[self.gameID][str(self.addr)] = gameRes.values()\r\n+        gameData[self.gameID][str(self.addr)] = gameRes.items()\r\n         print(gameData)\r\n         \r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654809591640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,9 +240,9 @@\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n         print(\"Addr :  \" + str(self.addr))\r\n         pprint.pprint(gameRes)\r\n-        gameData[self.gameID][str(self.addr)] = gameRes.items()\r\n+        gameData[self.gameID][str(self.addr)] = gameRes.values()\r\n         print(gameData)\r\n         \r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654809867969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,8 +233,10 @@\n         try:\r\n             data, recv = self.socket.recvfrom(self.buffer)\r\n             gameRes = pickle.loads(data)\r\n         \r\n+        \r\n+        gameRes = gameRes.values()\r\n         except pickle.UnpicklingError:\r\n             print(\"Error receiving game options\")\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n"
                },
                {
                    "date": 1654809920798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,13 +232,12 @@\n         print(\"A espera dos resultdos do cliente \" + str(self.addr))\r\n         try:\r\n             data, recv = self.socket.recvfrom(self.buffer)\r\n             gameRes = pickle.loads(data)\r\n+        except pickle.UnpicklingError:\r\n+            print(\"Error receiving game options\")\r\n         \r\n-        \r\n         gameRes = gameRes.values()\r\n-        except pickle.UnpicklingError:\r\n-            print(\"Error receiving game options\")\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n         print(\"Addr :  \" + str(self.addr))\r\n"
                },
                {
                    "date": 1654809947084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -241,9 +241,9 @@\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n         print(\"Addr :  \" + str(self.addr))\r\n         pprint.pprint(gameRes)\r\n-        gameData[self.gameID][str(self.addr)] = gameRes.values()\r\n+        #gameData[self.gameID][str(self.addr)] = gameRes.values()\r\n         print(gameData)\r\n         \r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654810040743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -241,9 +241,9 @@\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n         print(\"Addr :  \" + str(self.addr))\r\n         pprint.pprint(gameRes)\r\n-        #gameData[self.gameID][str(self.addr)] = gameRes.values()\r\n+        gameData[self.gameID][str(self.addr)] = gameRes\r\n         print(gameData)\r\n         \r\n \r\n def main():\r\n"
                },
                {
                    "date": 1654810061656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,9 +240,8 @@\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n         print(\"Addr :  \" + str(self.addr))\r\n-        pprint.pprint(gameRes)\r\n         gameData[self.gameID][str(self.addr)] = gameRes\r\n         print(gameData)\r\n         \r\n \r\n"
                },
                {
                    "date": 1654810125371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,9 +235,9 @@\n             gameRes = pickle.loads(data)\r\n         except pickle.UnpicklingError:\r\n             print(\"Error receiving game options\")\r\n         \r\n-        gameRes = gameRes.values()\r\n+        gameRes = list(gameRes.values()^)\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n         print(\"Addr :  \" + str(self.addr))\r\n"
                },
                {
                    "date": 1654810222315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,13 +156,13 @@\n         #start all the threads\r\n         for thread in self.threadPool:\r\n             thread.start()\r\n             print(\"thread started\")\r\n-        ''' for thread in self.threadPool:\r\n-            var = thread.join()\r\n-            self.GameResults.append(var)\r\n+        for thread in self.threadPool:\r\n+            thread.join()\r\n+        print(gameData)\r\n         print(\"Game Results: \")\r\n-        pprint.pprint(self.GameResults) '''\r\n+        \r\n             \r\n \r\n \r\n class ClientGame(threading.Thread):\r\n@@ -235,17 +235,15 @@\n             gameRes = pickle.loads(data)\r\n         except pickle.UnpicklingError:\r\n             print(\"Error receiving game options\")\r\n         \r\n-        gameRes = list(gameRes.values()^)\r\n+        gameRes = list(gameRes.values())\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n         print(\"Addr :  \" + str(self.addr))\r\n         gameData[self.gameID][str(self.addr)] = gameRes\r\n-        print(gameData)\r\n         \r\n-\r\n def main():\r\n     cm = ClientsManager()\r\n     cm.start()\r\n     gm = GameManager(3, 1)\r\n"
                },
                {
                    "date": 1654810610910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n         self.gameOptions = gameOptions\r\n         self.gameSolutions = gameSolutions\r\n         self.buffer = 4096\r\n         self._return = None\r\n-        self.socket.settimeout(3)\r\n+        self.socket.settimeout(6)\r\n         self.gameID = gameID\r\n     \r\n     def startGame(self):\r\n         #send message to client to start game\r\n@@ -245,9 +245,9 @@\n         \r\n def main():\r\n     cm = ClientsManager()\r\n     cm.start()\r\n-    gm = GameManager(3, 1)\r\n+    gm = GameManager(3, 2)\r\n     gm.start()\r\n     \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654810816967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n         self.port = port\r\n         self.socket = socket\r\n         self.gameOptions = gameOptions\r\n         self.gameSolutions = gameSolutions\r\n-        self.buffer = 4096\r\n+        self.buffer = 8192\r\n         self._return = None\r\n         self.socket.settimeout(6)\r\n         self.gameID = gameID\r\n     \r\n"
                },
                {
                    "date": 1654812329713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n         self.gameOptions = gameOptions\r\n         self.gameSolutions = gameSolutions\r\n         self.buffer = 8192\r\n         self._return = None\r\n-        self.socket.settimeout(6)\r\n+        self.socket.settimeout(3)\r\n         self.gameID = gameID\r\n     \r\n     def startGame(self):\r\n         #send message to client to start game\r\n"
                },
                {
                    "date": 1654812347903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,8 @@\n         self.gameOptions = gameOptions\r\n         self.gameSolutions = gameSolutions\r\n         self.buffer = 8192\r\n         self._return = None\r\n-        self.socket.settimeout(3)\r\n         self.gameID = gameID\r\n     \r\n     def startGame(self):\r\n         #send message to client to start game\r\n@@ -193,8 +192,9 @@\n             print(\"Timeout\")\r\n             self.startGame()\r\n \r\n     def sendGameSolutions(self):\r\n+        self.socket.timeout(3)\r\n         #send game solution to client\r\n         self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n         print(\"gameSolution sent to \" + self.addr)\r\n         try:\r\n@@ -203,8 +203,9 @@\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n             self.sendGameSolution()\r\n+        self.socket.timeout(None)\r\n \r\n     \r\n     def sendGameOptions(self):\r\n         #send the game options via pickle to client\r\n"
                },
                {
                    "date": 1654812357589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,8 +177,9 @@\n         self._return = None\r\n         self.gameID = gameID\r\n     \r\n     def startGame(self):\r\n+        self.socket.timeout(3)\r\n         #send message to client to start game\r\n         self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n         print(\"gameStart sent to \" + self.addr)\r\n         #wait for client to start game\r\n@@ -190,8 +191,9 @@\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n             self.startGame()\r\n+        self.socket.timeout(None)\r\n \r\n     def sendGameSolutions(self):\r\n         self.socket.timeout(3)\r\n         #send game solution to client\r\n"
                },
                {
                    "date": 1654812404664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n         self._return = None\r\n         self.gameID = gameID\r\n     \r\n     def startGame(self):\r\n-        self.socket.timeout(3)\r\n+        self.socket.settimeout(3)\r\n         #send message to client to start game\r\n         self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n         print(\"gameStart sent to \" + self.addr)\r\n         #wait for client to start game\r\n@@ -191,9 +191,9 @@\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n             self.startGame()\r\n-        self.socket.timeout(None)\r\n+        self.socket.settimeout(None)\r\n \r\n     def sendGameSolutions(self):\r\n         self.socket.timeout(3)\r\n         #send game solution to client\r\n"
                },
                {
                    "date": 1654812409835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n             self.startGame()\r\n         self.socket.settimeout(None)\r\n \r\n     def sendGameSolutions(self):\r\n-        self.socket.timeout(3)\r\n+        self.socket.settimeout(3)\r\n         #send game solution to client\r\n         self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n         print(\"gameSolution sent to \" + self.addr)\r\n         try:\r\n@@ -205,9 +205,9 @@\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n             self.sendGameSolution()\r\n-        self.socket.timeout(None)\r\n+        self.socket.settimeout(None)\r\n \r\n     \r\n     def sendGameOptions(self):\r\n         #send the game options via pickle to client\r\n"
                },
                {
                    "date": 1654813568947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,11 +112,8 @@\n         self.gameClients = dict()\r\n         self.port = 8080\r\n         self.clientsAnswers = dict()\r\n         self.gameSolutions = dict()\r\n-        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n-        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-        self.socket.bind(('', self.port))\r\n         self.buffer = 2048\r\n         self.threadPool = []\r\n         self.GameResults = []\r\n         self.gameClients = gameClients\r\n"
                },
                {
                    "date": 1654813588338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,8 +172,11 @@\n         self.gameSolutions = gameSolutions\r\n         self.buffer = 8192\r\n         self._return = None\r\n         self.gameID = gameID\r\n+            self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n+        self.socket.bind(('', self.port))\r\n     \r\n     def startGame(self):\r\n         self.socket.settimeout(3)\r\n         #send message to client to start game\r\n"
                },
                {
                    "date": 1654813596512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n         gameID = random.randint(0, 10000)\r\n         gameData[gameID] = dict()\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n-            t = ClientGame(self.gameClients[client][\"addr\"], self.port, self.socket, self.gameOptions, self.gameSolutions, gameID)\r\n+            t = ClientGame(self.gameClients[client][\"addr\"], self.port, self.gameOptions, self.gameSolutions, gameID)\r\n             self.threadPool.append(t)\r\n         print(self.threadPool)\r\n         \r\n         #start all the threads\r\n@@ -172,9 +172,9 @@\n         self.gameSolutions = gameSolutions\r\n         self.buffer = 8192\r\n         self._return = None\r\n         self.gameID = gameID\r\n-            self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n+        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n     \r\n     def startGame(self):\r\n"
                },
                {
                    "date": 1654813647667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,13 +162,12 @@\n             \r\n \r\n \r\n class ClientGame(threading.Thread):\r\n-    def __init__(self, addr, port, socket, gameOptions, gameSolutions, gameID):\r\n+    def __init__(self, addr, port, gameOptions, gameSolutions, gameID):\r\n         threading.Thread.__init__(self)\r\n         self.addr = addr\r\n         self.port = port\r\n-        self.socket = socket\r\n         self.gameOptions = gameOptions\r\n         self.gameSolutions = gameSolutions\r\n         self.buffer = 8192\r\n         self._return = None\r\n"
                },
                {
                    "date": 1654813691009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,8 +166,9 @@\n     def __init__(self, addr, port, gameOptions, gameSolutions, gameID):\r\n         threading.Thread.__init__(self)\r\n         self.addr = addr\r\n         self.port = port\r\n+        self.gPort = 8080\r\n         self.gameOptions = gameOptions\r\n         self.gameSolutions = gameSolutions\r\n         self.buffer = 8192\r\n         self._return = None\r\n"
                },
                {
                    "date": 1654813696354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,8 @@\n         threading.Thread.__init__(self)\r\n         self.rounds = rounds #Numero de rondas associadas a cada jogo\r\n         self.gameSize = gameSize #Numero de jogadores por jogo\r\n         self.gameClients = dict()\r\n-        self.port = 8080\r\n         self.clientsAnswers = dict()\r\n         self.gameSolutions = dict()\r\n         self.buffer = 2048\r\n         self.threadPool = []\r\n"
                },
                {
                    "date": 1654813703258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,8 +109,9 @@\n         threading.Thread.__init__(self)\r\n         self.rounds = rounds #Numero de rondas associadas a cada jogo\r\n         self.gameSize = gameSize #Numero de jogadores por jogo\r\n         self.gameClients = dict()\r\n+        self.port = 8080\r\n         self.clientsAnswers = dict()\r\n         self.gameSolutions = dict()\r\n         self.buffer = 2048\r\n         self.threadPool = []\r\n"
                },
                {
                    "date": 1654813715902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,8 @@\n     def __init__(self, addr, port, gameOptions, gameSolutions, gameID):\r\n         threading.Thread.__init__(self)\r\n         self.addr = addr\r\n         self.port = port\r\n-        self.gPort = 8080\r\n         self.gameOptions = gameOptions\r\n         self.gameSolutions = gameSolutions\r\n         self.buffer = 8192\r\n         self._return = None\r\n"
                },
                {
                    "date": 1654813797957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,8 +174,9 @@\n         self.gameID = gameID\r\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n+        self.socket.setblocking(0)\r\n     \r\n     def startGame(self):\r\n         self.socket.settimeout(3)\r\n         #send message to client to start game\r\n"
                },
                {
                    "date": 1654813874122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,10 @@\n         self.socket.settimeout(None)\r\n         print(\"A espera dos resultdos do cliente \" + str(self.addr))\r\n         try:\r\n             data, recv = self.socket.recvfrom(self.buffer)\r\n-            gameRes = pickle.loads(data)\r\n+            if recv[0] == self.addr:\r\n+                gameRes = pickle.loads(data)\r\n         except pickle.UnpicklingError:\r\n             print(\"Error receiving game options\")\r\n         \r\n         gameRes = list(gameRes.values())\r\n"
                },
                {
                    "date": 1654813945054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,15 +232,18 @@\n         self.sendGameOptions()\r\n         self.sendGameSolutions()\r\n         self.socket.settimeout(None)\r\n         print(\"A espera dos resultdos do cliente \" + str(self.addr))\r\n-        try:\r\n-            data, recv = self.socket.recvfrom(self.buffer)\r\n-            if recv[0] == self.addr:\r\n-                gameRes = pickle.loads(data)\r\n-        except pickle.UnpicklingError:\r\n-            print(\"Error receiving game options\")\r\n-        \r\n+        done = 0\r\n+        while not done:\r\n+            try:\r\n+                data, recv = self.socket.recvfrom(self.buffer)\r\n+                if recv[0] == self.addr:\r\n+                    gameRes = pickle.loads(data)\r\n+                    done = 1\r\n+            except pickle.UnpicklingError:\r\n+                print(\"Error receiving game options\")\r\n+            \r\n         gameRes = list(gameRes.values())\r\n         print(\"Resultados recebidos!\")\r\n         self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n         print(\"Confirmação enviada\")\r\n"
                },
                {
                    "date": 1654814202131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n         self.socket.bind(('', self.port))\r\n         self.socket.setblocking(0)\r\n     \r\n     def startGame(self):\r\n-        self.socket.settimeout(3)\r\n+        self.socket.settimeout(None)\r\n         #send message to client to start game\r\n         self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n         print(\"gameStart sent to \" + self.addr)\r\n         #wait for client to start game\r\n"
                },
                {
                    "date": 1654814222668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n         self.socket.bind(('', self.port))\r\n         self.socket.setblocking(0)\r\n     \r\n     def startGame(self):\r\n-        self.socket.settimeout(None)\r\n+        self.socket.settimeout(3)\r\n         #send message to client to start game\r\n         self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n         print(\"gameStart sent to \" + self.addr)\r\n         #wait for client to start game\r\n"
                },
                {
                    "date": 1654814290174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,10 +184,10 @@\n         print(\"gameStart sent to \" + self.addr)\r\n         #wait for client to start game\r\n         try:\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n-            print(\"gameStart received from \" + self.addr)\r\n             if data.decode().split('-')[0] == \"gameStartack\":\r\n+                print(\"gameStart received from \" + self.addr)\r\n                 print(\"Game started\")\r\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n"
                },
                {
                    "date": 1654814491695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,9 +190,9 @@\n                 print(\"Game started\")\r\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n-            self.startGame()\r\n+            #self.startGame()\r\n         self.socket.settimeout(None)\r\n \r\n     def sendGameSolutions(self):\r\n         self.socket.settimeout(3)\r\n@@ -204,9 +204,9 @@\n             if data.decode().split('-')[0] == \"gameSolutionack\":\r\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n-            self.sendGameSolution()\r\n+            #self.sendGameSolution()\r\n         self.socket.settimeout(None)\r\n \r\n     \r\n     def sendGameOptions(self):\r\n"
                },
                {
                    "date": 1654814511440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,9 +221,9 @@\n                 print(\"Game options sent\")\r\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n-            self.sendGameOptions()\r\n+            #self.sendGameOptions()\r\n             \r\n     \r\n     def run(self):\r\n         global gameData\r\n"
                },
                {
                    "date": 1654814563838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,23 +190,23 @@\n                 print(\"Game started\")\r\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n-            #self.startGame()\r\n+            self.startGame()\r\n         self.socket.settimeout(None)\r\n \r\n     def sendGameSolutions(self):\r\n         self.socket.settimeout(3)\r\n-        #send game solution to client\r\n+        send game solution to client\r\n         self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n         print(\"gameSolution sent to \" + self.addr)\r\n         try:\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n             if data.decode().split('-')[0] == \"gameSolutionack\":\r\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n-            #self.sendGameSolution()\r\n+            self.sendGameSolution()\r\n         self.socket.settimeout(None)\r\n \r\n     \r\n     def sendGameOptions(self):\r\n@@ -221,9 +221,9 @@\n                 print(\"Game options sent\")\r\n                 return 1\r\n         except socket.timeout:\r\n             print(\"Timeout\")\r\n-            #self.sendGameOptions()\r\n+            self.sendGameOptions()\r\n             \r\n     \r\n     def run(self):\r\n         global gameData\r\n"
                },
                {
                    "date": 1654814659920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,11 @@\n         self.port = 8081\r\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n+        #reuse port and reuse addr socket\r\n+        self.socket(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n+        self.socket(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\r\n         self.buffer = 2048\r\n         self.hostname = socket.gethostname()\r\n     def addClient(self, hostname, addr, port):\r\n         global conClients, nClients\r\n@@ -195,9 +198,9 @@\n         self.socket.settimeout(None)\r\n \r\n     def sendGameSolutions(self):\r\n         self.socket.settimeout(3)\r\n-        send game solution to client\r\n+        #send game solution to client\r\n         self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n         print(\"gameSolution sent to \" + self.addr)\r\n         try:\r\n             data, addr = self.socket.recvfrom(self.buffer)\r\n"
                },
                {
                    "date": 1654814671083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,8 +178,10 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         self.socket.setblocking(0)\r\n+        self.socket(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n+        self.socket(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\r\n     \r\n     def startGame(self):\r\n         self.socket.settimeout(3)\r\n         #send message to client to start game\r\n"
                },
                {
                    "date": 1654814703115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,10 +178,10 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         self.socket.setblocking(0)\r\n-        self.socket(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-        self.socket(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\r\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\r\n     \r\n     def startGame(self):\r\n         self.socket.settimeout(3)\r\n         #send message to client to start game\r\n"
                },
                {
                    "date": 1654814718532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         #reuse port and reuse addr socket\r\n-        self.socket(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-        self.socket(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\r\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\r\n         self.buffer = 2048\r\n         self.hostname = socket.gethostname()\r\n     def addClient(self, hostname, addr, port):\r\n         global conClients, nClients\r\n"
                },
                {
                    "date": 1654814875850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,8 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         self.socket.setblocking(0)\r\n-        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\r\n     \r\n     def startGame(self):\r\n         self.socket.settimeout(3)\r\n"
                },
                {
                    "date": 1654814881081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,8 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         #reuse port and reuse addr socket\r\n-        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\r\n         self.buffer = 2048\r\n         self.hostname = socket.gethostname()\r\n     def addClient(self, hostname, addr, port):\r\n"
                },
                {
                    "date": 1654815022959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,15 +201,15 @@\n         self.socket.settimeout(3)\r\n         #send game solution to client\r\n         self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n         print(\"gameSolution sent to \" + self.addr)\r\n-        try:\r\n-            data, addr = self.socket.recvfrom(self.buffer)\r\n-            if data.decode().split('-')[0] == \"gameSolutionack\":\r\n-                return 1\r\n-        except socket.timeout:\r\n-            print(\"Timeout\")\r\n-            self.sendGameSolution()\r\n+        while True:\r\n+            try:\r\n+                data, addr = self.socket.recvfrom(self.buffer)\r\n+                if data.decode().split('-')[0] == \"gameSolutionack\":\r\n+                    return 1\r\n+            except socket.timeout:\r\n+                print(\"Timeout\")\r\n         self.socket.settimeout(None)\r\n \r\n     \r\n     def sendGameOptions(self):\r\n"
                },
                {
                    "date": 1654815031252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,12 +205,13 @@\n         while True:\r\n             try:\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if data.decode().split('-')[0] == \"gameSolutionack\":\r\n+                    self.socket.settimeout(None)\r\n                     return 1\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n-        self.socket.settimeout(None)\r\n+        \r\n \r\n     \r\n     def sendGameOptions(self):\r\n         #send the game options via pickle to client\r\n"
                },
                {
                    "date": 1654815051387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,18 +217,18 @@\n         #send the game options via pickle to client\r\n         self.socket.sendto(pickle.dumps(self.gameOptions), (self.addr, self.port))\r\n         print(\"gameOptions sent to \" + self.addr)\r\n         #wait for client to receive game options\r\n-        try:\r\n-            data, addr = self.socket.recvfrom(self.buffer)\r\n-            print(\"gameOptions received from \" + self.addr)\r\n-            if data.decode().split('-')[0] == \"gameOptionsack\":\r\n-                print(\"Game options sent\")\r\n-                return 1\r\n-        except socket.timeout:\r\n-            print(\"Timeout\")\r\n-            self.sendGameOptions()\r\n-            \r\n+        while True:\r\n+            try:\r\n+                data, addr = self.socket.recvfrom(self.buffer)\r\n+                print(\"gameOptions received from \" + self.addr)\r\n+                if data.decode().split('-')[0] == \"gameOptionsack\":\r\n+                    print(\"Game options sent\")\r\n+                    return 1\r\n+            except socket.timeout:\r\n+                print(\"Timeout\")\r\n+                \r\n     \r\n     def run(self):\r\n         global gameData\r\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n"
                },
                {
                    "date": 1654815061924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,8 +213,9 @@\n         \r\n \r\n     \r\n     def sendGameOptions(self):\r\n+        self.socket.settimeout(3)\r\n         #send the game options via pickle to client\r\n         self.socket.sendto(pickle.dumps(self.gameOptions), (self.addr, self.port))\r\n         print(\"gameOptions sent to \" + self.addr)\r\n         #wait for client to receive game options\r\n"
                },
                {
                    "date": 1654815072939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,8 +224,9 @@\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 print(\"gameOptions received from \" + self.addr)\r\n                 if data.decode().split('-')[0] == \"gameOptionsack\":\r\n                     print(\"Game options sent\")\r\n+                    self.socket.settimeout(None)\r\n                     return 1\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n                 \r\n"
                },
                {
                    "date": 1654815088377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,18 +185,20 @@\n         #send message to client to start game\r\n         self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n         print(\"gameStart sent to \" + self.addr)\r\n         #wait for client to start game\r\n-        try:\r\n-            data, addr = self.socket.recvfrom(self.buffer)\r\n-            if data.decode().split('-')[0] == \"gameStartack\":\r\n-                print(\"gameStart received from \" + self.addr)\r\n-                print(\"Game started\")\r\n-                return 1\r\n-        except socket.timeout:\r\n-            print(\"Timeout\")\r\n-            self.startGame()\r\n-        self.socket.settimeout(None)\r\n+        while True:\r\n+            try:\r\n+                data, addr = self.socket.recvfrom(self.buffer)\r\n+                if data.decode().split('-')[0] == \"gameStartack\":\r\n+                    print(\"gameStart received from \" + self.addr)\r\n+                    print(\"Game started\")\r\n+                     self.socket.settimeout(None)\r\n+                    return 1\r\n+            except socket.timeout:\r\n+                print(\"Timeout\")\r\n+                self.startGame()\r\n+       \r\n \r\n     def sendGameSolutions(self):\r\n         self.socket.settimeout(3)\r\n         #send game solution to client\r\n"
                },
                {
                    "date": 1654815098571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,9 +191,9 @@\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if data.decode().split('-')[0] == \"gameStartack\":\r\n                     print(\"gameStart received from \" + self.addr)\r\n                     print(\"Game started\")\r\n-                     self.socket.settimeout(None)\r\n+                    self.socket.settimeout(None)\r\n                     return 1\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n                 self.startGame()\r\n"
                },
                {
                    "date": 1654815138923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,9 +195,9 @@\n                     self.socket.settimeout(None)\r\n                     return 1\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n-                self.startGame()\r\n+                \r\n        \r\n \r\n     def sendGameSolutions(self):\r\n         self.socket.settimeout(3)\r\n"
                },
                {
                    "date": 1654815499154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,8 @@\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         self.sendGameSolutions()\r\n-        self.socket.settimeout(None)\r\n         print(\"A espera dos resultdos do cliente \" + str(self.addr))\r\n         done = 0\r\n         while not done:\r\n             try:\r\n"
                },
                {
                    "date": 1654815895942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n         self.socket.setblocking(0)\r\n-        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\r\n+        \r\n     \r\n     def startGame(self):\r\n         self.socket.settimeout(3)\r\n         #send message to client to start game\r\n"
                },
                {
                    "date": 1654815919600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,23 +164,21 @@\n             \r\n \r\n \r\n class ClientGame(threading.Thread):\r\n-    def __init__(self, addr, port, gameOptions, gameSolutions, gameID):\r\n+    def __init__(self, addr, port, gameOptions, gameSolutions, gameID, socket):\r\n         threading.Thread.__init__(self)\r\n         self.addr = addr\r\n         self.port = port\r\n         self.gameOptions = gameOptions\r\n         self.gameSolutions = gameSolutions\r\n         self.buffer = 8192\r\n         self._return = None\r\n         self.gameID = gameID\r\n-        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n-        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-        self.socket.bind(('', self.port))\r\n+        self.socket = socket\r\n         self.socket.setblocking(0)\r\n-        \r\n     \r\n+    \r\n     def startGame(self):\r\n         self.socket.settimeout(3)\r\n         #send message to client to start game\r\n         self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n"
                },
                {
                    "date": 1654815925976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,8 +118,11 @@\n         self.buffer = 2048\r\n         self.threadPool = []\r\n         self.GameResults = []\r\n         self.gameClients = gameClients\r\n+        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n+        self.socket.bind(('', self.port))\r\n         \r\n \r\n     def getWinner(self):   \r\n         winner = None\r\n"
                },
                {
                    "date": 1654815935104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         gameID = random.randint(0, 10000)\r\n         gameData[gameID] = dict()\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n-            t = ClientGame(self.gameClients[client][\"addr\"], self.port, self.gameOptions, self.gameSolutions, gameID)\r\n+            t = ClientGame(self.gameClients[client][\"addr\"], self.port, self.gameOptions, self.gameSolutions, gameID, self.socket)\r\n             self.threadPool.append(t)\r\n         print(self.threadPool)\r\n         \r\n         #start all the threads\r\n"
                },
                {
                    "date": 1654816074402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n         self.socket.setblocking(0)\r\n     \r\n     \r\n     def startGame(self):\r\n-        self.socket.settimeout(3)\r\n+        self.socket.settimeout(10)\r\n         #send message to client to start game\r\n         self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n         print(\"gameStart sent to \" + self.addr)\r\n         #wait for client to start game\r\n@@ -200,9 +200,9 @@\n                 \r\n        \r\n \r\n     def sendGameSolutions(self):\r\n-        self.socket.settimeout(3)\r\n+        self.socket.settimeout(10)\r\n         #send game solution to client\r\n         self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n         print(\"gameSolution sent to \" + self.addr)\r\n         while True:\r\n@@ -216,9 +216,9 @@\n         \r\n \r\n     \r\n     def sendGameOptions(self):\r\n-        self.socket.settimeout(3)\r\n+        self.socket.settimeout(10)\r\n         #send the game options via pickle to client\r\n         self.socket.sendto(pickle.dumps(self.gameOptions), (self.addr, self.port))\r\n         print(\"gameOptions sent to \" + self.addr)\r\n         #wait for client to receive game options\r\n"
                },
                {
                    "date": 1654816273885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,13 +183,13 @@\n     \r\n     def startGame(self):\r\n         self.socket.settimeout(10)\r\n         #send message to client to start game\r\n-        self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n-        print(\"gameStart sent to \" + self.addr)\r\n         #wait for client to start game\r\n         while True:\r\n             try:\r\n+                self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n+                print(\"gameStart sent to \" + self.addr)\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if data.decode().split('-')[0] == \"gameStartack\":\r\n                     print(\"gameStart received from \" + self.addr)\r\n                     print(\"Game started\")\r\n@@ -202,12 +202,12 @@\n \r\n     def sendGameSolutions(self):\r\n         self.socket.settimeout(10)\r\n         #send game solution to client\r\n-        self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n         print(\"gameSolution sent to \" + self.addr)\r\n         while True:\r\n             try:\r\n+                self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if data.decode().split('-')[0] == \"gameSolutionack\":\r\n                     self.socket.settimeout(None)\r\n                     return 1\r\n"
                },
                {
                    "date": 1654816280947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,13 +218,13 @@\n     \r\n     def sendGameOptions(self):\r\n         self.socket.settimeout(10)\r\n         #send the game options via pickle to client\r\n-        self.socket.sendto(pickle.dumps(self.gameOptions), (self.addr, self.port))\r\n         print(\"gameOptions sent to \" + self.addr)\r\n         #wait for client to receive game options\r\n         while True:\r\n             try:\r\n+                self.socket.sendto(pickle.dumps(self.gameOptions), (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 print(\"gameOptions received from \" + self.addr)\r\n                 if data.decode().split('-')[0] == \"gameOptionsack\":\r\n                     print(\"Game options sent\")\r\n"
                },
                {
                    "date": 1654816568048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,9 +222,10 @@\n         print(\"gameOptions sent to \" + self.addr)\r\n         #wait for client to receive game options\r\n         while True:\r\n             try:\r\n-                self.socket.sendto(pickle.dumps(self.gameOptions), (self.addr, self.port))\r\n+                var = pickle.dumps(self.gameOptions)\r\n+                self.socket.sendto(var, (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 print(\"gameOptions received from \" + self.addr)\r\n                 if data.decode().split('-')[0] == \"gameOptionsack\":\r\n                     print(\"Game options sent\")\r\n"
                },
                {
                    "date": 1654817319622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,9 +207,9 @@\n         while True:\r\n             try:\r\n                 self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n-                if data.decode().split('-')[0] == \"gameSolutionack\":\r\n+                if data.decode().split('-')[0] == \"gameSolutionsack\":\r\n                     self.socket.settimeout(None)\r\n                     return 1\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n"
                },
                {
                    "date": 1654817427816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,11 +207,12 @@\n         while True:\r\n             try:\r\n                 self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n-                if data.decode().split('-')[0] == \"gameSolutionsack\":\r\n-                    self.socket.settimeout(None)\r\n-                    return 1\r\n+                if addr[0] == self.addr:\r\n+                    if data.decode().split('-')[0] == \"gameSolutionsack\":\r\n+                        self.socket.settimeout(None)\r\n+                        return 1\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n         \r\n \r\n@@ -226,12 +227,13 @@\n                 var = pickle.dumps(self.gameOptions)\r\n                 self.socket.sendto(var, (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 print(\"gameOptions received from \" + self.addr)\r\n-                if data.decode().split('-')[0] == \"gameOptionsack\":\r\n-                    print(\"Game options sent\")\r\n-                    self.socket.settimeout(None)\r\n-                    return 1\r\n+                if addr[0] == self.addr:\r\n+                    if data.decode().split('-')[0] == \"gameOptionsack\":\r\n+                        print(\"Game options sent\")\r\n+                        self.socket.settimeout(None)\r\n+                        return 1\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n                 \r\n     \r\n"
                },
                {
                    "date": 1654817455901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,20 +189,21 @@\n             try:\r\n                 self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n                 print(\"gameStart sent to \" + self.addr)\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n-                if data.decode().split('-')[0] == \"gameStartack\":\r\n-                    print(\"gameStart received from \" + self.addr)\r\n-                    print(\"Game started\")\r\n-                    self.socket.settimeout(None)\r\n-                    return 1\r\n+                if addr[0] == self.addr:\r\n+                    if data.decode().split('-')[0] == \"gameStartack\":\r\n+                        print(\"gameStart received from \" + self.addr)\r\n+                        print(\"Game started\")\r\n+                        self.socket.settimeout(None)\r\n+                        return 1\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n                 \r\n        \r\n \r\n     def sendGameSolutions(self):\r\n-        self.socket.settimeout(10)\r\n+        self.socket.settimeout(3)\r\n         #send game solution to client\r\n         print(\"gameSolution sent to \" + self.addr)\r\n         while True:\r\n             try:\r\n@@ -217,9 +218,9 @@\n         \r\n \r\n     \r\n     def sendGameOptions(self):\r\n-        self.socket.settimeout(10)\r\n+        self.socket.settimeout(3)\r\n         #send the game options via pickle to client\r\n         print(\"gameOptions sent to \" + self.addr)\r\n         #wait for client to receive game options\r\n         while True:\r\n"
                },
                {
                    "date": 1654817632421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n         self.socket.setblocking(0)\r\n     \r\n     \r\n     def startGame(self):\r\n-        self.socket.settimeout(10)\r\n+        self.socket.settimeout(5)\r\n         #send message to client to start game\r\n         #wait for client to start game\r\n         while True:\r\n             try:\r\n"
                },
                {
                    "date": 1654817721354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,46 +198,46 @@\n                         return 1\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n                 \r\n-       \r\n-\r\n-    def sendGameSolutions(self):\r\n+      \r\n+    def sendGameOptions(self):\r\n         self.socket.settimeout(3)\r\n-        #send game solution to client\r\n-        print(\"gameSolution sent to \" + self.addr)\r\n+        #send the game options via pickle to client\r\n+        print(\"gameOptions sent to \" + self.addr)\r\n+        #wait for client to receive game options\r\n         while True:\r\n             try:\r\n-                self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n+                var = pickle.dumps(self.gameOptions)\r\n+                self.socket.sendto(var, (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n+                print(\"gameOptions received from \" + self.addr)\r\n                 if addr[0] == self.addr:\r\n-                    if data.decode().split('-')[0] == \"gameSolutionsack\":\r\n+                    if data.decode().split('-')[0] == \"gameOptionsack\":\r\n+                        print(\"Game options sent\")\r\n                         self.socket.settimeout(None)\r\n                         return 1\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n-        \r\n+                \r\n \r\n-    \r\n-    def sendGameOptions(self):\r\n+    def sendGameSolutions(self):\r\n         self.socket.settimeout(3)\r\n-        #send the game options via pickle to client\r\n-        print(\"gameOptions sent to \" + self.addr)\r\n-        #wait for client to receive game options\r\n+        #send game solution to client\r\n+        print(\"gameSolution sent to \" + self.addr)\r\n         while True:\r\n             try:\r\n-                var = pickle.dumps(self.gameOptions)\r\n-                self.socket.sendto(var, (self.addr, self.port))\r\n+                self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n-                print(\"gameOptions received from \" + self.addr)\r\n                 if addr[0] == self.addr:\r\n-                    if data.decode().split('-')[0] == \"gameOptionsack\":\r\n-                        print(\"Game options sent\")\r\n+                    if data.decode().split('-')[0] == \"gameSolutionsack\":\r\n                         self.socket.settimeout(None)\r\n                         return 1\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n-                \r\n+        \r\n+\r\n+  \r\n     \r\n     def run(self):\r\n         global gameData\r\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n"
                },
                {
                    "date": 1654817801693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n                     if data.decode().split('-')[0] == \"gameStartack\":\r\n                         print(\"gameStart received from \" + self.addr)\r\n                         print(\"Game started\")\r\n                         self.socket.settimeout(None)\r\n-                        return 1\r\n+                        break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n                 \r\n       \r\n@@ -214,9 +214,9 @@\n                 if addr[0] == self.addr:\r\n                     if data.decode().split('-')[0] == \"gameOptionsack\":\r\n                         print(\"Game options sent\")\r\n                         self.socket.settimeout(None)\r\n-                        return 1\r\n+                        break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n                 \r\n \r\n"
                },
                {
                    "date": 1654817819536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,9 +230,9 @@\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if addr[0] == self.addr:\r\n                     if data.decode().split('-')[0] == \"gameSolutionsack\":\r\n                         self.socket.settimeout(None)\r\n-                        return 1\r\n+                        break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n         \r\n \r\n"
                },
                {
                    "date": 1654817824616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,9 @@\n                         self.socket.settimeout(None)\r\n                         break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n-                \r\n+        time.sleep(0.1)\r\n       \r\n     def sendGameOptions(self):\r\n         self.socket.settimeout(3)\r\n         #send the game options via pickle to client\r\n"
                },
                {
                    "date": 1654817832832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,9 +218,9 @@\n                         break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n                 \r\n-\r\n+        time.sleep(0.1)\r\n     def sendGameSolutions(self):\r\n         self.socket.settimeout(3)\r\n         #send game solution to client\r\n         print(\"gameSolution sent to \" + self.addr)\r\n@@ -233,9 +233,9 @@\n                         self.socket.settimeout(None)\r\n                         break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n-        \r\n+        time.sleep(0.1)\r\n \r\n   \r\n     \r\n     def run(self):\r\n"
                },
                {
                    "date": 1654817901158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,9 +209,8 @@\n             try:\r\n                 var = pickle.dumps(self.gameOptions)\r\n                 self.socket.sendto(var, (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n-                print(\"gameOptions received from \" + self.addr)\r\n                 if addr[0] == self.addr:\r\n                     if data.decode().split('-')[0] == \"gameOptionsack\":\r\n                         print(\"Game options sent\")\r\n                         self.socket.settimeout(None)\r\n"
                },
                {
                    "date": 1654817909479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,9 @@\n                 self.socket.sendto(var, (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if addr[0] == self.addr:\r\n                     if data.decode().split('-')[0] == \"gameOptionsack\":\r\n-                        print(\"Game options sent\")\r\n+                        print(\"Game options confirmation\")\r\n                         self.socket.settimeout(None)\r\n                         break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n"
                },
                {
                    "date": 1654817921332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,8 +228,9 @@\n                 self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if addr[0] == self.addr:\r\n                     if data.decode().split('-')[0] == \"gameSolutionsack\":\r\n+                        print(\"Game solutions confirmation\")\r\n                         self.socket.settimeout(None)\r\n                         break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n"
                },
                {
                    "date": 1654818000624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,11 +118,8 @@\n         self.buffer = 2048\r\n         self.threadPool = []\r\n         self.GameResults = []\r\n         self.gameClients = gameClients\r\n-        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n-        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-        self.socket.bind(('', self.port))\r\n         \r\n \r\n     def getWinner(self):   \r\n         winner = None\r\n"
                },
                {
                    "date": 1654818009158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,8 +175,11 @@\n         self._return = None\r\n         self.gameID = gameID\r\n         self.socket = socket\r\n         self.socket.setblocking(0)\r\n+        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n+        self.socket.bind(('', self.port))\r\n     \r\n     \r\n     def startGame(self):\r\n         self.socket.settimeout(5)\r\n"
                },
                {
                    "date": 1654818021400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,18 +164,17 @@\n             \r\n \r\n \r\n class ClientGame(threading.Thread):\r\n-    def __init__(self, addr, port, gameOptions, gameSolutions, gameID, socket):\r\n+    def __init__(self, addr, port, gameOptions, gameSolutions, gameID):\r\n         threading.Thread.__init__(self)\r\n         self.addr = addr\r\n         self.port = port\r\n         self.gameOptions = gameOptions\r\n         self.gameSolutions = gameSolutions\r\n         self.buffer = 8192\r\n         self._return = None\r\n         self.gameID = gameID\r\n-        self.socket = socket\r\n         self.socket.setblocking(0)\r\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n"
                },
                {
                    "date": 1654818027915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n         gameID = random.randint(0, 10000)\r\n         gameData[gameID] = dict()\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n-            t = ClientGame(self.gameClients[client][\"addr\"], self.port, self.gameOptions, self.gameSolutions, gameID, self.socket)\r\n+            t = ClientGame(self.gameClients[client][\"addr\"], self.port, self.gameOptions, self.gameSolutions, gameID)\r\n             self.threadPool.append(t)\r\n         print(self.threadPool)\r\n         \r\n         #start all the threads\r\n"
                },
                {
                    "date": 1654818051290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,8 @@\n         self.gameSolutions = gameSolutions\r\n         self.buffer = 8192\r\n         self._return = None\r\n         self.gameID = gameID\r\n-        self.socket.setblocking(0)\r\n         self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n         self.socket.bind(('', self.port))\r\n     \r\n"
                },
                {
                    "date": 1654818358948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,8 +146,10 @@\n         pprint.pprint(self.gameClients)\r\n         gameID = random.randint(0, 10000)\r\n         gameData[gameID] = dict()\r\n         for client in self.gameClients:\r\n+            varOptions = self.gameOptions()\r\n+            varSolutions = self.gameSolutions()\r\n             print(\"startedThread\")\r\n             t = ClientGame(self.gameClients[client][\"addr\"], self.port, self.gameOptions, self.gameSolutions, gameID)\r\n             self.threadPool.append(t)\r\n         print(self.threadPool)\r\n"
                },
                {
                    "date": 1654818376012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n         for client in self.gameClients:\r\n             varOptions = self.gameOptions()\r\n             varSolutions = self.gameSolutions()\r\n             print(\"startedThread\")\r\n-            t = ClientGame(self.gameClients[client][\"addr\"], self.port, self.gameOptions, self.gameSolutions, gameID)\r\n+            t = ClientGame(self.gameClients[client][\"addr\"], self.port, varOptions, varSolutions, gameID)\r\n             self.threadPool.append(t)\r\n         print(self.threadPool)\r\n         \r\n         #start all the threads\r\n"
                },
                {
                    "date": 1654818417251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,8 +145,10 @@\n         self.gameOptions = gg.getOptions()\r\n         pprint.pprint(self.gameClients)\r\n         gameID = random.randint(0, 10000)\r\n         gameData[gameID] = dict()\r\n+        varOptions = dict()\r\n+        varSolutions = dict\r\n         for client in self.gameClients:\r\n             varOptions = self.gameOptions()\r\n             varSolutions = self.gameSolutions()\r\n             print(\"startedThread\")\r\n"
                },
                {
                    "date": 1654818522426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,10 +140,10 @@\n     def run(self):\r\n         global gameData\r\n         gg = gameGenerator.gameGenerator(self.rounds)\r\n         gg.generateGame()\r\n-        self.gameSolutions = gg.getSongs()\r\n-        self.gameOptions = gg.getOptions()\r\n+        gameSolutions = gg.getSongs()\r\n+        gameOptions = gg.getOptions()\r\n         pprint.pprint(self.gameClients)\r\n         gameID = random.randint(0, 10000)\r\n         gameData[gameID] = dict()\r\n         varOptions = dict()\r\n"
                },
                {
                    "date": 1654818539340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,15 +145,13 @@\n         gameOptions = gg.getOptions()\r\n         pprint.pprint(self.gameClients)\r\n         gameID = random.randint(0, 10000)\r\n         gameData[gameID] = dict()\r\n-        varOptions = dict()\r\n-        varSolutions = dict\r\n         for client in self.gameClients:\r\n             varOptions = self.gameOptions()\r\n             varSolutions = self.gameSolutions()\r\n             print(\"startedThread\")\r\n-            t = ClientGame(self.gameClients[client][\"addr\"], self.port, varOptions, varSolutions, gameID)\r\n+            t = ClientGame(self.gameClients[client][\"addr\"], self.port, gameOptions, gameSolutions, gameID)\r\n             self.threadPool.append(t)\r\n         print(self.threadPool)\r\n         \r\n         #start all the threads\r\n"
                },
                {
                    "date": 1654818561894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,270 @@\n+import threading, time, sys, json, random, socket, pprint, pickle, gameGenerator, pprint\r\n+\r\n+#Global Vars\r\n+conClients = dict()\r\n+rConClients = dict()\r\n+nClients = 0\r\n+\r\n+gameData = dict()\r\n+\r\n+\r\n+\"\"\"\r\n+{gameID <randomly generated> : { 'addr' : {\r\n+                                            \r\n+}}\r\n+\r\n+\r\n+\r\n+\"\"\"\r\n+\r\n+\r\n+\r\n+#Classe para gestão de autenticação de clients\r\n+\r\n+class ClientsManager(threading.Thread):\r\n+    def __init__(self):\r\n+        threading.Thread.__init__(self)\r\n+        self.port = 8081\r\n+        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n+        self.socket.bind(('', self.port))\r\n+        #reuse port and reuse addr socket\r\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\r\n+        self.buffer = 2048\r\n+        self.hostname = socket.gethostname()\r\n+    def addClient(self, hostname, addr, port):\r\n+        global conClients, nClients\r\n+        if hostname not in conClients.keys():\r\n+            conClients[hostname] = {\r\n+                \"addr\": addr,\r\n+                \"status\": 1, #0 = not connected, 1 = connected, 2 = ready, 3 = ingame\r\n+            }\r\n+            nClients += 1\r\n+            print(\"Client \" + hostname + \" added\")\r\n+            return 1\r\n+        else:\r\n+            print(\"Client \" + hostname + \" already exists\")\r\n+            return 0\r\n+        \r\n+    def removeClient(self, hostname):\r\n+        if hostname in conClients.keys():\r\n+            conClients.pop(hostname)\r\n+            print(\"Client \" + hostname + \" removed\")\r\n+            return 1\r\n+        else:\r\n+            print(\"Client \" + hostname + \" not found\")\r\n+            return 0\r\n+    def run(self):\r\n+        global conClients, nClients\r\n+        print(\"À espera de clientes...\")\r\n+        while True:\r\n+            data, addr = self.socket.recvfrom(self.buffer)\r\n+            msg = data.decode().split('-')\r\n+            if msg[0] == \"hello\":\r\n+                if self.addClient(msg[1], addr[0], addr[1]):\r\n+                    self.socket.sendto(\"hello-ack\".encode(), addr)\r\n+                    print(\"hello ack sent to \" + msg[1])\r\n+                else:\r\n+                    self.socket.sendto(\"You are already connected\".encode(), addr)\r\n+            elif msg[0] == \"disconnect\":\r\n+                if self.removeClient(msg[1]):\r\n+                    self.socket.sendto(\"disconnect-ack\".encode(), addr)\r\n+                    print(\"disconnect ack sent to \" + msg[1])\r\n+                else:\r\n+                    self.socket.sendto(\"You are not connected\".encode(), addr)\r\n+\r\n+\r\n+\r\n+class GameManager(threading.Thread):\r\n+    def __init__(self, rounds, gameSize):\r\n+        threading.Thread.__init__(self)\r\n+        self.rounds = rounds #Numero de rondas associadas a cada jogo\r\n+        self.gameSize = gameSize #Numero de jogadores por jogo\r\n+        self.gameClients = dict()    \r\n+    \r\n+    def selectClientsForGame(self):\r\n+        global conClients\r\n+        for client in conClients:\r\n+            if conClients[client][\"status\"] == 1:\r\n+                conClients[client][\"status\"] = 2\r\n+                self.gameClients[client] = conClients[client]\r\n+        print(\"Selected Clients for game: \")\r\n+    \r\n+    \r\n+    def run(self):\r\n+        global nClients\r\n+        print(\"À espera de jogos....\")\r\n+        while True:\r\n+            while nClients < self.gameSize:\r\n+                time.sleep(0.1)\r\n+            print(\"jogo a iniciar...\\n\\n\\n\")\r\n+            self.selectClientsForGame()\r\n+            gm = GameServer(3, 1, self.gameClients)\r\n+            gm.start()\r\n+            nClients = 0\r\n+        \r\n+        \r\n+\r\n+\r\n+class GameServer(threading.Thread):\r\n+    def __init__(self, rounds, gameSize, gameClients):\r\n+        threading.Thread.__init__(self)\r\n+        self.rounds = rounds #Numero de rondas associadas a cada jogo\r\n+        self.gameSize = gameSize #Numero de jogadores por jogo\r\n+        self.gameClients = dict()\r\n+        self.port = 8080\r\n+        self.clientsAnswers = dict()\r\n+        self.gameSolutions = dict()\r\n+        self.buffer = 2048\r\n+        self.threadPool = []\r\n+        self.GameResults = []\r\n+        self.gameClients = gameClients\r\n+        \r\n+\r\n+    def getWinner(self):   \r\n+        winner = None\r\n+        winnerScore = 0\r\n+        winnerTime = 0\r\n+        for client in self.clientsAnswers:\r\n+            score = 0\r\n+            for round in self.clientsAnswers[client]:\r\n+                if self.clientsAnswers[client][round][\"answer\"] == self.gameSolutions[round]:\r\n+                    score += 1\r\n+                    time = self.clientsAnswers[client][round][\"time\"]\r\n+            if score > winnerScore and time < winnerTime:\r\n+                winner = client\r\n+                winnerScore = score\r\n+                winnerTime = time\r\n+        return winner\r\n+\r\n+    def run(self):\r\n+        global gameData\r\n+        gg = gameGenerator.gameGenerator(self.rounds)\r\n+        gg.generateGame()\r\n+        gameSolutions = gg.getSongs()\r\n+        gameOptions = gg.getOptions()\r\n+        pprint.pprint(self.gameClients)\r\n+        gameID = random.randint(0, 10000)\r\n+        gameData[gameID] = dict()\r\n+        for client in self.gameClients:\r\n+            print(\"startedThread\")\r\n+            t = ClientGame(self.gameClients[client][\"addr\"], self.port, gameOptions, gameSolutions, gameID)\r\n+            self.threadPool.append(t)\r\n+        print(self.threadPool)\r\n+        \r\n+        #start all the threads\r\n+        for thread in self.threadPool:\r\n+            thread.start()\r\n+            print(\"thread started\")\r\n+        for thread in self.threadPool:\r\n+            thread.join()\r\n+        print(gameData)\r\n+        print(\"Game Results: \")\r\n+        \r\n+            \r\n+\r\n+\r\n+class ClientGame(threading.Thread):\r\n+    def __init__(self, addr, port, gameOptions, gameSolutions, gameID):\r\n+        threading.Thread.__init__(self)\r\n+        self.addr = addr\r\n+        self.port = port\r\n+        self.gameOptions = gameOptions\r\n+        self.gameSolutions = gameSolutions\r\n+        self.buffer = 8192\r\n+        self._return = None\r\n+        self.gameID = gameID\r\n+        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n+        self.socket.bind(('', self.port))\r\n+    \r\n+    \r\n+    def startGame(self):\r\n+        self.socket.settimeout(5)\r\n+        #send message to client to start game\r\n+        #wait for client to start game\r\n+        while True:\r\n+            try:\r\n+                self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n+                print(\"gameStart sent to \" + self.addr)\r\n+                data, addr = self.socket.recvfrom(self.buffer)\r\n+                if addr[0] == self.addr:\r\n+                    if data.decode().split('-')[0] == \"gameStartack\":\r\n+                        print(\"gameStart received from \" + self.addr)\r\n+                        print(\"Game started\")\r\n+                        self.socket.settimeout(None)\r\n+                        break\r\n+            except socket.timeout:\r\n+                print(\"Timeout\")\r\n+        time.sleep(0.1)\r\n+      \r\n+    def sendGameOptions(self):\r\n+        self.socket.settimeout(3)\r\n+        #send the game options via pickle to client\r\n+        print(\"gameOptions sent to \" + self.addr)\r\n+        #wait for client to receive game options\r\n+        while True:\r\n+            try:\r\n+                var = pickle.dumps(self.gameOptions)\r\n+                self.socket.sendto(var, (self.addr, self.port))\r\n+                data, addr = self.socket.recvfrom(self.buffer)\r\n+                if addr[0] == self.addr:\r\n+                    if data.decode().split('-')[0] == \"gameOptionsack\":\r\n+                        print(\"Game options confirmation\")\r\n+                        self.socket.settimeout(None)\r\n+                        break\r\n+            except socket.timeout:\r\n+                print(\"Timeout\")\r\n+                \r\n+        time.sleep(0.1)\r\n+    def sendGameSolutions(self):\r\n+        self.socket.settimeout(3)\r\n+        #send game solution to client\r\n+        print(\"gameSolution sent to \" + self.addr)\r\n+        while True:\r\n+            try:\r\n+                self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n+                data, addr = self.socket.recvfrom(self.buffer)\r\n+                if addr[0] == self.addr:\r\n+                    if data.decode().split('-')[0] == \"gameSolutionsack\":\r\n+                        print(\"Game solutions confirmation\")\r\n+                        self.socket.settimeout(None)\r\n+                        break\r\n+            except socket.timeout:\r\n+                print(\"Timeout\")\r\n+        time.sleep(0.1)\r\n+\r\n+  \r\n+    \r\n+    def run(self):\r\n+        global gameData\r\n+        print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n+        self.startGame()\r\n+        self.sendGameOptions()\r\n+        self.sendGameSolutions()\r\n+        print(\"A espera dos resultdos do cliente \" + str(self.addr))\r\n+        done = 0\r\n+        while not done:\r\n+            try:\r\n+                data, recv = self.socket.recvfrom(self.buffer)\r\n+                if recv[0] == self.addr:\r\n+                    gameRes = pickle.loads(data)\r\n+                    done = 1\r\n+            except pickle.UnpicklingError:\r\n+                print(\"Error receiving game options\")\r\n+            \r\n+        gameRes = list(gameRes.values())\r\n+        print(\"Resultados recebidos!\")\r\n+        self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n+        print(\"Confirmação enviada\")\r\n+        print(\"Addr :  \" + str(self.addr))\r\n+        gameData[self.gameID][str(self.addr)] = gameRes\r\n+        \r\n+def main():\r\n+    cm = ClientsManager()\r\n+    cm.start()\r\n+    gm = GameManager(3, 2)\r\n+    gm.start()\r\n+    \r\n+if __name__ == \"__main__\":\r\n+    main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654818644168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,286 +148,15 @@\n         gameData[gameID] = dict()\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n             t = ClientGame(self.gameClients[client][\"addr\"], self.port, gameOptions, gameSolutions, gameID)\r\n+            thread.start()\r\n             self.threadPool.append(t)\r\n         print(self.threadPool)\r\n         \r\n         #start all the threads\r\n         for thread in self.threadPool:\r\n-            thread.start()\r\n-            print(\"thread started\")\r\n-        for thread in self.threadPool:\r\n-            thread.join()\r\n-        print(gameData)\r\n-        print(\"Game Results: \")\r\n-        \r\n             \r\n-\r\n-\r\n-class ClientGame(threading.Thread):\r\n-    def __init__(self, addr, port, gameOptions, gameSolutions, gameID):\r\n-        threading.Thread.__init__(self)\r\n-        self.addr = addr\r\n-        self.port = port\r\n-        self.gameOptions = gameOptions\r\n-        self.gameSolutions = gameSolutions\r\n-        self.buffer = 8192\r\n-        self._return = None\r\n-        self.gameID = gameID\r\n-        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n-        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-        self.socket.bind(('', self.port))\r\n-    \r\n-    \r\n-    def startGame(self):\r\n-        self.socket.settimeout(5)\r\n-        #send message to client to start game\r\n-        #wait for client to start game\r\n-        while True:\r\n-            try:\r\n-                self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n-                print(\"gameStart sent to \" + self.addr)\r\n-                data, addr = self.socket.recvfrom(self.buffer)\r\n-                if addr[0] == self.addr:\r\n-                    if data.decode().split('-')[0] == \"gameStartack\":\r\n-                        print(\"gameStart received from \" + self.addr)\r\n-                        print(\"Game started\")\r\n-                        self.socket.settimeout(None)\r\n-                        break\r\n-            except socket.timeout:\r\n-                print(\"Timeout\")\r\n-        time.sleep(0.1)\r\n-      \r\n-    def sendGameOptions(self):\r\n-        self.socket.settimeout(3)\r\n-        #send the game options via pickle to client\r\n-        print(\"gameOptions sent to \" + self.addr)\r\n-        #wait for client to receive game options\r\n-        while True:\r\n-            try:\r\n-                var = pickle.dumps(self.gameOptions)\r\n-                self.socket.sendto(var, (self.addr, self.port))\r\n-                data, addr = self.socket.recvfrom(self.buffer)\r\n-                if addr[0] == self.addr:\r\n-                    if data.decode().split('-')[0] == \"gameOptionsack\":\r\n-                        print(\"Game options confirmation\")\r\n-                        self.socket.settimeout(None)\r\n-                        break\r\n-            except socket.timeout:\r\n-                print(\"Timeout\")\r\n-                \r\n-        time.sleep(0.1)\r\n-    def sendGameSolutions(self):\r\n-        self.socket.settimeout(3)\r\n-        #send game solution to client\r\n-        print(\"gameSolution sent to \" + self.addr)\r\n-        while True:\r\n-            try:\r\n-                self.socket.sendto(pickle.dumps(self.gameSolutions), (self.addr, self.port))\r\n-                data, addr = self.socket.recvfrom(self.buffer)\r\n-                if addr[0] == self.addr:\r\n-                    if data.decode().split('-')[0] == \"gameSolutionsack\":\r\n-                        print(\"Game solutions confirmation\")\r\n-                        self.socket.settimeout(None)\r\n-                        break\r\n-            except socket.timeout:\r\n-                print(\"Timeout\")\r\n-        time.sleep(0.1)\r\n-\r\n-  \r\n-    \r\n-    def run(self):\r\n-        global gameData\r\n-        print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n-        self.startGame()\r\n-        self.sendGameOptions()\r\n-        self.sendGameSolutions()\r\n-        print(\"A espera dos resultdos do cliente \" + str(self.addr))\r\n-        done = 0\r\n-        while not done:\r\n-            try:\r\n-                data, recv = self.socket.recvfrom(self.buffer)\r\n-                if recv[0] == self.addr:\r\n-                    gameRes = pickle.loads(data)\r\n-                    done = 1\r\n-            except pickle.UnpicklingError:\r\n-                print(\"Error receiving game options\")\r\n-            \r\n-        gameRes = list(gameRes.values())\r\n-        print(\"Resultados recebidos!\")\r\n-        self.socket.sendto(\"gameEndAck\".encode(), (self.addr, self.port))\r\n-        print(\"Confirmação enviada\")\r\n-        print(\"Addr :  \" + str(self.addr))\r\n-        gameData[self.gameID][str(self.addr)] = gameRes\r\n-        \r\n-def main():\r\n-    cm = ClientsManager()\r\n-    cm.start()\r\n-    gm = GameManager(3, 2)\r\n-    gm.start()\r\n-    \r\n-if __name__ == \"__main__\":\r\n-    main()\n-import threading, time, sys, json, random, socket, pprint, pickle, gameGenerator, pprint\r\n-\r\n-#Global Vars\r\n-conClients = dict()\r\n-rConClients = dict()\r\n-nClients = 0\r\n-\r\n-gameData = dict()\r\n-\r\n-\r\n-\"\"\"\r\n-{gameID <randomly generated> : { 'addr' : {\r\n-                                            \r\n-}}\r\n-\r\n-\r\n-\r\n-\"\"\"\r\n-\r\n-\r\n-\r\n-#Classe para gestão de autenticação de clients\r\n-\r\n-class ClientsManager(threading.Thread):\r\n-    def __init__(self):\r\n-        threading.Thread.__init__(self)\r\n-        self.port = 8081\r\n-        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n-        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-        self.socket.bind(('', self.port))\r\n-        #reuse port and reuse addr socket\r\n-        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\r\n-        self.buffer = 2048\r\n-        self.hostname = socket.gethostname()\r\n-    def addClient(self, hostname, addr, port):\r\n-        global conClients, nClients\r\n-        if hostname not in conClients.keys():\r\n-            conClients[hostname] = {\r\n-                \"addr\": addr,\r\n-                \"status\": 1, #0 = not connected, 1 = connected, 2 = ready, 3 = ingame\r\n-            }\r\n-            nClients += 1\r\n-            print(\"Client \" + hostname + \" added\")\r\n-            return 1\r\n-        else:\r\n-            print(\"Client \" + hostname + \" already exists\")\r\n-            return 0\r\n-        \r\n-    def removeClient(self, hostname):\r\n-        if hostname in conClients.keys():\r\n-            conClients.pop(hostname)\r\n-            print(\"Client \" + hostname + \" removed\")\r\n-            return 1\r\n-        else:\r\n-            print(\"Client \" + hostname + \" not found\")\r\n-            return 0\r\n-    def run(self):\r\n-        global conClients, nClients\r\n-        print(\"À espera de clientes...\")\r\n-        while True:\r\n-            data, addr = self.socket.recvfrom(self.buffer)\r\n-            msg = data.decode().split('-')\r\n-            if msg[0] == \"hello\":\r\n-                if self.addClient(msg[1], addr[0], addr[1]):\r\n-                    self.socket.sendto(\"hello-ack\".encode(), addr)\r\n-                    print(\"hello ack sent to \" + msg[1])\r\n-                else:\r\n-                    self.socket.sendto(\"You are already connected\".encode(), addr)\r\n-            elif msg[0] == \"disconnect\":\r\n-                if self.removeClient(msg[1]):\r\n-                    self.socket.sendto(\"disconnect-ack\".encode(), addr)\r\n-                    print(\"disconnect ack sent to \" + msg[1])\r\n-                else:\r\n-                    self.socket.sendto(\"You are not connected\".encode(), addr)\r\n-\r\n-\r\n-\r\n-class GameManager(threading.Thread):\r\n-    def __init__(self, rounds, gameSize):\r\n-        threading.Thread.__init__(self)\r\n-        self.rounds = rounds #Numero de rondas associadas a cada jogo\r\n-        self.gameSize = gameSize #Numero de jogadores por jogo\r\n-        self.gameClients = dict()    \r\n-    \r\n-    def selectClientsForGame(self):\r\n-        global conClients\r\n-        for client in conClients:\r\n-            if conClients[client][\"status\"] == 1:\r\n-                conClients[client][\"status\"] = 2\r\n-                self.gameClients[client] = conClients[client]\r\n-        print(\"Selected Clients for game: \")\r\n-    \r\n-    \r\n-    def run(self):\r\n-        global nClients\r\n-        print(\"À espera de jogos....\")\r\n-        while True:\r\n-            while nClients < self.gameSize:\r\n-                time.sleep(0.1)\r\n-            print(\"jogo a iniciar...\\n\\n\\n\")\r\n-            self.selectClientsForGame()\r\n-            gm = GameServer(3, 1, self.gameClients)\r\n-            gm.start()\r\n-            nClients = 0\r\n-        \r\n-        \r\n-\r\n-\r\n-class GameServer(threading.Thread):\r\n-    def __init__(self, rounds, gameSize, gameClients):\r\n-        threading.Thread.__init__(self)\r\n-        self.rounds = rounds #Numero de rondas associadas a cada jogo\r\n-        self.gameSize = gameSize #Numero de jogadores por jogo\r\n-        self.gameClients = dict()\r\n-        self.port = 8080\r\n-        self.clientsAnswers = dict()\r\n-        self.gameSolutions = dict()\r\n-        self.buffer = 2048\r\n-        self.threadPool = []\r\n-        self.GameResults = []\r\n-        self.gameClients = gameClients\r\n-        \r\n-\r\n-    def getWinner(self):   \r\n-        winner = None\r\n-        winnerScore = 0\r\n-        winnerTime = 0\r\n-        for client in self.clientsAnswers:\r\n-            score = 0\r\n-            for round in self.clientsAnswers[client]:\r\n-                if self.clientsAnswers[client][round][\"answer\"] == self.gameSolutions[round]:\r\n-                    score += 1\r\n-                    time = self.clientsAnswers[client][round][\"time\"]\r\n-            if score > winnerScore and time < winnerTime:\r\n-                winner = client\r\n-                winnerScore = score\r\n-                winnerTime = time\r\n-        return winner\r\n-\r\n-    def run(self):\r\n-        global gameData\r\n-        gg = gameGenerator.gameGenerator(self.rounds)\r\n-        gg.generateGame()\r\n-        gameSolutions = gg.getSongs()\r\n-        gameOptions = gg.getOptions()\r\n-        pprint.pprint(self.gameClients)\r\n-        gameID = random.randint(0, 10000)\r\n-        gameData[gameID] = dict()\r\n-        for client in self.gameClients:\r\n-            varOptions = self.gameOptions()\r\n-            varSolutions = self.gameSolutions()\r\n-            print(\"startedThread\")\r\n-            t = ClientGame(self.gameClients[client][\"addr\"], self.port, gameOptions, gameSolutions, gameID)\r\n-            self.threadPool.append(t)\r\n-        print(self.threadPool)\r\n-        \r\n-        #start all the threads\r\n-        for thread in self.threadPool:\r\n-            thread.start()\r\n             print(\"thread started\")\r\n         for thread in self.threadPool:\r\n             thread.join()\r\n         print(gameData)\r\n"
                },
                {
                    "date": 1654818656525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,15 +151,9 @@\n             t = ClientGame(self.gameClients[client][\"addr\"], self.port, gameOptions, gameSolutions, gameID)\r\n             thread.start()\r\n             self.threadPool.append(t)\r\n         print(self.threadPool)\r\n-        \r\n         #start all the threads\r\n-        for thread in self.threadPool:\r\n-            \r\n-            print(\"thread started\")\r\n-        for thread in self.threadPool:\r\n-            thread.join()\r\n         print(gameData)\r\n         print(\"Game Results: \")\r\n         \r\n             \r\n"
                },
                {
                    "date": 1654818685050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,8 @@\n         self.port = 8080\r\n         self.clientsAnswers = dict()\r\n         self.gameSolutions = dict()\r\n         self.buffer = 2048\r\n-        self.threadPool = []\r\n         self.GameResults = []\r\n         self.gameClients = gameClients\r\n         \r\n \r\n@@ -148,11 +147,9 @@\n         gameData[gameID] = dict()\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n             t = ClientGame(self.gameClients[client][\"addr\"], self.port, gameOptions, gameSolutions, gameID)\r\n-            thread.start()\r\n-            self.threadPool.append(t)\r\n-        print(self.threadPool)\r\n+            t.start()\r\n         #start all the threads\r\n         print(gameData)\r\n         print(\"Game Results: \")\r\n         \r\n"
                },
                {
                    "date": 1654818700007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,8 @@\n         self.port = 8080\r\n         self.clientsAnswers = dict()\r\n         self.gameSolutions = dict()\r\n         self.buffer = 2048\r\n-        self.GameResults = []\r\n         self.gameClients = gameClients\r\n         \r\n \r\n     def getWinner(self):   \r\n"
                },
                {
                    "date": 1654818723844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,12 +183,13 @@\n                     if data.decode().split('-')[0] == \"gameStartack\":\r\n                         print(\"gameStart received from \" + self.addr)\r\n                         print(\"Game started\")\r\n                         self.socket.settimeout(None)\r\n+                        time.sleep(0.1)\r\n                         break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n-        time.sleep(0.1)\r\n+        \r\n       \r\n     def sendGameOptions(self):\r\n         self.socket.settimeout(3)\r\n         #send the game options via pickle to client\r\n"
                },
                {
                    "date": 1654818735894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,8 +203,9 @@\n                 if addr[0] == self.addr:\r\n                     if data.decode().split('-')[0] == \"gameOptionsack\":\r\n                         print(\"Game options confirmation\")\r\n                         self.socket.settimeout(None)\r\n+                        time.sleep(0.1)\r\n                         break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n                 \r\n@@ -220,8 +221,9 @@\n                 if addr[0] == self.addr:\r\n                     if data.decode().split('-')[0] == \"gameSolutionsack\":\r\n                         print(\"Game solutions confirmation\")\r\n                         self.socket.settimeout(None)\r\n+                        time.sleep(0.1)\r\n                         break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n         time.sleep(0.1)\r\n"
                },
                {
                    "date": 1654818879936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,8 +232,10 @@\n     \r\n     def run(self):\r\n         global gameData\r\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n+        print(self.gameOptions)\r\n+        print(self.gameSolutions)\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         self.sendGameSolutions()\r\n         print(\"A espera dos resultdos do cliente \" + str(self.addr))\r\n"
                },
                {
                    "date": 1654818908850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,10 +232,10 @@\n     \r\n     def run(self):\r\n         global gameData\r\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n-        print(self.gameOptions)\r\n-        print(self.gameSolutions)\r\n+        pprint.pprint(self.gameOptions)\r\n+        pprint.pprint(self.gameSolutions)\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         self.sendGameSolutions()\r\n         print(\"A espera dos resultdos do cliente \" + str(self.addr))\r\n"
                },
                {
                    "date": 1654818914275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,8 +234,9 @@\n         global gameData\r\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n         pprint.pprint(self.gameOptions)\r\n         pprint.pprint(self.gameSolutions)\r\n+        input(\"Press Enter to continue...\")\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         self.sendGameSolutions()\r\n         print(\"A espera dos resultdos do cliente \" + str(self.addr))\r\n"
                },
                {
                    "date": 1654818952111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,8 @@\n             print(\"startedThread\")\r\n             t = ClientGame(self.gameClients[client][\"addr\"], self.port, gameOptions, gameSolutions, gameID)\r\n             t.start()\r\n         #start all the threads\r\n-        print(gameData)\r\n         print(\"Game Results: \")\r\n         \r\n             \r\n \r\n"
                },
                {
                    "date": 1654818996643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,8 @@\n             print(\"startedThread\")\r\n             t = ClientGame(self.gameClients[client][\"addr\"], self.port, gameOptions, gameSolutions, gameID)\r\n             t.start()\r\n         #start all the threads\r\n-        print(\"Game Results: \")\r\n         \r\n             \r\n \r\n \r\n"
                },
                {
                    "date": 1654819012502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,9 @@\n         self.clientsAnswers = dict()\r\n         self.gameSolutions = dict()\r\n         self.buffer = 2048\r\n         self.gameClients = gameClients\r\n+        self.threadPool = []\r\n         \r\n \r\n     def getWinner(self):   \r\n         winner = None\r\n@@ -146,9 +147,9 @@\n         gameData[gameID] = dict()\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n             t = ClientGame(self.gameClients[client][\"addr\"], self.port, gameOptions, gameSolutions, gameID)\r\n-            t.start()\r\n+\r\n         #start all the threads\r\n         \r\n             \r\n \r\n"
                },
                {
                    "date": 1654819023562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n         gameData[gameID] = dict()\r\n         for client in self.gameClients:\r\n             print(\"startedThread\")\r\n             t = ClientGame(self.gameClients[client][\"addr\"], self.port, gameOptions, gameSolutions, gameID)\r\n-\r\n+            self.threadPool.append(t)\r\n         #start all the threads\r\n         \r\n             \r\n \r\n"
                },
                {
                    "date": 1654819029711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,8 +149,10 @@\n             print(\"startedThread\")\r\n             t = ClientGame(self.gameClients[client][\"addr\"], self.port, gameOptions, gameSolutions, gameID)\r\n             self.threadPool.append(t)\r\n         #start all the threads\r\n+        for thread in self.threadPool:\r\n+            thread.start()\r\n         \r\n             \r\n \r\n \r\n"
                },
                {
                    "date": 1654819041492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,8 +151,11 @@\n             self.threadPool.append(t)\r\n         #start all the threads\r\n         for thread in self.threadPool:\r\n             thread.start()\r\n+        #wait for all the threads to finish\r\n+        for thread in self.threadPool:\r\n+            thread.join()\r\n         \r\n             \r\n \r\n \r\n"
                },
                {
                    "date": 1654819187772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,11 +236,8 @@\n     \r\n     def run(self):\r\n         global gameData\r\n         print(\"starting game for \" + str(self.addr) + \" port: \" + str(self.port))\r\n-        pprint.pprint(self.gameOptions)\r\n-        pprint.pprint(self.gameSolutions)\r\n-        input(\"Press Enter to continue...\")\r\n         self.startGame()\r\n         self.sendGameOptions()\r\n         self.sendGameSolutions()\r\n         print(\"A espera dos resultdos do cliente \" + str(self.addr))\r\n"
                },
                {
                    "date": 1654819193670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n                     if data.decode().split('-')[0] == \"gameStartack\":\r\n                         print(\"gameStart received from \" + self.addr)\r\n                         print(\"Game started\")\r\n                         self.socket.settimeout(None)\r\n-                        time.sleep(0.1)\r\n+                        time.sleep(1)\r\n                         break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n         \r\n"
                },
                {
                    "date": 1654819272061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,8 +180,9 @@\n         #wait for client to start game\r\n         while True:\r\n             try:\r\n                 self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n+                print(threading.get_ident(), \"gameStart sent to \" + self.addr)\r\n                 print(\"gameStart sent to \" + self.addr)\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if addr[0] == self.addr:\r\n                     if data.decode().split('-')[0] == \"gameStartack\":\r\n@@ -207,9 +208,9 @@\n                 if addr[0] == self.addr:\r\n                     if data.decode().split('-')[0] == \"gameOptionsack\":\r\n                         print(\"Game options confirmation\")\r\n                         self.socket.settimeout(None)\r\n-                        time.sleep(0.1)\r\n+                        time.sleep(1)\r\n                         break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n                 \r\n@@ -225,9 +226,9 @@\n                 if addr[0] == self.addr:\r\n                     if data.decode().split('-')[0] == \"gameSolutionsack\":\r\n                         print(\"Game solutions confirmation\")\r\n                         self.socket.settimeout(None)\r\n-                        time.sleep(0.1)\r\n+                        time.sleep(1)\r\n                         break\r\n             except socket.timeout:\r\n                 print(\"Timeout\")\r\n         time.sleep(0.1)\r\n"
                },
                {
                    "date": 1654819278113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n         #wait for client to start game\r\n         while True:\r\n             try:\r\n                 self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n-                print(threading.get_ident(), \"gameStart sent to \" + self.addr)\r\n+                print(threading.get_ident()))\r\n                 print(\"gameStart sent to \" + self.addr)\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if addr[0] == self.addr:\r\n                     if data.decode().split('-')[0] == \"gameStartack\":\r\n"
                },
                {
                    "date": 1654819287736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,10 +180,9 @@\n         #wait for client to start game\r\n         while True:\r\n             try:\r\n                 self.socket.sendto(\"gameStart\".encode(), (self.addr, self.port))\r\n-                print(threading.get_ident()))\r\n-                print(\"gameStart sent to \" + self.addr)\r\n+                print(threading.get_ident(), \"gameStart sent to \" + self.addr)\r\n                 data, addr = self.socket.recvfrom(self.buffer)\r\n                 if addr[0] == self.addr:\r\n                     if data.decode().split('-')[0] == \"gameStartack\":\r\n                         print(\"gameStart received from \" + self.addr)\r\n"
                }
            ],
            "date": 1654615308057,
            "name": "Commit-0",
            "content": "import threading, time, sys, json, random, socket\r\n\r\n#Global Vars\r\nconClients = dict()\r\nrConClients = dict()\r\nnClients = 0\r\n\r\n\r\n#Classe para gestão de autenticação de clients\r\n\r\nclass ClientsManager(threading.Thread):\r\n    def __init__(self):\r\n        threading.Thread.__init__(self)\r\n        self.port = 8081\r\n        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n        self.socket.bind((':', self.port))\r\n        self.buffer = 2048\r\n        self.hostname = socket.gethostname()\r\n    \r\n        def __init__(self):\r\n            threading.Thread.__init__(self)\r\n        self.port = 8081\r\n        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,1)\r\n        self.socket.bind(('', self.port))\r\n        self.buffer = 2048\r\n        self.hostname = socket.gethostname()\r\n        \r\n    def addClient(self, hostname, addr, port):\r\n        global connectedClients, nClients\r\n        if hostname not in connectedClients.keys():\r\n            connectedClients[hostname] = {\r\n                \"addr\": addr,\r\n                \"status\": 1, #0 = not connected, 1 = connected, 2 = ready, 3 = ingame\r\n            }\r\n            nClients += 1\r\n            print(\"Client \" + hostname + \" added\")\r\n            return 1\r\n        else:\r\n            print(\"Client \" + hostname + \" already exists\")\r\n            return 0\r\n        \r\n    def removeClient(self, hostname):\r\n        if hostname in connectedClients.keys():\r\n            connectedClients.pop(hostname)\r\n            print(\"Client \" + hostname + \" removed\")\r\n            return 1\r\n        else:\r\n            print(\"Client \" + hostname + \" not found\")\r\n            return 0\r\n    def run(self):\r\n        global connectedClients, nClients\r\n        print(\"À espera de clientes...\")\r\n        while True:\r\n            data, addr = self.socket.recvfrom(self.buffer)\r\n            msg = data.decode().split('-')\r\n            if msg[0] == \"hello\":\r\n                if self.addClient(msg[1], addr[0], addr[1]):\r\n                    self.socket.sendto(\"hello-ack\".encode(), addr)\r\n                    print(\"hello ack sent to \" + msg[1])\r\n                else:\r\n                    self.socket.sendto(\"You are already connected\".encode(), addr)\r\n            elif msg[0] == \"disconnect\":\r\n                if self.removeClient(msg[1]):\r\n                    self.socket.sendto(\"disconnect-ack\".encode(), addr)\r\n                    print(\"disconnect ack sent to \" + msg[1])\r\n                else:\r\n                    self.socket.sendto(\"You are not connected\".encode(), addr)\r\n\r\n        \r\n\r\n\r\n\r\n\r\ndef main():\r\n    connectedClients = dict()"
        }
    ]
}