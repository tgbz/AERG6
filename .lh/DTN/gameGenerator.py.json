{
    "sourceFile": "DTN/gameGenerator.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 91,
            "patches": [
                {
                    "date": 1654528262618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1654529679308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,8 +67,9 @@\n                 song = self.songList[i]\r\n                 if song not in self.selectedSongs[round]:\r\n                     self.gameOptions[round][i][\"title\"] = song[\"title\"]\r\n                     self.gameOptions[round][i][\"artist\"] = song[\"artist\"]\r\n+                    self.gameOptions[round][i][\"filePath\"] = song[\"filePath\"]\r\n         print(\"Opções para as musicas escolhidas: \", self.gameOptions)\r\n     \r\n     def generateGame(self):\r\n         var = self.chooseSongs()\r\n"
                },
                {
                    "date": 1654557208666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n class gameGenerator():\r\n     def __init__(self, rounds):\r\n         threading.Thread.__init__(self)\r\n         self.songsDB = \"assets/songlist.json\" #path para o ficheiro de musicas\r\n-        self.songList = json.load(open(self.songDB)) # carrega o ficheiro de musicas\r\n+        self.songList = json.load(open(self.songsDB)) # carrega o ficheiro de musicas\r\n         self.currentGamePlayers = dict() #dicionario com os jogadores desse jogo\r\n         self.gameRounds = rounds #número de rondas do jogo\r\n         self.selectedSongs = dict()\r\n         self.gameOptions = dict()  \r\n"
                },
                {
                    "date": 1654557275031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n     \"\"\"\r\n     def chooseSongs(self):\r\n         for i in range(self.gameRounds):\r\n             song = self.songList[i]\r\n+            print(song)\r\n             self.selectedSongs[i][\"title\"] = song[\"title\"]\r\n             self.selectedSongs[i][\"artist\"] = song[\"artist\"]\r\n             self.selectedSongs[i][\"filePath\"] = song[\"filePath\"]\r\n         print(\"Musicas escolhidas para jogo: \", self.selectedSongs)\r\n"
                },
                {
                    "date": 1654557325202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n                 {\r\n                  \"id\": {\r\n                      \"title\": <title>,\r\n                      \"artist\": <artist>\r\n+                     \"filePath\": <filePath>\r\n                  },\r\n                  \"id\" : {\r\n                         \"title\": <title>,\r\n                         \"artist\": <artist>\r\n@@ -25,15 +26,14 @@\n                 ...\r\n                 } \r\n     \"\"\"\r\n     def chooseSongs(self):\r\n-        for i in range(self.gameRounds):\r\n-            song = self.songList[i]\r\n-            print(song)\r\n-            self.selectedSongs[i][\"title\"] = song[\"title\"]\r\n-            self.selectedSongs[i][\"artist\"] = song[\"artist\"]\r\n-            self.selectedSongs[i][\"filePath\"] = song[\"filePath\"]\r\n-        print(\"Musicas escolhidas para jogo: \", self.selectedSongs)\r\n+        for round in range(self.gameRounds):\r\n+            self.selectedSongs[round] = []\r\n+            for i in range(3):\r\n+                song = self.songList[i]\r\n+                if song not in self.selectedSongs[round]:\r\n+                    self.selectedSongs[round].append(song)\r\n \r\n     \"\"\"\r\n     Função responsável por iterar a self.selectedSongs e a cada iteração\r\n         procurar na self.songList outras 3 músicas aleatórias que não sejam\r\n"
                },
                {
                    "date": 1654557362797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n         self.gameOptions = dict()  \r\n     \"\"\"\r\n         Iterar sobre a lista de musicas disponivel na base de dados e escolher\r\n             <self.gameRounds> músicas aleatórias\r\n-            devolvendo um dicionario com as musicas escolhidas com o seguinte formato:\r\n+            retornando um dicionario com as musicas escolhidas com o seguinte formato:\r\n                 {\r\n                  \"id\": {\r\n                      \"title\": <title>,\r\n                      \"artist\": <artist>\r\n@@ -32,8 +32,10 @@\n             for i in range(3):\r\n                 song = self.songList[i]\r\n                 if song not in self.selectedSongs[round]:\r\n                     self.selectedSongs[round].append(song)\r\n+        print(\"Musicas escolhidas: \", self.selectedSongs)\r\n+            \r\n \r\n     \"\"\"\r\n     Função responsável por iterar a self.selectedSongs e a cada iteração\r\n         procurar na self.songList outras 3 músicas aleatórias que não sejam\r\n"
                },
                {
                    "date": 1654557578991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,16 +26,15 @@\n                 ...\r\n                 } \r\n     \"\"\"\r\n     def chooseSongs(self):\r\n-        for round in range(self.gameRounds):\r\n-            self.selectedSongs[round] = []\r\n-            for i in range(3):\r\n-                song = self.songList[i]\r\n-                if song not in self.selectedSongs[round]:\r\n-                    self.selectedSongs[round].append(song)\r\n-        print(\"Musicas escolhidas: \", self.selectedSongs)\r\n-            \r\n+        for song in self.songList:\r\n+            for i in range(self.gameRounds):\r\n+                self.selectedSongs[i][song[\"id\"]] = song\r\n+                self.selectedSongs[i][song[\"id\"]][\"title\"] = song[\"title\"]\r\n+                self.selectedSongs[i][song[\"id\"]][\"artist\"] = song[\"artist\"]\r\n+                self.selectedSongs[i][song[\"id\"]][\"filePath\"] = song[\"filePath\"]\r\n+        return self.selectedSongs\r\n \r\n     \"\"\"\r\n     Função responsável por iterar a self.selectedSongs e a cada iteração\r\n         procurar na self.songList outras 3 músicas aleatórias que não sejam\r\n"
                },
                {
                    "date": 1654557649057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import threading, json\r\n+import threading, json, random\r\n \r\n class gameGenerator():\r\n     def __init__(self, rounds):\r\n         threading.Thread.__init__(self)\r\n"
                },
                {
                    "date": 1654557944790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,14 +26,19 @@\n                 ...\r\n                 } \r\n     \"\"\"\r\n     def chooseSongs(self):\r\n-        for song in self.songList:\r\n+        \r\n             for i in range(self.gameRounds):\r\n-                self.selectedSongs[i][song[\"id\"]] = song\r\n-                self.selectedSongs[i][song[\"id\"]][\"title\"] = song[\"title\"]\r\n-                self.selectedSongs[i][song[\"id\"]][\"artist\"] = song[\"artist\"]\r\n-                self.selectedSongs[i][song[\"id\"]][\"filePath\"] = song[\"filePath\"]\r\n+                oldRandom = 0\r\n+                random_index = random.randint(1, len(self.songList))\r\n+                while random_index == oldRandom:\r\n+                    random_index = random.randint(1, len(self.songList))\r\n+                    self.selectedSongs[i][song[\"id\"]] = song\r\n+                    self.selectedSongs[i][song[\"id\"]][\"title\"] = song[\"title\"]\r\n+                    self.selectedSongs[i][song[\"id\"]][\"artist\"] = song[\"artist\"]\r\n+                    self.selectedSongs[i][song[\"id\"]][\"filePath\"] = song[\"filePath\"]\r\n+                oldRandom = random_index\r\n         return self.selectedSongs\r\n \r\n     \"\"\"\r\n     Função responsável por iterar a self.selectedSongs e a cada iteração\r\n"
                },
                {
                    "date": 1654557995051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,12 @@\n                 oldRandom = 0\r\n                 random_index = random.randint(1, len(self.songList))\r\n                 while random_index == oldRandom:\r\n                     random_index = random.randint(1, len(self.songList))\r\n-                    self.selectedSongs[i][song[\"id\"]] = song\r\n-                    self.selectedSongs[i][song[\"id\"]][\"title\"] = song[\"title\"]\r\n-                    self.selectedSongs[i][song[\"id\"]][\"artist\"] = song[\"artist\"]\r\n-                    self.selectedSongs[i][song[\"id\"]][\"filePath\"] = song[\"filePath\"]\r\n+                    self.selectedSongs[i][random_index[\"id\"]] = random_index\r\n+                    self.selectedSongs[i][random_index[\"id\"]][\"title\"] = random_index[\"title\"]\r\n+                    self.selectedSongs[i][random_index[\"id\"]][\"artist\"] = random_index[\"artist\"]\r\n+                    self.selectedSongs[i][random_index\"id\"][\"filePath\"] = random_index[\"filePath\"]\r\n                 oldRandom = random_index\r\n         return self.selectedSongs\r\n \r\n     \"\"\"\r\n"
                },
                {
                    "date": 1654558012213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,19 +26,18 @@\n                 ...\r\n                 } \r\n     \"\"\"\r\n     def chooseSongs(self):\r\n-        \r\n-            for i in range(self.gameRounds):\r\n-                oldRandom = 0\r\n+        for i in range(self.gameRounds):\r\n+            oldRandom = 0\r\n+            random_index = random.randint(1, len(self.songList))\r\n+            while random_index == oldRandom:\r\n                 random_index = random.randint(1, len(self.songList))\r\n-                while random_index == oldRandom:\r\n-                    random_index = random.randint(1, len(self.songList))\r\n-                    self.selectedSongs[i][random_index[\"id\"]] = random_index\r\n-                    self.selectedSongs[i][random_index[\"id\"]][\"title\"] = random_index[\"title\"]\r\n-                    self.selectedSongs[i][random_index[\"id\"]][\"artist\"] = random_index[\"artist\"]\r\n-                    self.selectedSongs[i][random_index\"id\"][\"filePath\"] = random_index[\"filePath\"]\r\n-                oldRandom = random_index\r\n+                self.selectedSongs[i][random_index[\"id\"]] = random_index\r\n+                self.selectedSongs[i][random_index[\"id\"]][\"title\"] = random_index[\"title\"]\r\n+                self.selectedSongs[i][random_index[\"id\"]][\"artist\"] = random_index[\"artist\"]\r\n+                self.selectedSongs[i][random_index\"id\"][\"filePath\"] = random_index[\"filePath\"]\r\n+            oldRandom = random_index\r\n         return self.selectedSongs\r\n \r\n     \"\"\"\r\n     Função responsável por iterar a self.selectedSongs e a cada iteração\r\n"
                },
                {
                    "date": 1654558023839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n                 random_index = random.randint(1, len(self.songList))\r\n                 self.selectedSongs[i][random_index[\"id\"]] = random_index\r\n                 self.selectedSongs[i][random_index[\"id\"]][\"title\"] = random_index[\"title\"]\r\n                 self.selectedSongs[i][random_index[\"id\"]][\"artist\"] = random_index[\"artist\"]\r\n-                self.selectedSongs[i][random_index\"id\"][\"filePath\"] = random_index[\"filePath\"]\r\n+                self.selectedSongs[i][random_index[\"id\"][\"filePath\"] = random_index[\"filePath\"]\r\n             oldRandom = random_index\r\n         return self.selectedSongs\r\n \r\n     \"\"\"\r\n"
                },
                {
                    "date": 1654558042310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n                 random_index = random.randint(1, len(self.songList))\r\n                 self.selectedSongs[i][random_index[\"id\"]] = random_index\r\n                 self.selectedSongs[i][random_index[\"id\"]][\"title\"] = random_index[\"title\"]\r\n                 self.selectedSongs[i][random_index[\"id\"]][\"artist\"] = random_index[\"artist\"]\r\n-                self.selectedSongs[i][random_index[\"id\"][\"filePath\"] = random_index[\"filePath\"]\r\n+                self.selectedSongs[i][random_index[\"id\"]][\"filePath\"] = random_index[\"filePath\"]\r\n             oldRandom = random_index\r\n         return self.selectedSongs\r\n \r\n     \"\"\"\r\n"
                },
                {
                    "date": 1654558072518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n                 self.selectedSongs[i][random_index[\"id\"]][\"title\"] = random_index[\"title\"]\r\n                 self.selectedSongs[i][random_index[\"id\"]][\"artist\"] = random_index[\"artist\"]\r\n                 self.selectedSongs[i][random_index[\"id\"]][\"filePath\"] = random_index[\"filePath\"]\r\n             oldRandom = random_index\r\n+        print(self.selectedSongs)\r\n         return self.selectedSongs\r\n \r\n     \"\"\"\r\n     Função responsável por iterar a self.selectedSongs e a cada iteração\r\n"
                },
                {
                    "date": 1654558125094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,12 +31,12 @@\n             oldRandom = 0\r\n             random_index = random.randint(1, len(self.songList))\r\n             while random_index == oldRandom:\r\n                 random_index = random.randint(1, len(self.songList))\r\n-                self.selectedSongs[i][random_index[\"id\"]] = random_index\r\n-                self.selectedSongs[i][random_index[\"id\"]][\"title\"] = random_index[\"title\"]\r\n-                self.selectedSongs[i][random_index[\"id\"]][\"artist\"] = random_index[\"artist\"]\r\n-                self.selectedSongs[i][random_index[\"id\"]][\"filePath\"] = random_index[\"filePath\"]\r\n+                self.selectedSongs[str(i)][random_index[\"id\"]] = random_index\r\n+                self.selectedSongs[str(i)][random_index[\"id\"]][\"title\"] = random_index[\"title\"]\r\n+                self.selectedSongs[str(i)]][random_index[\"id\"]][\"artist\"] = random_index[\"artist\"]\r\n+                self.selectedSongs[str(i)][random_index[\"id\"]][\"filePath\"] = random_index[\"filePath\"]\r\n             oldRandom = random_index\r\n         print(self.selectedSongs)\r\n         return self.selectedSongs\r\n \r\n"
                },
                {
                    "date": 1654558132857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n             while random_index == oldRandom:\r\n                 random_index = random.randint(1, len(self.songList))\r\n                 self.selectedSongs[str(i)][random_index[\"id\"]] = random_index\r\n                 self.selectedSongs[str(i)][random_index[\"id\"]][\"title\"] = random_index[\"title\"]\r\n-                self.selectedSongs[str(i)]][random_index[\"id\"]][\"artist\"] = random_index[\"artist\"]\r\n+                self.selectedSongs[str(i)][random_index[\"id\"]][\"artist\"] = random_index[\"artist\"]\r\n                 self.selectedSongs[str(i)][random_index[\"id\"]][\"filePath\"] = random_index[\"filePath\"]\r\n             oldRandom = random_index\r\n         print(self.selectedSongs)\r\n         return self.selectedSongs\r\n"
                },
                {
                    "date": 1654558220409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,12 +31,12 @@\n             oldRandom = 0\r\n             random_index = random.randint(1, len(self.songList))\r\n             while random_index == oldRandom:\r\n                 random_index = random.randint(1, len(self.songList))\r\n-                self.selectedSongs[str(i)][random_index[\"id\"]] = random_index\r\n-                self.selectedSongs[str(i)][random_index[\"id\"]][\"title\"] = random_index[\"title\"]\r\n-                self.selectedSongs[str(i)][random_index[\"id\"]][\"artist\"] = random_index[\"artist\"]\r\n-                self.selectedSongs[str(i)][random_index[\"id\"]][\"filePath\"] = random_index[\"filePath\"]\r\n+                self.selectedSongs[str(i)][random_index][\"id\"] = self.songList[random_index]\r\n+                self.selectedSongs[str(i)][random_index][\"id\"][\"title\"] = self.songList[random_index][\"title\"]\r\n+                self.selectedSongs[str(i)][random_index][\"id\"][\"artist\"] = self.songList[random_index][\"artist\"]\r\n+                self.selectedSongs[str(i)][random_index][\"id\"][\"filePath\"] = random_index[\"filePath\"]\r\n             oldRandom = random_index\r\n         print(self.selectedSongs)\r\n         return self.selectedSongs\r\n \r\n"
                },
                {
                    "date": 1654558230423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n                 random_index = random.randint(1, len(self.songList))\r\n                 self.selectedSongs[str(i)][random_index][\"id\"] = self.songList[random_index]\r\n                 self.selectedSongs[str(i)][random_index][\"id\"][\"title\"] = self.songList[random_index][\"title\"]\r\n                 self.selectedSongs[str(i)][random_index][\"id\"][\"artist\"] = self.songList[random_index][\"artist\"]\r\n-                self.selectedSongs[str(i)][random_index][\"id\"][\"filePath\"] = random_index[\"filePath\"]\r\n+                self.selectedSongs[str(i)][random_index][\"id\"][\"filePath\"] = self.songList.random_index[\"filePath\"]\r\n             oldRandom = random_index\r\n         print(self.selectedSongs)\r\n         return self.selectedSongs\r\n \r\n"
                },
                {
                    "date": 1654558273076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n                 ...\r\n                 } \r\n     \"\"\"\r\n     def chooseSongs(self):\r\n+        print(self.songList)\r\n         for i in range(self.gameRounds):\r\n             oldRandom = 0\r\n             random_index = random.randint(1, len(self.songList))\r\n             while random_index == oldRandom:\r\n"
                },
                {
                    "date": 1654558329590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n             oldRandom = 0\r\n             random_index = random.randint(1, len(self.songList))\r\n             while random_index == oldRandom:\r\n                 random_index = random.randint(1, len(self.songList))\r\n+                print(random_index)\r\n                 self.selectedSongs[str(i)][random_index][\"id\"] = self.songList[random_index]\r\n                 self.selectedSongs[str(i)][random_index][\"id\"][\"title\"] = self.songList[random_index][\"title\"]\r\n                 self.selectedSongs[str(i)][random_index][\"id\"][\"artist\"] = self.songList[random_index][\"artist\"]\r\n                 self.selectedSongs[str(i)][random_index][\"id\"][\"filePath\"] = self.songList.random_index[\"filePath\"]\r\n"
                },
                {
                    "date": 1654558337345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n             random_index = random.randint(1, len(self.songList))\r\n             while random_index == oldRandom:\r\n                 random_index = random.randint(1, len(self.songList))\r\n                 print(random_index)\r\n+                print(self.songList[random_index])\r\n                 self.selectedSongs[str(i)][random_index][\"id\"] = self.songList[random_index]\r\n                 self.selectedSongs[str(i)][random_index][\"id\"][\"title\"] = self.songList[random_index][\"title\"]\r\n                 self.selectedSongs[str(i)][random_index][\"id\"][\"artist\"] = self.songList[random_index][\"artist\"]\r\n                 self.selectedSongs[str(i)][random_index][\"id\"][\"filePath\"] = self.songList.random_index[\"filePath\"]\r\n"
                },
                {
                    "date": 1654558357901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,8 @@\n                 ...\r\n                 } \r\n     \"\"\"\r\n     def chooseSongs(self):\r\n-        print(self.songList)\r\n         for i in range(self.gameRounds):\r\n             oldRandom = 0\r\n             random_index = random.randint(1, len(self.songList))\r\n             while random_index == oldRandom:\r\n"
                },
                {
                    "date": 1654558366841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,6 +81,6 @@\n         print(\"Opções para as musicas escolhidas: \", self.gameOptions)\r\n     \r\n     def generateGame(self):\r\n         var = self.chooseSongs()\r\n-        self.getOptionsForSongs()\r\n+        #self.getOptionsForSongs()\r\n         return var , self.gameOptions()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654558427887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,12 +33,12 @@\n             while random_index == oldRandom:\r\n                 random_index = random.randint(1, len(self.songList))\r\n                 print(random_index)\r\n                 print(self.songList[random_index])\r\n-                self.selectedSongs[str(i)][random_index][\"id\"] = self.songList[random_index]\r\n-                self.selectedSongs[str(i)][random_index][\"id\"][\"title\"] = self.songList[random_index][\"title\"]\r\n-                self.selectedSongs[str(i)][random_index][\"id\"][\"artist\"] = self.songList[random_index][\"artist\"]\r\n-                self.selectedSongs[str(i)][random_index][\"id\"][\"filePath\"] = self.songList.random_index[\"filePath\"]\r\n+                self.selectedSongs[str(i)][\"id\"] = self.songList[random_index]\r\n+                self.selectedSongs[str(i)][\"id\"][\"title\"] = self.songList[random_index][\"title\"]\r\n+                self.selectedSongs[str(i)][\"id\"][\"artist\"] = self.songList[random_index][\"artist\"]\r\n+                self.selectedSongs[str(i)][\"id\"][\"filePath\"] = self.songList.random_index[\"filePath\"]\r\n             oldRandom = random_index\r\n         print(self.selectedSongs)\r\n         return self.selectedSongs\r\n \r\n@@ -81,6 +81,6 @@\n         print(\"Opções para as musicas escolhidas: \", self.gameOptions)\r\n     \r\n     def generateGame(self):\r\n         var = self.chooseSongs()\r\n-        #self.getOptionsForSongs()\r\n+        self.getOptionsForSongs()\r\n         return var , self.gameOptions()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654558469440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,5 +82,8 @@\n     \r\n     def generateGame(self):\r\n         var = self.chooseSongs()\r\n         self.getOptionsForSongs()\r\n-        return var , self.gameOptions()\n\\ No newline at end of file\n+        return var , self.gameOptions()\r\n+    \r\n+def main():\r\n+    gg = gameGenerator(3)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654558478487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,5 +85,6 @@\n         self.getOptionsForSongs()\r\n         return var , self.gameOptions()\r\n     \r\n def main():\r\n-    gg = gameGenerator(3)\n\\ No newline at end of file\n+    gg = gameGenerator(3)\r\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1654558598446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,14 +31,14 @@\n             oldRandom = 0\r\n             random_index = random.randint(1, len(self.songList))\r\n             while random_index == oldRandom:\r\n                 random_index = random.randint(1, len(self.songList))\r\n-                print(random_index)\r\n-                print(self.songList[random_index])\r\n-                self.selectedSongs[str(i)][\"id\"] = self.songList[random_index]\r\n-                self.selectedSongs[str(i)][\"id\"][\"title\"] = self.songList[random_index][\"title\"]\r\n-                self.selectedSongs[str(i)][\"id\"][\"artist\"] = self.songList[random_index][\"artist\"]\r\n-                self.selectedSongs[str(i)][\"id\"][\"filePath\"] = self.songList.random_index[\"filePath\"]\r\n+            print(random_index)\r\n+            print(self.songList[random_index])\r\n+            self.selectedSongs[str(i)][\"id\"] = self.songList[random_index]\r\n+            self.selectedSongs[str(i)][\"id\"][\"title\"] = self.songList[random_index][\"title\"]\r\n+            self.selectedSongs[str(i)][\"id\"][\"artist\"] = self.songList[random_index][\"artist\"]\r\n+            self.selectedSongs[str(i)][\"id\"][\"filePath\"] = self.songList.random_index[\"filePath\"]\r\n             oldRandom = random_index\r\n         print(self.selectedSongs)\r\n         return self.selectedSongs\r\n \r\n"
                },
                {
                    "date": 1654558645493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n             random_index = random.randint(1, len(self.songList))\r\n             while random_index == oldRandom:\r\n                 random_index = random.randint(1, len(self.songList))\r\n             print(random_index)\r\n-            print(self.songList[random_index])\r\n+            print(self.songList[str(random_index)])\r\n             self.selectedSongs[str(i)][\"id\"] = self.songList[random_index]\r\n             self.selectedSongs[str(i)][\"id\"][\"title\"] = self.songList[random_index][\"title\"]\r\n             self.selectedSongs[str(i)][\"id\"][\"artist\"] = self.songList[random_index][\"artist\"]\r\n             self.selectedSongs[str(i)][\"id\"][\"filePath\"] = self.songList.random_index[\"filePath\"]\r\n"
                },
                {
                    "date": 1654558696181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,12 +33,12 @@\n             while random_index == oldRandom:\r\n                 random_index = random.randint(1, len(self.songList))\r\n             print(random_index)\r\n             print(self.songList[str(random_index)])\r\n-            self.selectedSongs[str(i)][\"id\"] = self.songList[random_index]\r\n-            self.selectedSongs[str(i)][\"id\"][\"title\"] = self.songList[random_index][\"title\"]\r\n-            self.selectedSongs[str(i)][\"id\"][\"artist\"] = self.songList[random_index][\"artist\"]\r\n-            self.selectedSongs[str(i)][\"id\"][\"filePath\"] = self.songList.random_index[\"filePath\"]\r\n+            self.selectedSongs[str(i)][\"id\"] = self.songList[str(random_index)]\r\n+            self.selectedSongs[str(i)][\"id\"][\"title\"] = self.songList[str(random_index)][\"title\"]\r\n+            self.selectedSongs[str(i)][\"id\"][\"artist\"] = self.songList[str(random_index)][\"artist\"]\r\n+            self.selectedSongs[str(i)][\"id\"][\"filePath\"] = self.songList[str(random_index)][\"filePath\"]\r\n             oldRandom = random_index\r\n         print(self.selectedSongs)\r\n         return self.selectedSongs\r\n \r\n"
                },
                {
                    "date": 1654558734153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n             while random_index == oldRandom:\r\n                 random_index = random.randint(1, len(self.songList))\r\n             print(random_index)\r\n             print(self.songList[str(random_index)])\r\n-            self.selectedSongs[str(i)][\"id\"] = self.songList[str(random_index)]\r\n+            self.selectedSongs[str(i)][\"id\"] = self.songList[str(random_index)][\"id\"]\r\n             self.selectedSongs[str(i)][\"id\"][\"title\"] = self.songList[str(random_index)][\"title\"]\r\n             self.selectedSongs[str(i)][\"id\"][\"artist\"] = self.songList[str(random_index)][\"artist\"]\r\n             self.selectedSongs[str(i)][\"id\"][\"filePath\"] = self.songList[str(random_index)][\"filePath\"]\r\n             oldRandom = random_index\r\n"
                },
                {
                    "date": 1654558770422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n             while random_index == oldRandom:\r\n                 random_index = random.randint(1, len(self.songList))\r\n             print(random_index)\r\n             print(self.songList[str(random_index)])\r\n-            self.selectedSongs[str(i)][\"id\"] = self.songList[str(random_index)][\"id\"]\r\n+            self.selectedSongs[str(i)][\"id\"] = self.songList[str(random_index)].keys()[0]\r\n             self.selectedSongs[str(i)][\"id\"][\"title\"] = self.songList[str(random_index)][\"title\"]\r\n             self.selectedSongs[str(i)][\"id\"][\"artist\"] = self.songList[str(random_index)][\"artist\"]\r\n             self.selectedSongs[str(i)][\"id\"][\"filePath\"] = self.songList[str(random_index)][\"filePath\"]\r\n             oldRandom = random_index\r\n"
                },
                {
                    "date": 1654558778404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n             random_index = random.randint(1, len(self.songList))\r\n             while random_index == oldRandom:\r\n                 random_index = random.randint(1, len(self.songList))\r\n             print(random_index)\r\n-            print(self.songList[str(random_index)])\r\n+            print(self.songList[str(random_index)].keys())\r\n             self.selectedSongs[str(i)][\"id\"] = self.songList[str(random_index)].keys()[0]\r\n             self.selectedSongs[str(i)][\"id\"][\"title\"] = self.songList[str(random_index)][\"title\"]\r\n             self.selectedSongs[str(i)][\"id\"][\"artist\"] = self.songList[str(random_index)][\"artist\"]\r\n             self.selectedSongs[str(i)][\"id\"][\"filePath\"] = self.songList[str(random_index)][\"filePath\"]\r\n"
                },
                {
                    "date": 1654558820376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n             while random_index == oldRandom:\r\n                 random_index = random.randint(1, len(self.songList))\r\n             print(random_index)\r\n             print(self.songList[str(random_index)].keys())\r\n-            self.selectedSongs[str(i)][\"id\"] = self.songList[str(random_index)].keys()[0]\r\n+            self.selectedSongs[str(i)][\"id\"] = str(random_index)\r\n             self.selectedSongs[str(i)][\"id\"][\"title\"] = self.songList[str(random_index)][\"title\"]\r\n             self.selectedSongs[str(i)][\"id\"][\"artist\"] = self.songList[str(random_index)][\"artist\"]\r\n             self.selectedSongs[str(i)][\"id\"][\"filePath\"] = self.songList[str(random_index)][\"filePath\"]\r\n             oldRandom = random_index\r\n"
                },
                {
                    "date": 1654559134795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,23 +26,13 @@\n                 ...\r\n                 } \r\n     \"\"\"\r\n     def chooseSongs(self):\r\n-        for i in range(self.gameRounds):\r\n-            oldRandom = 0\r\n-            random_index = random.randint(1, len(self.songList))\r\n-            while random_index == oldRandom:\r\n-                random_index = random.randint(1, len(self.songList))\r\n-            print(random_index)\r\n-            print(self.songList[str(random_index)].keys())\r\n-            self.selectedSongs[str(i)][\"id\"] = str(random_index)\r\n-            self.selectedSongs[str(i)][\"id\"][\"title\"] = self.songList[str(random_index)][\"title\"]\r\n-            self.selectedSongs[str(i)][\"id\"][\"artist\"] = self.songList[str(random_index)][\"artist\"]\r\n-            self.selectedSongs[str(i)][\"id\"][\"filePath\"] = self.songList[str(random_index)][\"filePath\"]\r\n-            oldRandom = random_index\r\n-        print(self.selectedSongs)\r\n+        for round in range(self.gameRounds):\r\n+            self.selectedSongs[round] = random.sample(self.songList, 3)\r\n+        print(\"Songs selected: \", self.selectedSongs)\r\n         return self.selectedSongs\r\n-\r\n+    \r\n     \"\"\"\r\n     Função responsável por iterar a self.selectedSongs e a cada iteração\r\n         procurar na self.songList outras 3 músicas aleatórias que não sejam\r\n         as que já foram escolhidas, adicionando ao self.gameOptions no seguinte formato:\r\n"
                },
                {
                    "date": 1654559157356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                 } \r\n     \"\"\"\r\n     def chooseSongs(self):\r\n         for round in range(self.gameRounds):\r\n-            self.selectedSongs[round] = random.sample(self.songList, 3)\r\n+            self.selectedSongs[round] = random.sample(list(self.songList), 3)\r\n         print(\"Songs selected: \", self.selectedSongs)\r\n         return self.selectedSongs\r\n     \r\n     \"\"\"\r\n"
                },
                {
                    "date": 1654559977823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,13 +26,13 @@\n                 ...\r\n                 } \r\n     \"\"\"\r\n     def chooseSongs(self):\r\n-        for round in range(self.gameRounds):\r\n-            self.selectedSongs[round] = random.sample(list(self.songList), 3)\r\n-        print(\"Songs selected: \", self.selectedSongs)\r\n-        return self.selectedSongs\r\n-    \r\n+        choices = random.sample(range(1, len(self.songList)), self.gameRounds)\r\n+        for i in range(self.gameRounds):\r\n+            self.selectedSongs[str(i)] = self.songList[str(choices[i])]\r\n+            \r\n+        \r\n     \"\"\"\r\n     Função responsável por iterar a self.selectedSongs e a cada iteração\r\n         procurar na self.songList outras 3 músicas aleatórias que não sejam\r\n         as que já foram escolhidas, adicionando ao self.gameOptions no seguinte formato:\r\n"
                },
                {
                    "date": 1654559993443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     def chooseSongs(self):\r\n         choices = random.sample(range(1, len(self.songList)), self.gameRounds)\r\n         for i in range(self.gameRounds):\r\n             self.selectedSongs[str(i)] = self.songList[str(choices[i])]\r\n-            \r\n+        print(self.selectedSongs)\r\n         \r\n     \"\"\"\r\n     Função responsável por iterar a self.selectedSongs e a cada iteração\r\n         procurar na self.songList outras 3 músicas aleatórias que não sejam\r\n"
                },
                {
                    "date": 1654560132358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     \"\"\"\r\n     def chooseSongs(self):\r\n         choices = random.sample(range(1, len(self.songList)), self.gameRounds)\r\n         for i in range(self.gameRounds):\r\n-            self.selectedSongs[str(i)] = self.songList[str(choices[i])]\r\n+            self.selectedSongs[str(choices[i])] = self.songList[str(choices[i])]\r\n         print(self.selectedSongs)\r\n         \r\n     \"\"\"\r\n     Função responsável por iterar a self.selectedSongs e a cada iteração\r\n"
                },
                {
                    "date": 1654560162025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,16 +60,13 @@\n                 }\r\n \r\n     \"\"\"\r\n     def getOptionsForSongs(self):\r\n-        for round in self.selectedSongs:\r\n-            for i in range(3):\r\n-                song = self.songList[i]\r\n-                if song not in self.selectedSongs[round]:\r\n-                    self.gameOptions[round][i][\"title\"] = song[\"title\"]\r\n-                    self.gameOptions[round][i][\"artist\"] = song[\"artist\"]\r\n-                    self.gameOptions[round][i][\"filePath\"] = song[\"filePath\"]\r\n-        print(\"Opções para as musicas escolhidas: \", self.gameOptions)\r\n+        for i in range(self.gameRounds):\r\n+            self.gameOptions[str(i)] = dict()\r\n+            for j in range(3):\r\n+                self.gameOptions[str(i)][str(j)] = self.songList[str(random.randint(1, len(self.songList)))]\r\n+            print(self.gameOptions)\r\n     \r\n     def generateGame(self):\r\n         var = self.chooseSongs()\r\n         self.getOptionsForSongs()\r\n"
                },
                {
                    "date": 1654560277267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n         choices = random.sample(range(1, len(self.songList)), self.gameRounds)\r\n         for i in range(self.gameRounds):\r\n             self.selectedSongs[str(choices[i])] = self.songList[str(choices[i])]\r\n         print(self.selectedSongs)\r\n+        return self.selectedSongs\r\n         \r\n     \"\"\"\r\n     Função responsável por iterar a self.selectedSongs e a cada iteração\r\n         procurar na self.songList outras 3 músicas aleatórias que não sejam\r\n@@ -65,8 +66,9 @@\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(3):\r\n                 self.gameOptions[str(i)][str(j)] = self.songList[str(random.randint(1, len(self.songList)))]\r\n             print(self.gameOptions)\r\n+\r\n     \r\n     def generateGame(self):\r\n         var = self.chooseSongs()\r\n         self.getOptionsForSongs()\r\n"
                },
                {
                    "date": 1654560312940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import threading, json, random\r\n+import threading, json, random, pprint\r\n \r\n class gameGenerator():\r\n     def __init__(self, rounds):\r\n         threading.Thread.__init__(self)\r\n@@ -66,8 +66,9 @@\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(3):\r\n                 self.gameOptions[str(i)][str(j)] = self.songList[str(random.randint(1, len(self.songList)))]\r\n             print(self.gameOptions)\r\n+        return self.gameOptions\r\n \r\n     \r\n     def generateGame(self):\r\n         var = self.chooseSongs()\r\n"
                },
                {
                    "date": 1654560317993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     def chooseSongs(self):\r\n         choices = random.sample(range(1, len(self.songList)), self.gameRounds)\r\n         for i in range(self.gameRounds):\r\n             self.selectedSongs[str(choices[i])] = self.songList[str(choices[i])]\r\n-        print(self.selectedSongs)\r\n+        pprint(self.selectedSongs)\r\n         return self.selectedSongs\r\n         \r\n     \"\"\"\r\n     Função responsável por iterar a self.selectedSongs e a cada iteração\r\n"
                },
                {
                    "date": 1654560378531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     def chooseSongs(self):\r\n         choices = random.sample(range(1, len(self.songList)), self.gameRounds)\r\n         for i in range(self.gameRounds):\r\n             self.selectedSongs[str(choices[i])] = self.songList[str(choices[i])]\r\n-        pprint(self.selectedSongs)\r\n+        ppprint.pprint(self.selectedSongs)\r\n         return self.selectedSongs\r\n         \r\n     \"\"\"\r\n     Função responsável por iterar a self.selectedSongs e a cada iteração\r\n"
                },
                {
                    "date": 1654560387960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     def chooseSongs(self):\r\n         choices = random.sample(range(1, len(self.songList)), self.gameRounds)\r\n         for i in range(self.gameRounds):\r\n             self.selectedSongs[str(choices[i])] = self.songList[str(choices[i])]\r\n-        ppprint.pprint(self.selectedSongs)\r\n+        pprint.pprint(self.selectedSongs)\r\n         return self.selectedSongs\r\n         \r\n     \"\"\"\r\n     Função responsável por iterar a self.selectedSongs e a cada iteração\r\n@@ -65,9 +65,9 @@\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(3):\r\n                 self.gameOptions[str(i)][str(j)] = self.songList[str(random.randint(1, len(self.songList)))]\r\n-            print(self.gameOptions)\r\n+            pprint.pprint(self.gameOptions)\r\n         return self.gameOptions\r\n \r\n     \r\n     def generateGame(self):\r\n"
                },
                {
                    "date": 1654560436488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(3):\r\n                 self.gameOptions[str(i)][str(j)] = self.songList[str(random.randint(1, len(self.songList)))]\r\n-            pprint.pprint(self.gameOptions)\r\n+        pprint.pprint(self.gameOptions)\r\n         return self.gameOptions\r\n \r\n     \r\n     def generateGame(self):\r\n"
                },
                {
                    "date": 1654618107947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,11 +70,10 @@\n         return self.gameOptions\r\n \r\n     \r\n     def generateGame(self):\r\n-        var = self.chooseSongs()\r\n+        self.chooseSongs()\r\n         self.getOptionsForSongs()\r\n-        return var , self.gameOptions()\r\n     \r\n def main():\r\n     gg = gameGenerator(3)\r\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1654618124320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,12 +68,15 @@\n                 self.gameOptions[str(i)][str(j)] = self.songList[str(random.randint(1, len(self.songList)))]\r\n         pprint.pprint(self.gameOptions)\r\n         return self.gameOptions\r\n \r\n+    def getSongs(self):\r\n+        return self.selectedSongs\r\n     \r\n     def generateGame(self):\r\n         self.chooseSongs()\r\n         self.getOptionsForSongs()\r\n     \r\n+    \r\n def main():\r\n     gg = gameGenerator(3)\r\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1654618135422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,11 @@\n \r\n     def getSongs(self):\r\n         return self.selectedSongs\r\n     \r\n+    def getOptions(self):\r\n+        return self.gameOptions\r\n+    \r\n     def generateGame(self):\r\n         self.chooseSongs()\r\n         self.getOptionsForSongs()\r\n     \r\n"
                },
                {
                    "date": 1654782503264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n     \"\"\"\r\n     def getOptionsForSongs(self):\r\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n-            for j in range(3):\r\n+            for j in range(4):\r\n                 self.gameOptions[str(i)][str(j)] = self.songList[str(random.randint(1, len(self.songList)))]\r\n         pprint.pprint(self.gameOptions)\r\n         return self.gameOptions\r\n \r\n"
                },
                {
                    "date": 1654782545146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n                 ...\r\n                 } \r\n     \"\"\"\r\n     def chooseSongs(self):\r\n-        choices = random.sample(range(1, len(self.songList)), self.gameRounds)\r\n+        choices = random.sample(range(1, len(self.songList)+1), self.gameRounds)\r\n         for i in range(self.gameRounds):\r\n             self.selectedSongs[str(choices[i])] = self.songList[str(choices[i])]\r\n         pprint.pprint(self.selectedSongs)\r\n         return self.selectedSongs\r\n"
                },
                {
                    "date": 1654782603910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,17 +58,19 @@\n                         \"artist\": <artist>\r\n                     ...\r\n                     \r\n                 }\r\n-\r\n+    Verificando se não existem opções repetidas\r\n     \"\"\"\r\n     def getOptionsForSongs(self):\r\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n-            for j in range(4):\r\n-                self.gameOptions[str(i)][str(j)] = self.songList[str(random.randint(1, len(self.songList)))]\r\n-        pprint.pprint(self.gameOptions)\r\n-        return self.gameOptions\r\n+            for j in range(3):\r\n+                while True:\r\n+                    song = random.choice(self.songList.values())\r\n+                    if song[\"title\"] != self.selectedSongs[str(i+1)][\"title\"] and song[\"artist\"] != self.selectedSongs[str(i+1)][\"artist\"]:\r\n+                        self.gameOptions[str(i)][str(j)] = song\r\n+                        break\r\n \r\n     def getSongs(self):\r\n         return self.selectedSongs\r\n     \r\n"
                },
                {
                    "date": 1654782611237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,9 @@\n                     song = random.choice(self.songList.values())\r\n                     if song[\"title\"] != self.selectedSongs[str(i+1)][\"title\"] and song[\"artist\"] != self.selectedSongs[str(i+1)][\"artist\"]:\r\n                         self.gameOptions[str(i)][str(j)] = song\r\n                         break\r\n+            pprint.pprint(self.gameOptions)\r\n \r\n     def getSongs(self):\r\n         return self.selectedSongs\r\n     \r\n"
                },
                {
                    "date": 1654782623496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,8 @@\n                     song = random.choice(self.songList.values())\r\n                     if song[\"title\"] != self.selectedSongs[str(i+1)][\"title\"] and song[\"artist\"] != self.selectedSongs[str(i+1)][\"artist\"]:\r\n                         self.gameOptions[str(i)][str(j)] = song\r\n                         break\r\n-            pprint.pprint(self.gameOptions)\r\n \r\n     def getSongs(self):\r\n         return self.selectedSongs\r\n     \r\n"
                },
                {
                    "date": 1654782713785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(3):\r\n                 while True:\r\n-                    song = random.choice(self.songList.values())\r\n+                    song = random.choice(self.songList.items())\r\n                     if song[\"title\"] != self.selectedSongs[str(i+1)][\"title\"] and song[\"artist\"] != self.selectedSongs[str(i+1)][\"artist\"]:\r\n                         self.gameOptions[str(i)][str(j)] = song\r\n                         break\r\n \r\n"
                },
                {
                    "date": 1654783072540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,19 +58,21 @@\n                         \"artist\": <artist>\r\n                     ...\r\n                     \r\n                 }\r\n-    Verificando se não existem opções repetidas\r\n+    \r\n     \"\"\"\r\n     def getOptionsForSongs(self):\r\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n-            for j in range(3):\r\n-                while True:\r\n-                    song = random.choice(self.songList.items())\r\n-                    if song[\"title\"] != self.selectedSongs[str(i+1)][\"title\"] and song[\"artist\"] != self.selectedSongs[str(i+1)][\"artist\"]:\r\n-                        self.gameOptions[str(i)][str(j)] = song\r\n-                        break\r\n+            for j in range(4):\r\n+                song = self.songList[str(random.randint(1, len(self.songList) + 1))]\r\n+                while song in self.selectedSongs.values():\r\n+                    song = self.songList[str(random.randint(1, len(self.songList) + 1))]\r\n+                    self.gameOptions[str(i)][str(j)] = song\r\n+                self.gameOptions[str(i)][str(j)] = song\r\n+        pprint.pprint(self.gameOptions)\r\n+        return self.gameOptions\r\n \r\n     def getSongs(self):\r\n         return self.selectedSongs\r\n     \r\n"
                },
                {
                    "date": 1654783091810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,11 +64,11 @@\n     def getOptionsForSongs(self):\r\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(4):\r\n-                song = self.songList[str(random.randint(1, len(self.songList) + 1))]\r\n+                song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 while song in self.selectedSongs.values():\r\n-                    song = self.songList[str(random.randint(1, len(self.songList) + 1))]\r\n+                    song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                     self.gameOptions[str(i)][str(j)] = song\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         pprint.pprint(self.gameOptions)\r\n         return self.gameOptions\r\n"
                },
                {
                    "date": 1654783130597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,8 @@\n             for j in range(4):\r\n                 song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 while song in self.selectedSongs.values():\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n-                    self.gameOptions[str(i)][str(j)] = song\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         pprint.pprint(self.gameOptions)\r\n         return self.gameOptions\r\n \r\n"
                },
                {
                    "date": 1654784520346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,16 +60,25 @@\n                     \r\n                 }\r\n     \r\n     \"\"\"\r\n+    \r\n+    def shuffleGame(self):\r\n+        keys = list(self.gameOptions.keys())\r\n+        random.shuffle(keys)\r\n+        tmp = dict()\r\n+        for key in keys:\r\n+            tmp.update({key: self.gameOptions[key]})\r\n+    \r\n     def getOptionsForSongs(self):\r\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n-            for j in range(4):\r\n+            for j in range(3):\r\n                 song = self.songList[str(random.randint(1, len(self.songList)))]\r\n-                while song in self.selectedSongs.values():\r\n+                while song not in self.selectedSongs.values():\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n+            self.gameOptions[str(i)][str(self.gameRounds)] = self.selectedSongs[str(i)]\r\n         pprint.pprint(self.gameOptions)\r\n         return self.gameOptions\r\n \r\n     def getSongs(self):\r\n"
                },
                {
                    "date": 1654784561725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,8 @@\n                 song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 while song not in self.selectedSongs.values():\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n-            self.gameOptions[str(i)][str(self.gameRounds)] = self.selectedSongs[str(i)]\r\n         pprint.pprint(self.gameOptions)\r\n         return self.gameOptions\r\n \r\n     def getSongs(self):\r\n"
                },
                {
                    "date": 1654784661799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(3):\r\n                 song = self.songList[str(random.randint(1, len(self.songList)))]\r\n-                while song not in self.selectedSongs.values():\r\n+                while song not in self.gameOptions[str(i)].values():\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         pprint.pprint(self.gameOptions)\r\n         return self.gameOptions\r\n"
                },
                {
                    "date": 1654784697697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,9 @@\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(3):\r\n                 song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 while song not in self.gameOptions[str(i)].values():\r\n+                    print(\"generating options\")\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         pprint.pprint(self.gameOptions)\r\n         return self.gameOptions\r\n"
                },
                {
                    "date": 1654784718554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(3):\r\n                 song = self.songList[str(random.randint(1, len(self.songList)))]\r\n-                while song not in self.gameOptions[str(i)].values():\r\n+                while song in self.gameOptions[str(i)].values():\r\n                     print(\"generating options\")\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         pprint.pprint(self.gameOptions)\r\n"
                },
                {
                    "date": 1654784791499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,8 +77,9 @@\n                 while song in self.gameOptions[str(i)].values():\r\n                     print(\"generating options\")\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n+            self.gameOptions[str(i)][self.gameRounds] = self.selectedSongs[str(i)]\r\n         pprint.pprint(self.gameOptions)\r\n         return self.gameOptions\r\n \r\n     def getSongs(self):\r\n"
                },
                {
                    "date": 1654785175191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,13 @@\n                 while song in self.gameOptions[str(i)].values():\r\n                     print(\"generating options\")\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n-            self.gameOptions[str(i)][self.gameRounds] = self.selectedSongs[str(i)]\r\n+        #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n+        for i in range(self.gameRounds):\r\n+            self.gameOptions[str(i)][str(self.gameRounds)] = self.selectedSongs[str(i)]\r\n+            \r\n+        \r\n         pprint.pprint(self.gameOptions)\r\n         return self.gameOptions\r\n \r\n     def getSongs(self):\r\n"
                },
                {
                    "date": 1654785182663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,9 @@\n                 self.gameOptions[str(i)][str(j)] = song\r\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)][str(self.gameRounds)] = self.selectedSongs[str(i)]\r\n+\r\n             \r\n         \r\n         pprint.pprint(self.gameOptions)\r\n         return self.gameOptions\r\n"
                },
                {
                    "date": 1654785250412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n         for i in range(self.gameRounds):\r\n-            self.gameOptions[str(i)][str(self.gameRounds)] = self.selectedSongs[str(i)]\r\n+            self.gameOptions[str(i)][\"3\"] = self.selectedSongs[str(i)]\r\n \r\n             \r\n         \r\n         pprint.pprint(self.gameOptions)\r\n"
                },
                {
                    "date": 1654785277511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,10 +78,10 @@\n                     print(\"generating options\")\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n-        for i in range(self.gameRounds):\r\n-            self.gameOptions[str(i)][\"3\"] = self.selectedSongs[str(i)]\r\n+        for song in self.selectedSongs.values():\r\n+            self.gameOptions[str(i)][self.gameOptions] = self.selectedSongs[str(i)]\r\n \r\n             \r\n         \r\n         pprint.pprint(self.gameOptions)\r\n"
                },
                {
                    "date": 1654785284880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n         for song in self.selectedSongs.values():\r\n-            self.gameOptions[str(i)][self.gameOptions] = self.selectedSongs[str(i)]\r\n+            self.gameOptions[str(i)][self.gameOptions] = song\r\n \r\n             \r\n         \r\n         pprint.pprint(self.gameOptions)\r\n"
                },
                {
                    "date": 1654785331381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n         for song in self.selectedSongs.values():\r\n-            self.gameOptions[str(i)][self.gameOptions] = song\r\n+            print(song)\r\n \r\n             \r\n         \r\n         pprint.pprint(self.gameOptions)\r\n"
                },
                {
                    "date": 1654785384702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n         for song in self.selectedSongs.values():\r\n-            print(song)\r\n+            self.gameOptions[str(i)][str(int(self.gameRounds))] = song\r\n \r\n             \r\n         \r\n         pprint.pprint(self.gameOptions)\r\n"
                },
                {
                    "date": 1654785475187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,11 +78,12 @@\n                     print(\"generating options\")\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n+        k = 0\r\n         for song in self.selectedSongs.values():\r\n-            self.gameOptions[str(i)][str(int(self.gameRounds))] = song\r\n-\r\n+            self.gameOptions[str(k)][str(int(self.gameRounds))] = song\r\n+            k += 1\r\n             \r\n         \r\n         pprint.pprint(self.gameOptions)\r\n         return self.gameOptions\r\n"
                },
                {
                    "date": 1654785489569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,10 +82,8 @@\n         k = 0\r\n         for song in self.selectedSongs.values():\r\n             self.gameOptions[str(k)][str(int(self.gameRounds))] = song\r\n             k += 1\r\n-            \r\n-        \r\n         pprint.pprint(self.gameOptions)\r\n         return self.gameOptions\r\n \r\n     def getSongs(self):\r\n"
                },
                {
                    "date": 1654785508212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,9 @@\n                 self.gameOptions[str(i)][str(j)] = song\r\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n         k = 0\r\n         for song in self.selectedSongs.values():\r\n+            print(\"putas e vinho verde\")\r\n             self.gameOptions[str(k)][str(int(self.gameRounds))] = song\r\n             k += 1\r\n         pprint.pprint(self.gameOptions)\r\n         return self.gameOptions\r\n"
                },
                {
                    "date": 1654785563120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,9 @@\n             print(\"putas e vinho verde\")\r\n             self.gameOptions[str(k)][str(int(self.gameRounds))] = song\r\n             k += 1\r\n         pprint.pprint(self.gameOptions)\r\n+        self.shuffleGame()\r\n         return self.gameOptions\r\n \r\n     def getSongs(self):\r\n         return self.selectedSongs\r\n"
                },
                {
                    "date": 1654787239328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,21 +73,36 @@\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(3):\r\n                 song = self.songList[str(random.randint(1, len(self.songList)))]\r\n-                while song in self.gameOptions[str(i)].values():\r\n+                while song in self.gameOptions[str(i)].values() or song == self.selectedSongs[str(i)]:\r\n                     print(\"generating options\")\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n         k = 0\r\n         for song in self.selectedSongs.values():\r\n-            print(\"putas e vinho verde\")\r\n             self.gameOptions[str(k)][str(int(self.gameRounds))] = song\r\n             k += 1\r\n         pprint.pprint(self.gameOptions)\r\n         self.shuffleGame()\r\n+        #verify for each round if there are duplicates, if so, get a random song from songList (different from the options)\r\n         return self.gameOptions\r\n+    \r\n+    \r\n+    #for a given dictionary, check if any keys have duplicate values. If so, get a random song from songList (different from the other keys.values()\r\n+    def fixDic(self, dictionary):\r\n+        for key in dictionary.keys():\r\n+            for value in dictionary[key].values():\r\n+                for key2 in dictionary.keys():\r\n+                    if key != key2:\r\n+                        for value2 in dictionary[key2].values():\r\n+                            if value == value2:\r\n+                                song = self.songList[str(random.randint(1, len(self.songList)))]\r\n+                                while song in dictionary[key2].values() or song == dictionary[key][value]:\r\n+                                    song = self.songList[str(random.randint(1, len(self.songList)))]\r\n+                                dictionary[key2][str(int(len(dictionary[key2])))] = song\r\n+        return dictionary\r\n \r\n     def getSongs(self):\r\n         return self.selectedSongs\r\n     \r\n"
                },
                {
                    "date": 1654787290983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,8 +81,9 @@\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n         k = 0\r\n         for song in self.selectedSongs.values():\r\n             self.gameOptions[str(k)][str(int(self.gameRounds))] = song\r\n+            self.gameOptions[str(k)][str(int(self.gameRounds))] = self.fixDic(self.gameOptions[str(k)])\r\n             k += 1\r\n         pprint.pprint(self.gameOptions)\r\n         self.shuffleGame()\r\n         #verify for each round if there are duplicates, if so, get a random song from songList (different from the options)\r\n"
                },
                {
                    "date": 1654787318831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(3):\r\n                 song = self.songList[str(random.randint(1, len(self.songList)))]\r\n-                while song in self.gameOptions[str(i)].values() or song == self.selectedSongs[str(i)]:\r\n+                while song in self.gameOptions[str(i)].values():\r\n                     print(\"generating options\")\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n"
                },
                {
                    "date": 1654787479382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,17 +73,16 @@\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(3):\r\n                 song = self.songList[str(random.randint(1, len(self.songList)))]\r\n-                while song in self.gameOptions[str(i)].values():\r\n+                while song in self.gameOptions[str(i)].values() and song not in self.selectSongs.values():\r\n                     print(\"generating options\")\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n         k = 0\r\n         for song in self.selectedSongs.values():\r\n             self.gameOptions[str(k)][str(int(self.gameRounds))] = song\r\n-            self.gameOptions[str(k)][str(int(self.gameRounds))] = self.fixDic(self.gameOptions[str(k)])\r\n             k += 1\r\n         pprint.pprint(self.gameOptions)\r\n         self.shuffleGame()\r\n         #verify for each round if there are duplicates, if so, get a random song from songList (different from the options)\r\n"
                },
                {
                    "date": 1654787498480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(3):\r\n                 song = self.songList[str(random.randint(1, len(self.songList)))]\r\n-                while song in self.gameOptions[str(i)].values() and song not in self.selectSongs.values():\r\n+                while song in self.gameOptions[str(i)].values() and song not in self.selectedSongs.values():\r\n                     print(\"generating options\")\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n"
                },
                {
                    "date": 1654787625153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,11 +64,9 @@\n     \r\n     def shuffleGame(self):\r\n         keys = list(self.gameOptions.keys())\r\n         random.shuffle(keys)\r\n-        tmp = dict()\r\n-        for key in keys:\r\n-            tmp.update({key: self.gameOptions[key]})\r\n+        [(key, self.gameOptions[key]) for key in keys]\r\n     \r\n     def getOptionsForSongs(self):\r\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n@@ -82,10 +80,10 @@\n         k = 0\r\n         for song in self.selectedSongs.values():\r\n             self.gameOptions[str(k)][str(int(self.gameRounds))] = song\r\n             k += 1\r\n-        pprint.pprint(self.gameOptions)\r\n         self.shuffleGame()\r\n+        \r\n         #verify for each round if there are duplicates, if so, get a random song from songList (different from the options)\r\n         return self.gameOptions\r\n     \r\n     \r\n"
                },
                {
                    "date": 1654787717324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,12 +61,12 @@\n                 }\r\n     \r\n     \"\"\"\r\n     \r\n-    def shuffleGame(self):\r\n-        keys = list(self.gameOptions.keys())\r\n+    def shuffleGame(self, d):\r\n+        keys = list(d)\r\n         random.shuffle(keys)\r\n-        [(key, self.gameOptions[key]) for key in keys]\r\n+        [(key, d[key]) for key in keys]\r\n     \r\n     def getOptionsForSongs(self):\r\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n@@ -79,10 +79,10 @@\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n         k = 0\r\n         for song in self.selectedSongs.values():\r\n             self.gameOptions[str(k)][str(int(self.gameRounds))] = song\r\n+            self.shuffleGame([(str(k))])\r\n             k += 1\r\n-        self.shuffleGame()\r\n         \r\n         #verify for each round if there are duplicates, if so, get a random song from songList (different from the options)\r\n         return self.gameOptions\r\n     \r\n"
                },
                {
                    "date": 1654787768282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n         k = 0\r\n         for song in self.selectedSongs.values():\r\n             self.gameOptions[str(k)][str(int(self.gameRounds))] = song\r\n-            self.shuffleGame([(str(k))])\r\n+            self.shuffleGame(self.gameOptions[(str(k))])\r\n             k += 1\r\n         \r\n         #verify for each round if there are duplicates, if so, get a random song from songList (different from the options)\r\n         return self.gameOptions\r\n"
                },
                {
                    "date": 1654787803261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,8 @@\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n         k = 0\r\n         for song in self.selectedSongs.values():\r\n             self.gameOptions[str(k)][str(int(self.gameRounds))] = song\r\n-            self.shuffleGame(self.gameOptions[(str(k))])\r\n             k += 1\r\n         \r\n         #verify for each round if there are duplicates, if so, get a random song from songList (different from the options)\r\n         return self.gameOptions\r\n"
                },
                {
                    "date": 1654787828368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(3):\r\n                 song = self.songList[str(random.randint(1, len(self.songList)))]\r\n-                while song in self.gameOptions[str(i)].values() and song not in self.selectedSongs.values():\r\n+                while song in self.gameOptions[str(i)].values() or song not in self.selectedSongs.values():\r\n                     print(\"generating options\")\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n"
                },
                {
                    "date": 1654787888376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(3):\r\n                 song = self.songList[str(random.randint(1, len(self.songList)))]\r\n-                while song in self.gameOptions[str(i)].values() or song not in self.selectedSongs.values():\r\n+                while song in self.gameOptions[str(i)].values() or song in self.selectedSongs.values():\r\n                     print(\"generating options\")\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n"
                },
                {
                    "date": 1654787902811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,10 +79,11 @@\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n         k = 0\r\n         for song in self.selectedSongs.values():\r\n             self.gameOptions[str(k)][str(int(self.gameRounds))] = song\r\n+            self.shuffleGame(self.gameOptions[str(k)])\r\n             k += 1\r\n-        \r\n+\r\n         #verify for each round if there are duplicates, if so, get a random song from songList (different from the options)\r\n         return self.gameOptions\r\n     \r\n     \r\n"
                },
                {
                    "date": 1654787966012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     \r\n     \"\"\"\r\n     \r\n     def shuffleGame(self, d):\r\n-        keys = list(d)\r\n+        keys = list(d.keys())\r\n         random.shuffle(keys)\r\n         [(key, d[key]) for key in keys]\r\n     \r\n     def getOptionsForSongs(self):\r\n@@ -79,9 +79,9 @@\n         #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n         k = 0\r\n         for song in self.selectedSongs.values():\r\n             self.gameOptions[str(k)][str(int(self.gameRounds))] = song\r\n-            self.shuffleGame(self.gameOptions[str(k)])\r\n+            self.gameOptions [str(k)] = self.shuffleGame(self.gameOptions[str(k)])\r\n             k += 1\r\n \r\n         #verify for each round if there are duplicates, if so, get a random song from songList (different from the options)\r\n         return self.gameOptions\r\n"
                },
                {
                    "date": 1654788001142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,21 +87,10 @@\n         return self.gameOptions\r\n     \r\n     \r\n     #for a given dictionary, check if any keys have duplicate values. If so, get a random song from songList (different from the other keys.values()\r\n-    def fixDic(self, dictionary):\r\n-        for key in dictionary.keys():\r\n-            for value in dictionary[key].values():\r\n-                for key2 in dictionary.keys():\r\n-                    if key != key2:\r\n-                        for value2 in dictionary[key2].values():\r\n-                            if value == value2:\r\n-                                song = self.songList[str(random.randint(1, len(self.songList)))]\r\n-                                while song in dictionary[key2].values() or song == dictionary[key][value]:\r\n-                                    song = self.songList[str(random.randint(1, len(self.songList)))]\r\n-                                dictionary[key2][str(int(len(dictionary[key2])))] = song\r\n-        return dictionary\r\n \r\n+\r\n     def getSongs(self):\r\n         return self.selectedSongs\r\n     \r\n     def getOptions(self):\r\n"
                },
                {
                    "date": 1654788063462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,10 @@\n     \r\n     def shuffleGame(self, d):\r\n         keys = list(d.keys())\r\n         random.shuffle(keys)\r\n-        [(key, d[key]) for key in keys]\r\n+        tmp = [(key, d[key]) for key in keys]\r\n+        return tmp\r\n     \r\n     def getOptionsForSongs(self):\r\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n"
                },
                {
                    "date": 1654788152634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,12 +62,12 @@\n     \r\n     \"\"\"\r\n     \r\n     def shuffleGame(self, d):\r\n-        keys = list(d.keys())\r\n-        random.shuffle(keys)\r\n-        tmp = [(key, d[key]) for key in keys]\r\n-        return tmp\r\n+        temp = list(d.values())\r\n+        random.shuffle(temp)\r\n+        \r\n+        res = dict(zip(d, temp))\r\n     \r\n     def getOptionsForSongs(self):\r\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n"
                },
                {
                    "date": 1654788158571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,11 +64,10 @@\n     \r\n     def shuffleGame(self, d):\r\n         temp = list(d.values())\r\n         random.shuffle(temp)\r\n-        \r\n         res = dict(zip(d, temp))\r\n-    \r\n+        return res\r\n     def getOptionsForSongs(self):\r\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(3):\r\n"
                },
                {
                    "date": 1654788333289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,31 +66,26 @@\n         temp = list(d.values())\r\n         random.shuffle(temp)\r\n         res = dict(zip(d, temp))\r\n         return res\r\n+    \r\n     def getOptionsForSongs(self):\r\n         for i in range(self.gameRounds):\r\n             self.gameOptions[str(i)] = dict()\r\n             for j in range(3):\r\n                 song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 while song in self.gameOptions[str(i)].values() or song in self.selectedSongs.values():\r\n-                    print(\"generating options\")\r\n                     song = self.songList[str(random.randint(1, len(self.songList)))]\r\n                 self.gameOptions[str(i)][str(j)] = song\r\n-        #for each round in self.gameOptions and self.selectedSongs, add the selectedSongs to the options\r\n         k = 0\r\n         for song in self.selectedSongs.values():\r\n             self.gameOptions[str(k)][str(int(self.gameRounds))] = song\r\n             self.gameOptions [str(k)] = self.shuffleGame(self.gameOptions[str(k)])\r\n             k += 1\r\n \r\n-        #verify for each round if there are duplicates, if so, get a random song from songList (different from the options)\r\n         return self.gameOptions\r\n     \r\n-    \r\n-    #for a given dictionary, check if any keys have duplicate values. If so, get a random song from songList (different from the other keys.values()\r\n \r\n-\r\n     def getSongs(self):\r\n         return self.selectedSongs\r\n     \r\n     def getOptions(self):\r\n"
                }
            ],
            "date": 1654528262618,
            "name": "Commit-0",
            "content": "import threading, json\r\n\r\nclass gameGenerator():\r\n    def __init__(self, rounds):\r\n        threading.Thread.__init__(self)\r\n        self.songsDB = \"assets/songlist.json\" #path para o ficheiro de musicas\r\n        self.songList = json.load(open(self.songDB)) # carrega o ficheiro de musicas\r\n        self.currentGamePlayers = dict() #dicionario com os jogadores desse jogo\r\n        self.gameRounds = rounds #número de rondas do jogo\r\n        self.selectedSongs = dict()\r\n        self.gameOptions = dict()  \r\n    \"\"\"\r\n        Iterar sobre a lista de musicas disponivel na base de dados e escolher\r\n            <self.gameRounds> músicas aleatórias\r\n            devolvendo um dicionario com as musicas escolhidas com o seguinte formato:\r\n                {\r\n                 \"id\": {\r\n                     \"title\": <title>,\r\n                     \"artist\": <artist>\r\n                 },\r\n                 \"id\" : {\r\n                        \"title\": <title>,\r\n                        \"artist\": <artist>\r\n                }\r\n                ...\r\n                } \r\n    \"\"\"\r\n    def chooseSongs(self):\r\n        for i in range(self.gameRounds):\r\n            song = self.songList[i]\r\n            self.selectedSongs[i][\"title\"] = song[\"title\"]\r\n            self.selectedSongs[i][\"artist\"] = song[\"artist\"]\r\n            self.selectedSongs[i][\"filePath\"] = song[\"filePath\"]\r\n        print(\"Musicas escolhidas para jogo: \", self.selectedSongs)\r\n\r\n    \"\"\"\r\n    Função responsável por iterar a self.selectedSongs e a cada iteração\r\n        procurar na self.songList outras 3 músicas aleatórias que não sejam\r\n        as que já foram escolhidas, adicionando ao self.gameOptions no seguinte formato:\r\n            {\r\n                \"r1\": {\r\n                    \"id\": {\r\n                        \"title\": <title>,\r\n                        \"artist\": <artist>\r\n                    },\r\n                    \"id\": {\r\n                        \"title\": <title>,\r\n                        \"artist\": <artist>\r\n                    ...\r\n                    },\r\n                \"r2\": {\r\n                    \"id\": {\r\n                        \"title\": <title>,\r\n                        \"artist\": <artist>\r\n                    },\r\n                    \"id\": {\r\n                        \"title\": <title>,\r\n                        \"artist\": <artist>\r\n                    ...\r\n                    \r\n                }\r\n\r\n    \"\"\"\r\n    def getOptionsForSongs(self):\r\n        for round in self.selectedSongs:\r\n            for i in range(3):\r\n                song = self.songList[i]\r\n                if song not in self.selectedSongs[round]:\r\n                    self.gameOptions[round][i][\"title\"] = song[\"title\"]\r\n                    self.gameOptions[round][i][\"artist\"] = song[\"artist\"]\r\n        print(\"Opções para as musicas escolhidas: \", self.gameOptions)\r\n    \r\n    def generateGame(self):\r\n        var = self.chooseSongs()\r\n        self.getOptionsForSongs()\r\n        return var , self.gameOptions()"
        }
    ]
}