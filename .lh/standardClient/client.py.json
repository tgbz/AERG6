{
    "sourceFile": "standardClient/client.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1655070527147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1655070538356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n                 data, addr = self.socket.recvfrom(self.buff)\r\n                 msg = data.decode()\r\n                 if msg.split('-')[0] == \"final\":\r\n                     self.socket.sendto(\"final-ack\".encode(), addr)\r\n-                    print(msg.split('-')[1])«\r\n+                    print(msg.split('-')[1])\r\n             except socket.timeout:\r\n                 print(\"Other timeout\")\r\n         print(\"Resultados enviados\")   \r\n      \r\n"
                },
                {
                    "date": 1655070662338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,10 +124,10 @@\n                 msg = data.decode()\r\n                 if msg.split('-')[0] == \"final\":\r\n                     self.socket.sendto(\"final-ack\".encode(), addr)\r\n                     print(msg.split('-')[1])\r\n-            except socket.timeout:\r\n-                print(\"Other timeout\")\r\n+            except Exception as e:\r\n+                pass\r\n         print(\"Resultados enviados\")   \r\n      \r\n     def sR(self):\r\n         res = self.results.replace(\"results\", \"\")\r\n"
                },
                {
                    "date": 1655070778303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,8 +124,9 @@\n                 msg = data.decode()\r\n                 if msg.split('-')[0] == \"final\":\r\n                     self.socket.sendto(\"final-ack\".encode(), addr)\r\n                     print(msg.split('-')[1])\r\n+                    break\r\n             except Exception as e:\r\n                 pass\r\n         print(\"Resultados enviados\")   \r\n      \r\n"
                },
                {
                    "date": 1655070966901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,11 +157,10 @@\n         while True:\r\n             self.aSocket.sendto((\"disconnect-\" + self.hostName).encode(), (serverAddr, self.clientPort))\r\n             data, addr = self.aSocket.recvfrom(self.buff)\r\n             if data.decode() == \"disconnect-ack\":\r\n-\r\n                 break\r\n-\r\n+        sys.exit()\r\n         \r\n def main():\r\n     global serverAddr\r\n     serverAddr = sys.argv[1]\r\n"
                },
                {
                    "date": 1655073210428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     \r\n     def auth(self):\r\n     \r\n         self.aSocket.sendto(\"hello-\".encode() + self.hostName.encode(), (serverAddr, self.clientPort))\r\n-        print(\"Mensagem enviada: hello-\" + self.hostName)\r\n+        print(\"A iniciar conexao: \" + self.hostName)\r\n         while True:\r\n             try:\r\n                 data,addr = self.aSocket.recvfrom(self.buff)\r\n                 if data.decode().split('-')[0] == \"hello\" and data.decode().split('-')[1] == \"ack\":\r\n@@ -41,18 +41,17 @@\n                     print(self.gamePort)\r\n                     self.gameQueue()\r\n                     break\r\n             except socket.timeout:\r\n-                print(\"Timeout\")\r\n+                pass\r\n             \r\n     #atraves da string com o formato menu-r<numero>$id$id$id$id-r<numero>$id$id$id$id(...)-end\r\n     #extrair os ids das musicas\r\n     def generateMenu(self, msg):\r\n-        print(msg)\r\n         self.opts = []\r\n         self.sols = []\r\n         msg = msg.split('-end')[0]\r\n-        print(msg)\r\n+\r\n         for g in re.findall(r'r\\d((\\$\\d){4})',msg):\r\n             self.opts.append(g[0].split('$')[1:])\r\n         print(self.opts)\r\n         for sols in re.findall(r'((\\%\\d){'+str(len(self.opts))+'})',msg):\r\n@@ -69,9 +68,9 @@\n        \r\n        \r\n     def gameOn(self):\r\n         self.findPaths()\r\n-        print(\"in gameMenu\")\r\n+        print(\"Menu de Jogo\")\r\n         self.results = \"results-\"\r\n         for i in range(len(self.opts)):\r\n             men = []\r\n             tmp = []\r\n@@ -92,14 +91,12 @@\n             p.terminate()\r\n             print(\"\\x1b[2J\\x1b[H\",end=\"\")\r\n             finalTime = endTime - startTime\r\n             self.results += \"r\" + str(i) + \"-@\" + str(finalTime) + \"#\" + str(f) + \"-\"\r\n-        print(self.results)\r\n-    \r\n \r\n     def gameQueue(self):\r\n         self.socket.settimeout(6)\r\n-        print(\"A espera de jogos...\")\r\n+        print(\"A para iniciar jogo...\")\r\n         while True:\r\n             try:\r\n                 data, addr = self.socket.recvfrom(self.buff)\r\n                 msg = data.decode()\r\n@@ -114,10 +111,11 @@\n                     self.gameOn()\r\n                     self.sR()\r\n                     break\r\n             except socket.timeout:\r\n-                print(\"Timeout\")       \r\n-\r\n+                pass       \r\n+        \r\n+        print(\"Partida concluida... A espera de Resultados\")\r\n         while True:\r\n             try:\r\n                 self.socket.sendto(self.results.encode(), (serverAddr, self.gamePort))\r\n                 data, addr = self.socket.recvfrom(self.buff)\r\n@@ -126,10 +124,9 @@\n                     self.socket.sendto(\"final-ack\".encode(), addr)\r\n                     print(msg.split('-')[1])\r\n                     break\r\n             except Exception as e:\r\n-                pass\r\n-        print(\"Resultados enviados\")   \r\n+                pass   \r\n      \r\n     def sR(self):\r\n         res = self.results.replace(\"results\", \"\")\r\n         res = res[:-1]\r\n"
                }
            ],
            "date": 1655070527147,
            "name": "Commit-0",
            "content": "\r\nfrom http import server\r\nimport socket, sys, time, pprint, time, playsound, json, re\r\nfrom multiprocessing import Process\r\n\r\nserverAddr = \"\"\r\n\r\ndef playMusic(file):\r\n    playsound.playsound(file)\r\n    \r\nclass gameClient():\r\n    def __init__(self):\r\n        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n        self.buff = 4096\r\n        self.clientPort = 8080\r\n        self.gamePort = 0\r\n        self.hostName = socket.gethostname()\r\n        self.gameMenu = \"\"\r\n        self.paths = [] #caminhos das musicas a reproduzir\r\n        self.opts = [] #ids opcoes de jogo por ronda,\r\n        self.sols = [] #ids musicas a reproduzir\r\n        self.aSocket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n        self.aSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n        self.socket.settimeout(None)\r\n        self.aSocket.bind(('', self.clientPort))\r\n        self.songList = json.load(open(\"../common/songlist.json\"))\r\n        self.results = \"\"\r\n    \r\n    def auth(self):\r\n    \r\n        self.aSocket.sendto(\"hello-\".encode() + self.hostName.encode(), (serverAddr, self.clientPort))\r\n        print(\"Mensagem enviada: hello-\" + self.hostName)\r\n        while True:\r\n            try:\r\n                data,addr = self.aSocket.recvfrom(self.buff)\r\n                if data.decode().split('-')[0] == \"hello\" and data.decode().split('-')[1] == \"ack\":\r\n                    print(\"Conexao ao servidor no endereço\" + str(addr[0]) + \":\" + str(addr[1]) + \" bem sucedida\")\r\n                    self.gamePort = int(data.decode().split('-')[2])\r\n                    self.socket.bind(('', self.gamePort))\r\n                    print(self.gamePort)\r\n                    self.gameQueue()\r\n                    break\r\n            except socket.timeout:\r\n                print(\"Timeout\")\r\n            \r\n    #atraves da string com o formato menu-r<numero>$id$id$id$id-r<numero>$id$id$id$id(...)-end\r\n    #extrair os ids das musicas\r\n    def generateMenu(self, msg):\r\n        print(msg)\r\n        self.opts = []\r\n        self.sols = []\r\n        msg = msg.split('-end')[0]\r\n        print(msg)\r\n        for g in re.findall(r'r\\d((\\$\\d){4})',msg):\r\n            self.opts.append(g[0].split('$')[1:])\r\n        print(self.opts)\r\n        for sols in re.findall(r'((\\%\\d){'+str(len(self.opts))+'})',msg):\r\n            #print(sols[0].split('%')[1:])\r\n            self.sols = sols[0].split('%')[1:]\r\n        print(self.sols)\r\n\r\n       \r\n    def findPaths(self):\r\n        for i in range(len(self.sols)):\r\n            self.paths.append(self.songList[self.sols[i]][\"filePath\"])\r\n        print(self.paths)\r\n   \r\n       \r\n       \r\n    def gameOn(self):\r\n        self.findPaths()\r\n        print(\"in gameMenu\")\r\n        self.results = \"results-\"\r\n        for i in range(len(self.opts)):\r\n            men = []\r\n            tmp = []\r\n            for j in range(len(self.opts[i])):\r\n                tmp.append(self.opts[i][j])\r\n                tp = str(j) + \" : \" + self.songList[self.opts[i][j]][\"title\"] + \" - \" + self.songList[self.opts[i][j]][\"artist\"]\r\n                men.append(tp)\r\n            \r\n            p = Process(name=\"playsound\", target=playMusic, args=(self.paths[i],))\r\n            p.start()\r\n            pprint.pprint(men)\r\n            startTime = time.time()\r\n            choice = input(\"Escolha uma opção: \")\r\n            f = tmp[int(choice)]\r\n            print(f)\r\n            print(\"\\n\\n\\n\\n\\n\")\r\n            endTime = time.time()\r\n            p.terminate()\r\n            print(\"\\x1b[2J\\x1b[H\",end=\"\")\r\n            finalTime = endTime - startTime\r\n            self.results += \"r\" + str(i) + \"-@\" + str(finalTime) + \"#\" + str(f) + \"-\"\r\n        print(self.results)\r\n    \r\n\r\n    def gameQueue(self):\r\n        self.socket.settimeout(6)\r\n        print(\"A espera de jogos...\")\r\n        while True:\r\n            try:\r\n                data, addr = self.socket.recvfrom(self.buff)\r\n                msg = data.decode()\r\n                if msg == \"gameStart\":\r\n                    self.socket.sendto(\"gameStart-ack\".encode(), addr)\r\n                elif msg.split('-')[0] == \"menu\":\r\n                    print(\"Recebido menu\")\r\n                    self.socket.sendto(\"gameMenu-ack\".encode(), addr)\r\n                    self.generateMenu(msg)\r\n                elif msg.split('-')[0] == \"go\":\r\n                    self.socket.sendto(\"go-ack\".encode(), addr)\r\n                    self.gameOn()\r\n                    self.sR()\r\n                    break\r\n            except socket.timeout:\r\n                print(\"Timeout\")       \r\n\r\n        while True:\r\n            try:\r\n                self.socket.sendto(self.results.encode(), (serverAddr, self.gamePort))\r\n                data, addr = self.socket.recvfrom(self.buff)\r\n                msg = data.decode()\r\n                if msg.split('-')[0] == \"final\":\r\n                    self.socket.sendto(\"final-ack\".encode(), addr)\r\n                    print(msg.split('-')[1])«\r\n            except socket.timeout:\r\n                print(\"Other timeout\")\r\n        print(\"Resultados enviados\")   \r\n     \r\n    def sR(self):\r\n        res = self.results.replace(\"results\", \"\")\r\n        res = res[:-1]\r\n        res = re.split(r'-r[0-9]-', res)\r\n        times = []\r\n        opt = []\r\n        for i in range(1, len(res)):\r\n            times.append(res[i].split('#')[0][1:])\r\n            opt.append(res[i].split('#')[1])\r\n        print(\"tempos: \" + str(times))\r\n        print(\"options: \" + str(opt))        \r\n        \r\n        nCorrectas = 0\r\n        for i in range(len(opt)):\r\n            if opt[i] == self.sols[i]:\r\n                nCorrectas += 1\r\n        timeSum = 0\r\n        for i in range(len(times)):\r\n            timeSum += float(times[i])\r\n        self.results = \"results-\" + str(nCorrectas) + \"-\" + str(timeSum)\r\n\r\n    def disconnect(self):\r\n        input(\"GG WP, prima para sair\")\r\n        print(\"\\x1b[2J\\x1b[H\",end=\"\")\r\n        while True:\r\n            self.aSocket.sendto((\"disconnect-\" + self.hostName).encode(), (serverAddr, self.clientPort))\r\n            data, addr = self.aSocket.recvfrom(self.buff)\r\n            if data.decode() == \"disconnect-ack\":\r\n\r\n                break\r\n\r\n        \r\ndef main():\r\n    global serverAddr\r\n    serverAddr = sys.argv[1]\r\n    client = gameClient()\r\n    client.auth()\r\n    client.disconnect()\r\n    \r\nif __name__ == \"__main__\":\r\n    main()"
        }
    ]
}