{
    "sourceFile": "old/client.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1652465672189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1652465672189,
            "name": "Commit-0",
            "content": "import time, struct, socket, sys, threading, stage1.Receiver as Receiver, player, pickle\n\nmCastAddr = \"\"\n  \n  \nclass GameHandler(threading.Thread):\n    def __init__(self,m,socket,serverAddr, serverPort):\n        self.mCastAddr = m\n        self.serverAddr = serverAddr\n        self.serverPort = serverPort\n        self.gameState = 0\n        self.timeToAnswer = 0\n        self.mainSocket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n        self.mainPort = 30000\n        self.buffer = 2048\n        self.controlSocket = socket\n        self.timeToAnswer = 0\n        self.choices = []\n        \n    #function that receives the array of choices and displays a menu with the choices, for the user to choose\n    def round(self):\n        counter = 1\n        for entry in self.choices:\n            print(str(counter) + \" - \" + entry)\n            counter += 1\n        timeStart = time.time()\n        option = input(\"Choose a song: \")\n        timeEnd = time.time()\n        finalTime = timeEnd - timeStart\n        selected = self.choices[int(option)-1]\n        return str(selected) + \"-\" + str(finalTime)\n        \n    def run(self):\n        self.mainSocket.bind(('', self.mainPort))\n        rec = Receiver(mCastAddr,self.mainPort,self.mainSocket,self.buffer).start()\n        res = rec.worker()\n        if res == 1:\n            self.controlSocket.sendto(b'song-ok' + self.mCastAddr, rec.addr)\n            while True:\n                data, addr = self.controlSocket.recvfrom(self.buffer)\n                self.choices = pickle.loads(data)\n                if data.split('-')[0] == 'choices':\n                    self.controlSocket.sendto(b'choices-ok' + self.mCastAddr, addr)\n                elif data.split('-')[0] == 'game-start':\n                    self.controlSocket.sendto(b'game-start-ok' + self.mCastAddr, addr)\n                    break\n        else:\n            self.controlSocket.sendto(b'song-not-ok' + self.mCastAddr, rec.addr)\n        round()\n        \n\ndef messageHandler(s, buffer):\n    global mCastAddr\n    while True:\n        data, addr = s.recvfrom(buffer)\n        if data.split('-')[0] == 'hello' and data.split('-')[1] == 'ack':\n            print(\"Hello OK!\")\n            mCastAddr = data.split('-')[2]\n            break\n        elif data.split('-')[0] == 'ready' and data.split('-')[1] == 'ack':\n            print(\"Ready ok!\")\n            break\n        elif data.split('-')[0] == 'start' and data.split('-')[1] == 'ack':\n            g = GameHandler(mCastAddr)\n            g.start()            \n            break\n        else:\n            print(\"Unknown message!\")\n            break\n    \n    \n    \ndef main():\n    serverAddr = sys.argv[1]\n    controlPort = 8080\n    mainPort = 30000\n    controlSocket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n    controlSocket = socket.bind('', controlPort)\n    mainSocket = socket.bind('b', mainPort)\n    buffer = 2048\n    \n    \n    controlSocket.sendto(b'hello', (serverAddr, controlPort))\n    messageHandler(controlSocket, buffer)\n    controlSocket.sendto(b'ready', (serverAddr, controlPort))\n    messageHandler(controlSocket, buffer)\n    \n"
        }
    ]
}