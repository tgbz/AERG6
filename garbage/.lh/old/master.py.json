{
    "sourceFile": "old/master.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1652465672189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1652465672189,
            "name": "Commit-0",
            "content": "import socket, threading, json, random, stage1.Sender as Sender, pickle, time\nfrom unicodedata import name \n\n\n\nmaxPlayersForGame = 2;\n\n\nclients = dict()\n\n\n#formato mensagens login\n#hello-hostname-join\n#ready-\n\n\"\"\"dicion√°rio clientes\n    {\n        hostname: {\n            addr:ipv6,\n            port:port,\n            ready: 0,\n            ingame: 0/1\n            },\n            ...\n    }\n\"\"\"\n\n\nclass gameLogin(threading.Thread):\n    def __init__(self):\n        global clients\n        self.port = 8080\n        self.hostName = socket.gethostname()\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        self.buffer = 2048\n        self.mCastAddr = \"FF02::1\"\n\n    #Add client based on hostname as key to clients dictionary, if it doesn't exist\n    def addClient(self, hostname, addr, port):\n        if hostname not in clients.keys():\n            clients[hostname] = {\n                \"addr\": addr,\n                \"port\": port,\n                \"ready\": 0,\n                \"ingame\": 0\n            }\n            print(\"Client \" + hostname + \" added\")\n        else:\n            print(\"Client \" + hostname + \" already exists\")\n        return clients[hostname]\n\n    #Remove client\n    def removeClient(self, hostname):\n        if hostname in clients.keys():\n            clients.pop(hostname)\n            print(\"Client \" + hostname + \" removed\")\n        else:\n            print(\"Client \" + hostname + \" not found\")\n        return clients[hostname]\n\n    def handler(self):\n        self.socket.bind(('', self.port))\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n        self.socket.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, 1)\n        while True:\n            data,addr = self.socket.recvfrom(self.buffer)\n            \n            if data.split('-')[0] == 'hello':\n                hostname = data.split('-')[1]\n                if hostname not in clients.keys():\n                    self.addClient(hostname, addr[0], addr[1])\n                    self.socket.sendto(b'hello-ack-' + self.mCastAddr, addr)\n                else:\n                    self.socket.sendto(b'you are already in the group' + hostname.encode(), addr)\n            elif data.split('-')[0] == 'ready':\n                hostname = data.split('-')[1]\n                if hostname in clients.keys():\n                    if clients[hostname]['ready'] == 0:\n                        clients[hostname]['ready'] = 1\n                        self.socket.sendto(b'ready-ack' + hostname.encode(), addr)\n                    else:\n                        self.socket.sendto(b'You are already ready' + hostname.encode(), addr)\n                else:\n                    self.socket.sendto(b'you are not in the group' + hostname.encode(), addr)\n    def run(self):\n        self.handler()\n\n\n\n\nclass gameHandler(threading.Thread):\n    def __init__(self):\n        self.songDB = \"songlist.json\"\n        self.songList = json.load(open(self.songDB))\n        self.mCastSocket = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n        self.mCastSocket.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, 1)\n        self.mCastSocket.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, 1)\n        self.mCastSocket.bind(('',self.ip))\n        self.controlSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        self.ip = \"FF02::1\"\n        self.port = 30000\n        self.gameState = 0\n        self.totalPlayers = 0\n        self.currentGameNumberOfPlayers = 0\n\n    def roundHandler(self):\n        #select random number between 1 and 5 to choose a song based on songlist key, where the keys are numbers between 1 and 5\n        song = random.randint(1,5)\n        # go through clients\n        #send the song to the clients\n        fileToSend = self.songList[song][\"filepath\"]\n        selectedSongName = self.songList[song][\"title\"]\n        selectedSongArtist = self.songList[song][\"artist\"]\n        self.currentGameNumberOfPlayers = self.getReadyPlayers()\n        choices = self.getRandomSongs()\n        controlCounter = 0\n        print(\"Sending song to \" + str(self.currentGameNumberOfPlayers) + \" players\")\n        #call sender class with ip,port,filepath,socket, where ip is the multicastaddr\n        Sender(self.ip, self.port, fileToSend, self.mCastSocket)         \n        while controlCounter < self.currentGameNumberOfPlayers:\n            data, addr = self.controlSocket.recvfrom(self.buffer)\n            if data.decode() == \"song-ok\":\n                controlCounter += 1\n        print(\"Song sent to all players\")\n        controlCounter = 0\n        self.mCastSocket.sendto(pickle.dumps(choices) (self.ip, self.port))\n        while controlCounter < self.currentGameNumberOfPlayers:\n            data, addr = self.controlSocket.recvfrom(self.buffer)\n            if data.decode() == \"choices-ok\":\n                controlCounter += 1\n        controlCounter = 0\n        self.mCastSocket.sendto(b'game-start', (self.ip, self.port))\n        while controlCounter < self.currentGameNumberOfPlayers:\n            data, addr = self.controlSocket.recvfrom(self.buffer)\n            if data.decode() == \"game-start-ok\":\n                controlCounter += 1\n        results = dict()\n        while controlCounter < self.currentGameNumberOfPlayers:\n            data, addr = self.controlSocket(self.buffer)\n            ##choice-songname-artist\n            if data.split('-')[0] == 'choice':\n                results[addr] = data.split('-')[2]\n                print(results)\n                controlCounter += 1\n        \n        #function to get the winner, comparing their choice to the song tittle\n        winner = self.getWinner(results, selectedSongName, selectedSongArtist)\n        print(\"The winner is \" + winner)\n        self.mCastSocket.sendto(b'game-end', (self.ip, self.port))\n        self.mCastSocket.sendto(pickle.dumps(choices),  (self.ip, self.port))\n        self.gameState = 0\n        self.totalPlayers = 0\n        #wait for all players to choose a song and store it in a dictionary as follows:\n        # {\n        #   hostname: {\n        #       choice: songname,\n        #       addr: address,\n        #       port: port\n        #   }\n        # }\n        \n\n    def getWinner(self, results, selectedSongName, selectedSongArtist):\n        winners = []\n        for key, value in results.items():\n            if value == selectedSongName:\n                winners.append(key)\n        return winners\n\n    def getRandomSongs(self):\n        choices = []\n        for i in range(4):\n            song = random.randint(1,5)\n            choices.append(self.songList[song])\n        return choices\n    \n    def verifyClientReady(self, hostname):\n\n        if hostname in clients.keys():\n            if clients[hostname][\"ready\"] == 1:\n                return True\n            else:\n                return False\n        else:\n            return False\n\n    #Verify if client is in game\n\n    def verifyClientInGame(self, hostname):\n        if hostname in clients.keys():\n            if clients[hostname][\"ingame\"] == 1:\n                return True\n            else:\n                return False\n        else:\n            return False\n\n    #function to get the players that are ready, returning an array containing its addresses\n    def getReadyPlayersAddr(self):\n        readyPlayers = []\n        for client in clients.keys():\n            if clients[client][\"ready\"] == 1:\n                readyPlayers.append(clients[client][\"addr\"])\n        return readyPlayers\n\n    #function to get the number of players that are ready\n    def getReadyPlayers(self):\n        readyPlayers = 0\n        for client in clients.keys():\n            if clients[client][\"ready\"] == 1:\n                readyPlayers += 1\n        return readyPlayers\n \n    def run(self):\n        while self.currentGameNumberOfPlayers <= maxPlayersForGame:\n            print(\"Waiting for Players to game!\")\n            time.sleep(2)\n        self.roundHandler()\n        \n        \n#main function\ndef main():\n    #start game Login thread\n    print(\"Starting Game Threads...\\n\")\n    loginThread = gameLogin()\n    loginThread.start()\n    gameThread = gameHandler()\n    gameThread.start()\n    \nif name == '__main__':\n    main()\n\n    "
        }
    ]
}