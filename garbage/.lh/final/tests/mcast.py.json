{
    "sourceFile": "final/tests/mcast.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1654520014872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1654520022151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \r\n MYPORT = 8123\r\n MYGROUP_4 = '225.0.0.250'\r\n MYGROUP_6 = 'ff15:7079:7468:6f6e:6465:6d6f:6d63:6173'\r\n-MYTTL = 1 # Increase to reach other networks\r\n+MYTTL = 50 # Increase to reach other networks\r\n \r\n import time\r\n import struct\r\n import socket\r\n"
                },
                {
                    "date": 1654520052574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, ttl_bin)\r\n \r\n     while True:\r\n         data = repr(time.time())\r\n-        s.sendto(data + '\\0', (addrinfo[4][0], MYPORT))\r\n+        s.sendto((data + str('\\0')).encode(), (addrinfo[4][0], MYPORT))\r\n         time.sleep(1)\r\n \r\n \r\n def receiver(group):\r\n"
                }
            ],
            "date": 1654520014872,
            "name": "Commit-0",
            "content": "#!/usr/bin/env python\r\n#\r\n# Send/receive UDP multicast packets.\r\n# Requires that your OS kernel supports IP multicast.\r\n#\r\n# Usage:\r\n#   mcast -s (sender, IPv4)\r\n#   mcast -s -6 (sender, IPv6)\r\n#   mcast    (receivers, IPv4)\r\n#   mcast  -6  (receivers, IPv6)\r\n\r\nMYPORT = 8123\r\nMYGROUP_4 = '225.0.0.250'\r\nMYGROUP_6 = 'ff15:7079:7468:6f6e:6465:6d6f:6d63:6173'\r\nMYTTL = 1 # Increase to reach other networks\r\n\r\nimport time\r\nimport struct\r\nimport socket\r\nimport sys\r\n\r\ndef main():\r\n    group = MYGROUP_6 if \"-6\" in sys.argv[1:] else MYGROUP_4\r\n\r\n    if \"-s\" in sys.argv[1:]:\r\n        sender(group)\r\n    else:\r\n        receiver(group)\r\n\r\n\r\ndef sender(group):\r\n    addrinfo = socket.getaddrinfo(group, None)[0]\r\n\r\n    s = socket.socket(addrinfo[0], socket.SOCK_DGRAM)\r\n\r\n    # Set Time-to-live (optional)\r\n    ttl_bin = struct.pack('@i', MYTTL)\r\n    if addrinfo[0] == socket.AF_INET: # IPv4\r\n        s.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, ttl_bin)\r\n    else:\r\n        s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, ttl_bin)\r\n\r\n    while True:\r\n        data = repr(time.time())\r\n        s.sendto(data + '\\0', (addrinfo[4][0], MYPORT))\r\n        time.sleep(1)\r\n\r\n\r\ndef receiver(group):\r\n    # Look up multicast group address in name server and find out IP version\r\n    addrinfo = socket.getaddrinfo(group, None)[0]\r\n\r\n    # Create a socket\r\n    s = socket.socket(addrinfo[0], socket.SOCK_DGRAM)\r\n\r\n    # Allow multiple copies of this program on one machine\r\n    # (not strictly needed)\r\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n\r\n    # Bind it to the port\r\n    s.bind(('', MYPORT))\r\n\r\n    group_bin = socket.inet_pton(addrinfo[0], addrinfo[4][0])\r\n    # Join group\r\n    if addrinfo[0] == socket.AF_INET: # IPv4\r\n        mreq = group_bin + struct.pack('=I', socket.INADDR_ANY)\r\n        s.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)\r\n    else:\r\n        mreq = group_bin + struct.pack('@I', 0)\r\n        s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\r\n\r\n    # Loop, printing any data we receive\r\n    while True:\r\n        data, sender = s.recvfrom(1500)\r\n        while data[-1:] == '\\0': data = data[:-1] # Strip trailing \\0's\r\n        print (str(sender) + '  ' + repr(data))\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n"
        }
    ]
}