{
    "sourceFile": "final/tests/multicastSender.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1654517018727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1654517042359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n sock.bind(('', 8080))\r\n \r\n sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, True)\r\n-mreq = struct.pack(\"16s15s\".encode('utf-8'),socket.inet_pton(socket.AF_INET6,self.ip),(chr(0)*16).encode('utf-8'))\r\n+mreq = struct.pack(\"16s15s\".encode('utf-8'),socket.inet_pton(socket.AF_INET6,'ff02::1'),(chr(0)*16).encode('utf-8'))\r\n socket.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\r\n \r\n \r\n while True:\r\n"
                },
                {
                    "date": 1654517516301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n sock.bind(('', 8080))\r\n \r\n sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, True)\r\n mreq = struct.pack(\"16s15s\".encode('utf-8'),socket.inet_pton(socket.AF_INET6,'ff02::1'),(chr(0)*16).encode('utf-8'))\r\n-socket.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\r\n+sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\r\n \r\n \r\n while True:\r\n     socket.sendto(b'Hello World!', ('ff02::1', 8080))\r\n"
                },
                {
                    "date": 1654517527773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,6 +17,6 @@\n sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\r\n \r\n \r\n while True:\r\n-    socket.sendto(b'Hello World!', ('ff02::1', 8080))\r\n+    socket.send(b'Hello World!', ('ff02::1', 8080))\r\n     time.sleep(1)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654517538624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,6 +17,6 @@\n sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\r\n \r\n \r\n while True:\r\n-    socket.send(b'Hello World!', ('ff02::1', 8080))\r\n+    sock.sendto(b'Hello World!', ('ff02::1', 8080))\r\n     time.sleep(1)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654517552424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,5 +18,6 @@\n \r\n \r\n while True:\r\n     sock.sendto(b'Hello World!', ('ff02::1', 8080))\r\n+    print(\"messageSent\")\r\n     time.sleep(1)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654517632493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \r\n # Multicast UDP Socket creation\r\n sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-sock.bind(('', 8080))\r\n+sock.bind(('', 10000))\r\n \r\n sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, True)\r\n mreq = struct.pack(\"16s15s\".encode('utf-8'),socket.inet_pton(socket.AF_INET6,'ff02::1'),(chr(0)*16).encode('utf-8'))\r\n sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\r\n"
                },
                {
                    "date": 1654517732736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,13 +11,11 @@\n sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n sock.bind(('', 10000))\r\n \r\n-sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, True)\r\n-mreq = struct.pack(\"16s15s\".encode('utf-8'),socket.inet_pton(socket.AF_INET6,'ff02::1'),(chr(0)*16).encode('utf-8'))\r\n-sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\r\n \r\n \r\n+\r\n while True:\r\n     sock.sendto(b'Hello World!', ('ff02::1', 8080))\r\n     print(\"messageSent\")\r\n     time.sleep(1)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654517774805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,80 @@\n-#Multicast server who sends ipv6 messages to multicast addres ff02::1 \r\n+#!/usr/bin/env python\r\n+#\r\n+# Send/receive UDP multicast packets.\r\n+# Requires that your OS kernel supports IP multicast.\r\n+#\r\n+# Usage:\r\n+#   mcast -s (sender, IPv4)\r\n+#   mcast -s -6 (sender, IPv6)\r\n+#   mcast    (receivers, IPv4)\r\n+#   mcast  -6  (receivers, IPv6)\r\n \r\n+MYPORT = 8123\r\n+MYGROUP_4 = '225.0.0.250'\r\n+MYGROUP_6 = 'ff15:7079:7468:6f6e:6465:6d6f:6d63:6173'\r\n+MYTTL = 1 # Increase to reach other networks\r\n \r\n+import time\r\n+import struct\r\n import socket\r\n import sys\r\n\\ No newline at end of file\n-import time\r\n-import struct\r\n \r\n+def main():\r\n+    group = MYGROUP_6 if \"-6\" in sys.argv[1:] else MYGROUP_4\r\n \r\n-# Multicast UDP Socket creation\r\n-sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n-sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-sock.bind(('', 10000))\r\n+    if \"-s\" in sys.argv[1:]:\r\n+        sender(group)\r\n+    else:\r\n+        receiver(group)\r\n \r\n \r\n+def sender(group):\r\n+    addrinfo = socket.getaddrinfo(group, None)[0]\r\n \r\n+    s = socket.socket(addrinfo[0], socket.SOCK_DGRAM)\r\n \r\n-while True:\r\n-    sock.sendto(b'Hello World!', ('ff02::1', 8080))\r\n-    print(\"messageSent\")\r\n-    time.sleep(1)\n+    # Set Time-to-live (optional)\r\n+    ttl_bin = struct.pack('@i', MYTTL)\r\n+    if addrinfo[0] == socket.AF_INET: # IPv4\r\n+        s.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, ttl_bin)\r\n+    else:\r\n+        s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, ttl_bin)\r\n+\r\n+    while True:\r\n+        data = repr(time.time())\r\n+        s.sendto(data + '\\0', (addrinfo[4][0], MYPORT))\r\n+        time.sleep(1)\r\n+\r\n+\r\n+def receiver(group):\r\n+    # Look up multicast group address in name server and find out IP version\r\n+    addrinfo = socket.getaddrinfo(group, None)[0]\r\n+\r\n+    # Create a socket\r\n+    s = socket.socket(addrinfo[0], socket.SOCK_DGRAM)\r\n+\r\n+    # Allow multiple copies of this program on one machine\r\n+    # (not strictly needed)\r\n+    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n+\r\n+    # Bind it to the port\r\n+    s.bind(('', MYPORT))\r\n+\r\n+    group_bin = socket.inet_pton(addrinfo[0], addrinfo[4][0])\r\n+    # Join group\r\n+    if addrinfo[0] == socket.AF_INET: # IPv4\r\n+        mreq = group_bin + struct.pack('=I', socket.INADDR_ANY)\r\n+        s.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)\r\n+    else:\r\n+        mreq = group_bin + struct.pack('@I', 0)\r\n+        s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\r\n+\r\n+    # Loop, printing any data we receive\r\n+    while True:\r\n+        data, sender = s.recvfrom(1500)\r\n+        while data[-1:] == '\\0': data = data[:-1] # Strip trailing \\0's\r\n+        print (str(sender) + '  ' + repr(data))\r\n+\r\n+\r\n+if __name__ == '__main__':\r\n+    main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654517818393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,80 +1,21 @@\n-#!/usr/bin/env python\r\n-#\r\n-# Send/receive UDP multicast packets.\r\n-# Requires that your OS kernel supports IP multicast.\r\n-#\r\n-# Usage:\r\n-#   mcast -s (sender, IPv4)\r\n-#   mcast -s -6 (sender, IPv6)\r\n-#   mcast    (receivers, IPv4)\r\n-#   mcast  -6  (receivers, IPv6)\r\n+#Multicast server who sends ipv6 messages to multicast addres ff02::1 \r\n \r\n-MYPORT = 8123\r\n-MYGROUP_4 = '225.0.0.250'\r\n-MYGROUP_6 = 'ff15:7079:7468:6f6e:6465:6d6f:6d63:6173'\r\n-MYTTL = 1 # Increase to reach other networks\r\n \r\n+import socket\r\n+import sys\r\n import time\r\n import struct\r\n-import socket\r\n-import sys\r\n \r\n-def main():\r\n-    group = MYGROUP_6 if \"-6\" in sys.argv[1:] else MYGROUP_4\r\n \r\n-    if \"-s\" in sys.argv[1:]:\r\n-        sender(group)\r\n-    else:\r\n-        receiver(group)\r\n+# Multicast UDP Socket creation\r\n+sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n+sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n+sock.bind(('', 10000))\r\n \r\n \r\n-def sender(group):\r\n-    addrinfo = socket.getaddrinfo(group, None)[0]\r\n \r\n-    s = socket.socket(addrinfo[0], socket.SOCK_DGRAM)\r\n \r\n-    # Set Time-to-live (optional)\r\n-    ttl_bin = struct.pack('@i', MYTTL)\r\n-    if addrinfo[0] == socket.AF_INET: # IPv4\r\n-        s.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, ttl_bin)\r\n-    else:\r\n-        s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, ttl_bin)\r\n-\r\n-    while True:\r\n-        data = repr(time.time())\r\n-        s.sendto(data + '\\0', (addrinfo[4][0], MYPORT))\r\n-        time.sleep(1)\r\n-\r\n-\r\n-def receiver(group):\r\n-    # Look up multicast group address in name server and find out IP version\r\n-    addrinfo = socket.getaddrinfo(group, None)[0]\r\n-\r\n-    # Create a socket\r\n-    s = socket.socket(addrinfo[0], socket.SOCK_DGRAM)\r\n-\r\n-    # Allow multiple copies of this program on one machine\r\n-    # (not strictly needed)\r\n-    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-\r\n-    # Bind it to the port\r\n-    s.bind(('', MYPORT))\r\n-\r\n-    group_bin = socket.inet_pton(addrinfo[0], addrinfo[4][0])\r\n-    # Join group\r\n-    if addrinfo[0] == socket.AF_INET: # IPv4\r\n-        mreq = group_bin + struct.pack('=I', socket.INADDR_ANY)\r\n-        s.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)\r\n-    else:\r\n-        mreq = group_bin + struct.pack('@I', 0)\r\n-        s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\r\n-\r\n-    # Loop, printing any data we receive\r\n-    while True:\r\n\\ No newline at end of file\n-        data, sender = s.recvfrom(1500)\r\n-        while data[-1:] == '\\0': data = data[:-1] # Strip trailing \\0's\r\n-        print (str(sender) + '  ' + repr(data))\r\n-\r\n-\r\n-if __name__ == '__main__':\r\n-    main()\n+while True:\r\n+    sock.sendto(b'Hello World!', ('ff02::1', 8080))\r\n+    print(\"messageSent\")\r\n+    time.sleep(1)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654517987853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,17 +5,21 @@\n import sys\r\n import time\r\n import struct\r\n \r\n-\r\n+group = 'ff02::1'\r\n+ttl = 20\r\n # Multicast UDP Socket creation\r\n-sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\n-sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n-sock.bind(('', 10000))\r\n+addrinfo = socket.getaddrinfo(group, None)[0]\r\n \r\n+s = socket.socket(addrinfo[0], socket.SOCK_DGRAM)\r\n \r\n+ttl_bin = struct.pack('@i', ttl)\r\n \r\n+s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, ttl_bin)\r\n \r\n+\r\n+\r\n while True:\r\n-    sock.sendto(b'Hello World!', ('ff02::1', 8080))\r\n-    print(\"messageSent\")\r\n+    data = repr(time.time())\r\n+    s.sendto(data.encode(), (addrinfo[4][0], 10000))\r\n     time.sleep(1)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654518375741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,10 @@\n addrinfo = socket.getaddrinfo(group, None)[0]\r\n \r\n s = socket.socket(addrinfo[0], socket.SOCK_DGRAM)\r\n \r\n+s.bind(('', 10000))\r\n+\r\n ttl_bin = struct.pack('@i', ttl)\r\n \r\n s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, ttl_bin)\r\n \r\n"
                },
                {
                    "date": 1654518382822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,6 +22,7 @@\n \r\n \r\n while True:\r\n     data = repr(time.time())\r\n+    print(data)\r\n     s.sendto(data.encode(), (addrinfo[4][0], 10000))\r\n     time.sleep(1)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654518440057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,6 +23,6 @@\n \r\n while True:\r\n     data = repr(time.time())\r\n     print(data)\r\n-    s.sendto(data.encode(), (addrinfo[4][0], 10000))\r\n+    s.sendto(data.encode(), ('ff02::1', 10000))\r\n     time.sleep(1)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1654518691542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,13 @@\n-#Multicast server who sends ipv6 messages to multicast addres ff02::1 \r\n-\r\n-\r\n import socket\r\n-import sys\r\n-import time\r\n-import struct\r\n \r\n group = 'ff02::1'\r\n+port = 5004\r\n+\r\n ttl = 20\r\n-# Multicast UDP Socket creation\r\n-addrinfo = socket.getaddrinfo(group, None)[0]\r\n \r\n-s = socket.socket(addrinfo[0], socket.SOCK_DGRAM)\r\n+sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\r\n \r\n-s.bind(('', 10000))\r\n+sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_TTL, ttl)\r\n \r\n-ttl_bin = struct.pack('@i', ttl)\r\n+sock.sendto(b'Hello World', (group, port))\r\n \r\n-s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, ttl_bin)\r\n-\r\n-\r\n-\r\n\\ No newline at end of file\n-while True:\r\n-    data = repr(time.time())\r\n-    print(data)\r\n-    s.sendto(data.encode(), ('ff02::1', 10000))\r\n-    time.sleep(1)\n"
                },
                {
                    "date": 1654518700392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,6 +8,8 @@\n sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\r\n \r\n sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_TTL, ttl)\r\n \r\n-sock.sendto(b'Hello World', (group, port))\r\n \r\n+while True:\r\n+    sock.sendto(b'Hello World', (group, port))\r\n+\r\n"
                },
                {
                    "date": 1654518705635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,5 +11,5 @@\n \r\n \r\n while True:\r\n     sock.sendto(b'Hello World', (group, port))\r\n-\r\n+    time.sleep(.5)\r\n"
                },
                {
                    "date": 1654518726965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n-import socket\r\n+import socket,time\r\n \r\n group = 'ff02::1'\r\n port = 5004\r\n \r\n ttl = 20\r\n \r\n sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\r\n \r\n-sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_TTL, ttl)\r\n+sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, ttl)\r\n \r\n \r\n while True:\r\n     sock.sendto(b'Hello World', (group, port))\r\n"
                }
            ],
            "date": 1654517018726,
            "name": "Commit-0",
            "content": "#Multicast server who sends ipv6 messages to multicast addres ff02::1 \r\n\r\n\r\nimport socket\r\nimport sys\r\nimport time\r\nimport struct\r\n\r\n\r\n# Multicast UDP Socket creation\r\nsock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\r\nsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\nsock.bind(('', 8080))\r\n\r\nsock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, True)\r\nmreq = struct.pack(\"16s15s\".encode('utf-8'),socket.inet_pton(socket.AF_INET6,self.ip),(chr(0)*16).encode('utf-8'))\r\nsocket.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\r\n\r\n\r\nwhile True:\r\n    socket.sendto(b'Hello World!', ('ff02::1', 8080))\r\n    time.sleep(1)"
        }
    ]
}