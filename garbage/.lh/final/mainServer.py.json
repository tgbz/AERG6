{
    "sourceFile": "final/mainServer.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1654078295294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1654078608237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,30 @@\n import threading, json\r\n \r\n class GameWorker(threading.Thread):\r\n-    def __init__(self):\r\n+    def __init__(self, rounds):\r\n         threading.Thread.__init__(self)\r\n-        self.songsDB = \"assets/songlist.json\"\r\n-        self.songList = jsonload(open(self.songDB))\r\n+        self.songsDB = \"assets/songlist.json\" #path para o ficheiro de musicas\r\n+        self.songList = json.load(open(self.songDB)) # carrega o ficheiro de musicas\r\n+        self.currentGamePlayers = dict() #dicionario com os jogadores desse jogo\r\n+        self.gameRounds = rounds #número de rondas do jogo\r\n+        \r\n+    #Funcao responsável por escolher ids de músicas leatórias a partir da base de dados disponível\r\n+    def chooseSongs(self):\r\n+        options = dict()\r\n+        \r\n+        \"\"\"\r\n+        Iterar sobre a lista de musicas disponivel na base de dados e escolher\r\n+            <self.gameRounds> músicas aleatórias\r\n+            devolvendo um dicionario com as musicas escolhidas com o seguinte formato:\r\n+                {\r\n+                 \"id\": {\r\n+                     \"title\": <title>,\r\n+                     \"artist\": <artist>\r\n+                 },\r\n+                 \"id\" : {\r\n+                        \"title\": <title>,\r\n+                        \"artist\": <artist>\r\n+                }\r\n+        \r\n+        \"\"\"\r\n \r\n-\r\n"
                },
                {
                    "date": 1654078652676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,7 +24,12 @@\n                  \"id\" : {\r\n                         \"title\": <title>,\r\n                         \"artist\": <artist>\r\n                 }\r\n-        \r\n+                ...\r\n+                }        \r\n         \"\"\"\r\n-\r\n+        for i in range(self.gameRounds):\r\n+            song = self.songList[i]\r\n+            options[i][\"title\"] = song[\"title\"]\r\n+            options[i][\"artist\"] = song[\"artist\"]\r\n+        return options\r\n"
                },
                {
                    "date": 1654078665428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,5 +31,6 @@\n         for i in range(self.gameRounds):\r\n             song = self.songList[i]\r\n             options[i][\"title\"] = song[\"title\"]\r\n             options[i][\"artist\"] = song[\"artist\"]\r\n+        print(\"Musicas escolhidas para jogo: \", options)\r\n         return options\r\n"
                },
                {
                    "date": 1654078770893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,14 +6,10 @@\n         self.songsDB = \"assets/songlist.json\" #path para o ficheiro de musicas\r\n         self.songList = json.load(open(self.songDB)) # carrega o ficheiro de musicas\r\n         self.currentGamePlayers = dict() #dicionario com os jogadores desse jogo\r\n         self.gameRounds = rounds #número de rondas do jogo\r\n-        \r\n-    #Funcao responsável por escolher ids de músicas leatórias a partir da base de dados disponível\r\n-    def chooseSongs(self):\r\n-        options = dict()\r\n-        \r\n-        \"\"\"\r\n+        self.selectedSongs = dict()  \r\n+    \"\"\"\r\n         Iterar sobre a lista de musicas disponivel na base de dados e escolher\r\n             <self.gameRounds> músicas aleatórias\r\n             devolvendo um dicionario com as musicas escolhidas com o seguinte formato:\r\n                 {\r\n@@ -25,12 +21,16 @@\n                         \"title\": <title>,\r\n                         \"artist\": <artist>\r\n                 }\r\n                 ...\r\n-                }        \r\n-        \"\"\"\r\n+                } \r\n+    \"\"\"\r\n+    def chooseSongs(self):\r\n         for i in range(self.gameRounds):\r\n             song = self.songList[i]\r\n-            options[i][\"title\"] = song[\"title\"]\r\n-            options[i][\"artist\"] = song[\"artist\"]\r\n-        print(\"Musicas escolhidas para jogo: \", options)\r\n+            self.selectedSongs[i][\"title\"] = song[\"title\"]\r\n+            self.selectedSongs[i][\"artist\"] = song[\"artist\"]\r\n+        print(\"Musicas escolhidas para jogo: \", self.selectedSongs)\r\n         return options\r\n+\r\n+    def getOptionsForSongs(self):\r\n+        \n\\ No newline at end of file\n"
                },
                {
                    "date": 1654094216960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,10 @@\n         self.songsDB = \"assets/songlist.json\" #path para o ficheiro de musicas\r\n         self.songList = json.load(open(self.songDB)) # carrega o ficheiro de musicas\r\n         self.currentGamePlayers = dict() #dicionario com os jogadores desse jogo\r\n         self.gameRounds = rounds #número de rondas do jogo\r\n-        self.selectedSongs = dict()  \r\n+        self.selectedSongs = dict()\r\n+        self.gameOptions = dict()  \r\n     \"\"\"\r\n         Iterar sobre a lista de musicas disponivel na base de dados e escolher\r\n             <self.gameRounds> músicas aleatórias\r\n             devolvendo um dicionario com as musicas escolhidas com o seguinte formato:\r\n@@ -29,8 +30,43 @@\n             song = self.songList[i]\r\n             self.selectedSongs[i][\"title\"] = song[\"title\"]\r\n             self.selectedSongs[i][\"artist\"] = song[\"artist\"]\r\n         print(\"Musicas escolhidas para jogo: \", self.selectedSongs)\r\n-        return options\r\n \r\n+    \"\"\"\r\n+    Função responsável por iterar a self.selectedSongs e a cada iteração\r\n\\ No newline at end of file\n+        procurar na self.songList outras 3 músicas aleatórias que não sejam\r\n+        as que já foram escolhidas, adicionando ao self.gameOptions no seguinte formato:\r\n+            {\r\n+                \"r1\": {\r\n+                    \"id\": {\r\n+                        \"title\": <title>,\r\n+                        \"artist\": <artist>\r\n+                    },\r\n+                    \"id\": {\r\n+                        \"title\": <title>,\r\n+                        \"artist\": <artist>\r\n+                    ...\r\n+                    },\r\n+                \"r2\": {\r\n+                    \"id\": {\r\n+                        \"title\": <title>,\r\n+                        \"artist\": <artist>\r\n+                    },\r\n+                    \"id\": {\r\n+                        \"title\": <title>,\r\n+                        \"artist\": <artist>\r\n+                    ...\r\n+                    \r\n+                }\r\n+\r\n+    \"\"\"\r\n     def getOptionsForSongs(self):\r\n-        \n+        for round in self.selectedSongs:\r\n+            for i in range(3):\r\n+                song = self.songList[i]\r\n+                if song not in self.selectedSongs[round]:\r\n+                    self.gameOptions[round][i][\"title\"] = song[\"title\"]\r\n+                    self.gameOptions[round][i][\"artist\"] = song[\"artist\"]\r\n+        print(\"Opções para as musicas escolhidas: \", self.gameOptions)\r\n+    \r\n+    def \n\\ No newline at end of file\n"
                },
                {
                    "date": 1654095935391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import threading, json\r\n \r\n-class GameWorker(threading.Thread):\r\n+class gameGenerator():\r\n     def __init__(self, rounds):\r\n         threading.Thread.__init__(self)\r\n         self.songsDB = \"assets/songlist.json\" #path para o ficheiro de musicas\r\n         self.songList = json.load(open(self.songDB)) # carrega o ficheiro de musicas\r\n@@ -29,8 +29,9 @@\n         for i in range(self.gameRounds):\r\n             song = self.songList[i]\r\n             self.selectedSongs[i][\"title\"] = song[\"title\"]\r\n             self.selectedSongs[i][\"artist\"] = song[\"artist\"]\r\n+            self.selectedSongs[i][\"filePath\"] = song[\"filePath\"]\r\n         print(\"Musicas escolhidas para jogo: \", self.selectedSongs)\r\n \r\n     \"\"\"\r\n     Função responsável por iterar a self.selectedSongs e a cada iteração\r\n@@ -68,5 +69,6 @@\n                     self.gameOptions[round][i][\"title\"] = song[\"title\"]\r\n                     self.gameOptions[round][i][\"artist\"] = song[\"artist\"]\r\n         print(\"Opções para as musicas escolhidas: \", self.gameOptions)\r\n     \r\n-    def \n\\ No newline at end of file\n+    def run(self):\r\n+        \n\\ No newline at end of file\n"
                },
                {
                    "date": 1654095985414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,6 +69,8 @@\n                     self.gameOptions[round][i][\"title\"] = song[\"title\"]\r\n                     self.gameOptions[round][i][\"artist\"] = song[\"artist\"]\r\n         print(\"Opções para as musicas escolhidas: \", self.gameOptions)\r\n     \r\n-    def run(self):\r\n-        \n\\ No newline at end of file\n+    def generateGame(self):\r\n+        self.chooseSongs()\r\n+        self.getOptionsForSongs()\r\n+        return self.gameOptions\n\\ No newline at end of file\n"
                }
            ],
            "date": 1654078295294,
            "name": "Commit-0",
            "content": "import threading, json\r\n\r\nclass GameWorker(threading.Thread):\r\n    def __init__(self):\r\n        threading.Thread.__init__(self)\r\n        self.songsDB = \"assets/songlist.json\"\r\n        self.songList = jsonload(open(self.songDB))\r\n\r\n\r\n"
        }
    ]
}