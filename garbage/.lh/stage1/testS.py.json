{
    "sourceFile": "stage1/testS.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1652643807812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1652643829887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,5 +14,6 @@\n mreq = struct.pack(\"16s15s\".encode('utf-8'), socket.inet_pton(socket.AF_INET6, \"ff02::abcd:1\"), (chr(0) * 16).encode('utf-8'))\n sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\n \n data, addr = sock.recvfrom(1024)\n+    data.decode()    \n \n"
                },
                {
                    "date": 1652643861059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+import socket, struct\n+\n # Initialise socket for IPv6 datagrams\n sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\n \n # Allows address to be reused\n@@ -14,6 +16,7 @@\n mreq = struct.pack(\"16s15s\".encode('utf-8'), socket.inet_pton(socket.AF_INET6, \"ff02::abcd:1\"), (chr(0) * 16).encode('utf-8'))\n sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\n \n data, addr = sock.recvfrom(1024)\n-    data.decode()    \n+    data.decode()\n+        \n \n"
                },
                {
                    "date": 1652643872277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,7 +16,7 @@\n mreq = struct.pack(\"16s15s\".encode('utf-8'), socket.inet_pton(socket.AF_INET6, \"ff02::abcd:1\"), (chr(0) * 16).encode('utf-8'))\n sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\n \n data, addr = sock.recvfrom(1024)\n-    data.decode()\n-        \n+data = data.decode()\n+print(data)\n \n"
                },
                {
                    "date": 1652643914229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,7 @@\n import socket, struct\n \n-# Initialise socket for IPv6 datagrams\n-sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\n-\n-# Allows address to be reused\n-sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n-\n-# Binds to all interfaces on the given port\n-sock.bind(('', 8080))\n-\n-# Allow messages from this socket to loop back for development\n+# Create ipv6 datagram socket\n+sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n+# Allow own messages to be sent back (for local testing)\n sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, True)\n-\n-# Construct message for joining multicast group\n-mreq = struct.pack(\"16s15s\".encode('utf-8'), socket.inet_pton(socket.AF_INET6, \"ff02::abcd:1\"), (chr(0) * 16).encode('utf-8'))\n-sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\n-\n-data, addr = sock.recvfrom(1024)\n-data = data.decode()\n-print(data)\n-\n+sock.sendto(\"hello world\".encode('utf-8'), (\"ff02::abcd:1\", 8080))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1652643953137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,5 +3,6 @@\n # Create ipv6 datagram socket\n sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n # Allow own messages to be sent back (for local testing)\n sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, True)\n-sock.sendto(\"hello world\".encode('utf-8'), (\"ff02::abcd:1\", 8080))\n\\ No newline at end of file\n+sock.sendto(\"hello world\".encode('utf-8'), (\"ff02::abcd:1\", 8080))\n+print(\"helloWorld Sent\")\n\\ No newline at end of file\n"
                }
            ],
            "date": 1652643807812,
            "name": "Commit-0",
            "content": "# Initialise socket for IPv6 datagrams\nsock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\n\n# Allows address to be reused\nsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n# Binds to all interfaces on the given port\nsock.bind(('', 8080))\n\n# Allow messages from this socket to loop back for development\nsock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, True)\n\n# Construct message for joining multicast group\nmreq = struct.pack(\"16s15s\".encode('utf-8'), socket.inet_pton(socket.AF_INET6, \"ff02::abcd:1\"), (chr(0) * 16).encode('utf-8'))\nsock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\n\ndata, addr = sock.recvfrom(1024)\n\n"
        }
    ]
}