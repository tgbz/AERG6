{
    "sourceFile": "stage1/Sender.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1652546059721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1652546319279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,29 +2,37 @@\n \n \n \n class Sender(threading.Thread):\n-    def __init__(self, ip, port, filepath, flag, socket):\n+    def __init__(self, ip, port, file, flag, socket):\n         threading.Thread.__init__(self)\n         self.ip = ip\n         self.port = port\n-        self.filepath = filepath\n+        self.file = file\n         self.s = socket\n         self.f = open(filepath, 'rb')\n         self.buffer = 2048\n         self.type = flag # 0 for song, 1 for options, 2 for strings\n+        \n     def run(self):\n         self.s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n         self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, 1)\n         self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, 1)\n-        data = self.f.read(self.buffer)\n-        print(\"File Read in Sender\")\n-        while(data):\n-            print(\"Trying to send..\")\n-            if(self.s.sendto(data,(self.ip,self.port))):\n-                data=self.f.read(self.buffer)\n-                print(\"file sent\")\n-                time.sleep(0.05)\n-        self.f.close()\n-        print(\"Song sent on multicast\")\n-\n+        if self.type == 0:\n+            data = self.f.read(self.buffer)\n+            print(\"Ficheiro lido no Sender\")\n+            while(data):\n+                print(\"A tentar enviar..\")\n+                if(self.s.sendto(data,(self.ip,self.port))):\n+                    data=self.f.read(self.buffer)\n+                    print(\"ficheiro enviado\")\n+                    time.sleep(0.05)\n+            self.f.close()\n+            print(\"Ficheiro enviado em multicast\")\n+        \n+        elif self.type == 1:\n+            data = self.file\n+            print(\"Sending songs\")\n+            \n+            while(data):\n+                print(\"E\")\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652546555321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import socket, time, threading\n+import socket, time, threading,json\n \n \n \n class Sender(threading.Thread):\n@@ -8,9 +8,9 @@\n         self.ip = ip\n         self.port = port\n         self.file = file\n         self.s = socket\n-        self.f = open(filepath, 'rb')\n+        self.f = open(file, 'rb')\n         self.buffer = 2048\n         self.type = flag # 0 for song, 1 for options, 2 for strings\n         \n     def run(self):\n@@ -27,12 +27,25 @@\n                     print(\"ficheiro enviado\")\n                     time.sleep(0.05)\n             self.f.close()\n             print(\"Ficheiro enviado em multicast\")\n-        \n+        #enviar opções de jogo em formato json(dicionário)\n         elif self.type == 1:\n             data = self.file\n-            print(\"Sending songs\")\n-            \n+            print(\"A enviar opcoes de musicas\")\n             while(data):\n\\ No newline at end of file\n-                print(\"E\")\n-    \n+                print(\"A tentar enviar\")\n+                self.s.sendto(json.dumps(self.file),(self.ip,self.port))\n+                time.sleep(0.05)\n+                print(\"ficheiro enviado\")\n+            print(\"Opções enviadas em multicast\")\n+        #enviar strings passadas como argumento\n+        elif self.type == 2:\n+            data = self.file\n+            print(\"A enviar strings\")\n+            while(data):\n+                print(\"A tentar enviar\")\n+                self.s.sendto(data,(self.ip,self.port))\n+                time.sleep(0.05)\n+                print(\"ficheiro enviado\")\n+            print(\"String % s enviada em multicast\" % self.file)\n+        \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652625652300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         self.type = flag # 0 for song, 1 for options, 2 for strings\n         \n     def run(self):\n         self.s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n-        self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, 1)\n+        self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, 30)\n         self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, 1)\n         if self.type == 0:\n             data = self.f.read(self.buffer)\n             print(\"Ficheiro lido no Sender\")\n"
                },
                {
                    "date": 1652625679335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n         self.ip = ip\n         self.port = port\n         self.file = file\n         self.s = socket\n-        self.f = open(file, 'rb')\n         self.buffer = 2048\n         self.type = flag # 0 for song, 1 for options, 2 for strings\n         \n     def run(self):\n@@ -29,8 +28,10 @@\n             self.f.close()\n             print(\"Ficheiro enviado em multicast\")\n         #enviar opções de jogo em formato json(dicionário)\n         elif self.type == 1:\n+            self.f = open(file, 'rb')\n+            \n             data = self.file\n             print(\"A enviar opcoes de musicas\")\n             while(data):\n                 print(\"A tentar enviar\")\n"
                },
                {
                    "date": 1652625732059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n         self.s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n         self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, 30)\n         self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, 1)\n         if self.type == 0:\n+            self.f = open(file, 'rb')\n             data = self.f.read(self.buffer)\n             print(\"Ficheiro lido no Sender\")\n             while(data):\n                 print(\"A tentar enviar..\")\n@@ -28,10 +29,8 @@\n             self.f.close()\n             print(\"Ficheiro enviado em multicast\")\n         #enviar opções de jogo em formato json(dicionário)\n         elif self.type == 1:\n-            self.f = open(file, 'rb')\n-            \n             data = self.file\n             print(\"A enviar opcoes de musicas\")\n             while(data):\n                 print(\"A tentar enviar\")\n"
                },
                {
                    "date": 1652625797359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         self.s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n         self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, 30)\n         self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, 1)\n         if self.type == 0:\n-            self.f = open(file, 'rb')\n+            self.f = open(self.file, 'rb')\n             data = self.f.read(self.buffer)\n             print(\"Ficheiro lido no Sender\")\n             while(data):\n                 print(\"A tentar enviar..\")\n"
                },
                {
                    "date": 1652625959374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,11 +41,10 @@\n         #enviar strings passadas como argumento\n         elif self.type == 2:\n             data = self.file\n             print(\"A enviar strings\")\n-            while(data):\n-                print(\"A tentar enviar\")\n-                self.s.sendto(data,(self.ip,self.port))\n-                time.sleep(0.05)\n-                print(\"ficheiro enviado\")\n+            print(\"A tentar enviar\")\n+            self.s.sendto(data,(self.ip,self.port))\n+            time.sleep(0.05)\n+            print(\"ficheiro enviado\")\n             print(\"String % s enviada em multicast\" % self.file)\n         \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652625986533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n         self.buffer = 2048\n         self.type = flag # 0 for song, 1 for options, 2 for strings\n         \n     def run(self):\n+        print(\"Flag recebida: \", self.type)\n         self.s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n         self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, 30)\n         self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, 1)\n         if self.type == 0:\n"
                },
                {
                    "date": 1652626024190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n         elif self.type == 2:\n             data = self.file\n             print(\"A enviar strings\")\n             print(\"A tentar enviar\")\n-            self.s.sendto(data,(self.ip,self.port))\n+            self.s.sendto(bytes(data),(self.ip,self.port))\n             time.sleep(0.05)\n             print(\"ficheiro enviado\")\n             print(\"String % s enviada em multicast\" % self.file)\n         \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652626060820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n         elif self.type == 2:\n             data = self.file\n             print(\"A enviar strings\")\n             print(\"A tentar enviar\")\n-            self.s.sendto(bytes(data),(self.ip,self.port))\n+            self.s.sendto(data.encode(),(self.ip,self.port))\n             time.sleep(0.05)\n             print(\"ficheiro enviado\")\n             print(\"String % s enviada em multicast\" % self.file)\n         \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652626683408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,9 @@\n         \n     def run(self):\n         print(\"Flag recebida: \", self.type)\n         self.s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n-        self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, 30)\n-        self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, 1)\n+        self.s.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, MULTICAST_TTL)\n         if self.type == 0:\n             self.f = open(self.file, 'rb')\n             data = self.f.read(self.buffer)\n             print(\"Ficheiro lido no Sender\")\n"
                },
                {
                    "date": 1652640146067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         \n     def run(self):\n         print(\"Flag recebida: \", self.type)\n         self.s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n-        self.s.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, MULTICAST_TTL)\n+        self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, 1)\n         if self.type == 0:\n             self.f = open(self.file, 'rb')\n             data = self.f.read(self.buffer)\n             print(\"Ficheiro lido no Sender\")\n"
                },
                {
                    "date": 1652640186557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,10 @@\n     def run(self):\n         print(\"Flag recebida: \", self.type)\n         self.s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n         self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, 1)\n+        self.s.bind(('', self.port))\n+        \n         if self.type == 0:\n             self.f = open(self.file, 'rb')\n             data = self.f.read(self.buffer)\n             print(\"Ficheiro lido no Sender\")\n"
                },
                {
                    "date": 1652640292812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,8 @@\n         self.type = flag # 0 for song, 1 for options, 2 for strings\n         \n     def run(self):\n         print(\"Flag recebida: \", self.type)\n-        self.s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n         self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, 1)\n         self.s.bind(('', self.port))\n         \n         if self.type == 0:\n"
                },
                {
                    "date": 1652641410762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,13 @@\n         self.type = flag # 0 for song, 1 for options, 2 for strings\n         \n     def run(self):\n         print(\"Flag recebida: \", self.type)\n-        self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, 1)\n+        self.s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n         self.s.bind(('', self.port))\n+        self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, False)\n+        mreq = struct.pack(\"16s15s\".encode('utf-8'),socket.inet_pton(socket.AF_INET6,self.mcaddr),(chr(0)*16).encode('utf-8'))\n+        self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\n         \n         if self.type == 0:\n             self.f = open(self.file, 'rb')\n             data = self.f.read(self.buffer)\n@@ -45,7 +48,6 @@\n             print(\"A enviar strings\")\n             print(\"A tentar enviar\")\n             self.s.sendto(data.encode(),(self.ip,self.port))\n             time.sleep(0.05)\n-            print(\"ficheiro enviado\")\n             print(\"String % s enviada em multicast\" % self.file)\n         \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652641452052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import socket, time, threading,json\n+import socket, time, threading,json, struct\n \n \n \n class Sender(threading.Thread):\n"
                },
                {
                    "date": 1652641487799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         print(\"Flag recebida: \", self.type)\n         self.s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n         self.s.bind(('', self.port))\n         self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, False)\n-        mreq = struct.pack(\"16s15s\".encode('utf-8'),socket.inet_pton(socket.AF_INET6,self.mcaddr),(chr(0)*16).encode('utf-8'))\n+        mreq = struct.pack(\"16s15s\".encode('utf-8'),socket.inet_pton(socket.AF_INET6,self.ip),(chr(0)*16).encode('utf-8'))\n         self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\n         \n         if self.type == 0:\n             self.f = open(self.file, 'rb')\n"
                },
                {
                    "date": 1652641623339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     def run(self):\n         print(\"Flag recebida: \", self.type)\n         self.s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n         self.s.bind(('', self.port))\n-        self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, False)\n+        self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, True)\n         mreq = struct.pack(\"16s15s\".encode('utf-8'),socket.inet_pton(socket.AF_INET6,self.ip),(chr(0)*16).encode('utf-8'))\n         self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)\n         \n         if self.type == 0:\n"
                }
            ],
            "date": 1652546059721,
            "name": "Commit-0",
            "content": "import socket, time, threading\n\n\n\nclass Sender(threading.Thread):\n    def __init__(self, ip, port, filepath, flag, socket):\n        threading.Thread.__init__(self)\n        self.ip = ip\n        self.port = port\n        self.filepath = filepath\n        self.s = socket\n        self.f = open(filepath, 'rb')\n        self.buffer = 2048\n        self.type = flag # 0 for song, 1 for options, 2 for strings\n    def run(self):\n        self.s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n        self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, 1)\n        self.s.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, 1)\n        data = self.f.read(self.buffer)\n        print(\"File Read in Sender\")\n        while(data):\n            print(\"Trying to send..\")\n            if(self.s.sendto(data,(self.ip,self.port))):\n                data=self.f.read(self.buffer)\n                print(\"file sent\")\n                time.sleep(0.05)\n        self.f.close()\n        print(\"Song sent on multicast\")\n\n    "
        }
    ]
}